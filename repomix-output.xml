This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
client/.gitignore
client/eslint.config.js
client/index.html
client/package.json
client/postcss.config.js
client/public/vite.svg
client/README.md
client/src/App.jsx
client/src/components/catalog/FilterPanel.jsx
client/src/components/catalog/ShowCard.jsx
client/src/components/home/CategoryCard.jsx
client/src/components/home/FeaturedShow.jsx
client/src/components/home/ShowCategoryRow.jsx
client/src/components/Layout/footer.jsx
client/src/components/Layout/header.jsx
client/src/components/shared/ScoreVisual.jsx
client/src/hooks/useAutocomplete.js
client/src/hooks/useDebounce.js
client/src/index.css
client/src/main.jsx
client/src/pages/CatalogPage.jsx
client/src/pages/ComparePage.jsx
client/src/pages/HomePage.jsx
client/src/pages/ShowDetailPage.jsx
client/src/services/showService.js
client/tailwind.config.js
client/vite.config.js
database/import_data.js
database/reviewed_shows.json
database/schema.sql
package.json
scripts/updateImageFilenames.js
server/api/homepage.js
server/api/index.js
server/api/shows.js
server/api/suggestions.js
server/api/themes.js
server/db/connection.js
server/db/queries.js
server/server.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="client/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="client/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="client/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <!-- Using vite.svg as placeholder, consider creating a specific favicon -->
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Updated Title -->
    <title>Sensory Screen Time Guide</title>
    <!-- Added Meta Description -->
    <meta name="description" content="Find TV shows reviewed for sensory stimulation levels to help choose appropriate content for children." />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="client/postcss.config.js">
// client/postcss.config.js
export default {
    plugins: {
      '@tailwindcss/postcss': {}, // Use the new package name here
      autoprefixer: {},
    },
  }
</file>

<file path="client/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="client/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

## Sensory Screen Time Guide Notes

This project uses React for the frontend (user interface), Node.js/Express for the backend (server logic), and SQLite for the database (storing show information). Tailwind CSS is used for styling.

**To run the project:**
1.  Make sure you have **Node.js** installed (which includes npm).
2.  Open a terminal or command prompt in the main project folder (the one containing this README and the `server`, `client`, `database` folders).
3.  **Install Backend Dependencies:** Run the command:
    ```bash
    npm install
    ```
4.  **Install Frontend Dependencies:** Navigate into the client folder and run install:
    ```bash
    cd client
    npm install
    cd ..
    ```
    *(This installs React, Tailwind, Chart.js, React Icons, etc.)*
5.  **IMPORTANT - Create/Update Database:** Run the data import script from the main project folder:
    ```bash
    npm run import-data
    ```
    *(This reads `database/reviewed_shows.json` and creates/updates `database/shows.db`)*
6.  **Run Development Servers:** Start both backend and frontend servers concurrently using:
    ```bash
    npm run dev
    ```
    *(This uses `nodemon` to watch backend files and `vite` for the frontend with hot-reloading)*
7.  Open your web browser to the address provided by Vite (usually `http://localhost:5173`). The backend API will be running on `http://localhost:3001` and proxied via Vite.
</file>

<file path="client/src/components/home/CategoryCard.jsx">
// client/src/components/home/CategoryCard.jsx
import React from 'react';
import { Link } from 'react-router-dom';

// Accepts title, description, an IconComponent, and a linkUrl
const CategoryCard = ({ title, description, IconComponent, linkUrl }) => {
  // Basic validation: Ensure linkUrl is provided
  if (!linkUrl) {
    console.warn(`CategoryCard "${title}" is missing a linkUrl.`);
    // Optionally return null or a disabled state if no link is provided
    // return null;
  }

  return (
    // Use Link component for navigation
    <Link
      to={linkUrl || '#'} // Use '#' as a fallback if linkUrl is somehow missing
      // Styling for the card: hover effects, transitions
      className="block p-6 bg-white rounded-lg border border-gray-100 shadow-sm hover:bg-teal-50 hover:shadow-md hover:border-teal-200 transition-all duration-200 ease-in-out text-center transform hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-opacity-50"
      title={`Explore shows related to: ${title}`} // Add a tooltip
    >
      {/* Icon Area */}
      <div className="flex justify-center items-center mb-3 text-teal-600 h-8"> {/* Fixed height for icon area */}
         {/* Render the passed icon component if it exists */}
         {IconComponent && <IconComponent size={32} aria-hidden="true" />} {/* Use aria-hidden for decorative icons */}
      </div>
      {/* Text Content */}
      <h5 className="mb-1 text-lg font-semibold tracking-tight text-gray-800">{title}</h5>
      <p className="font-normal text-sm text-gray-600">{description}</p>
    </Link>
  );
};

export default CategoryCard;
</file>

<file path="client/src/components/home/ShowCategoryRow.jsx">
// client/src/components/home/ShowCategoryRow.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ShowCard from '../catalog/ShowCard'; // Assuming ShowCard is used here

// --- Skeleton Card Component ---
const SkeletonShowCard = () => (
    <div className="border border-gray-200 rounded-lg shadow-md bg-white p-4 animate-pulse h-full flex flex-col"> {/* Ensure full height */}
        <div className="h-48 bg-gray-300 rounded mb-3"></div> {/* Image Placeholder */}
        <div className="h-5 bg-gray-300 rounded w-3/4 mb-2"></div> {/* Title Placeholder */}
        <div className="h-4 bg-gray-300 rounded w-1/2 mb-3"></div> {/* Age Placeholder */}
        <div className="mt-auto pt-2"> {/* Match button spacing */}
            <div className="h-9 bg-gray-300 rounded-md "></div> {/* Button Placeholder */}
        </div>
    </div>
);

// --- Main ShowCategoryRow Component ---
const ShowCategoryRow = ({ title, shows = [], isLoading, error, viewAllLink = null }) => {
    // Determine the number of shows to display (max 4)
    const displayShows = Array.isArray(shows) ? shows.slice(0, 4) : [];
    // Check if there are more shows than displayed to decide whether to show "View All"
    const hasMoreShows = Array.isArray(shows) && shows.length > 4;
    // Decide if the section has any content or potential content (for View All link)
    const hasContentOrIsLoading = isLoading || displayShows.length > 0;

    return (
        <section className="mb-10 md:mb-12"> {/* Added responsive margin */}
            {/* Section Header */}
            <div className="flex justify-between items-baseline mb-4 md:mb-5"> {/* Use baseline alignment */}
                <h2 className="text-xl md:text-2xl font-semibold text-gray-800">{title}</h2>
                {/* Show "View All" only if a link is provided AND the section has content/loading */}
                {viewAllLink && hasContentOrIsLoading && (
                    <Link
                        to={viewAllLink}
                        className="text-sm font-medium text-teal-600 hover:text-teal-800 hover:underline transition duration-200 whitespace-nowrap focus:outline-none focus:ring-1 focus:ring-teal-500 rounded px-1" // Added focus style
                    >
                        View All →
                    </Link>
                )}
            </div>

            {/* Content Area */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6"> {/* Responsive gaps, adjusted md breakpoint */}

                {/* Display Loading State using Skeletons */}
                {isLoading && (
                    [...Array(4)].map((_, index) => (
                         <SkeletonShowCard key={`skeleton-${index}`} />
                    ))
                )}

                {/* Display Error State */}
                {error && !isLoading && (
                     // Make error span across the grid conceptually
                     <div className="sm:col-span-2 lg:col-span-4">
                        <p className="text-center text-red-600 bg-red-100 p-4 rounded border border-red-300">
                            Could not load shows for "{title}": {typeof error === 'string' ? error : 'Please try again later.'}
                        </p>
                    </div>
                )}

                {/* Display Shows */}
                {!isLoading && !error && displayShows.length > 0 && (
                     displayShows.map((show) => (
                         // Ensure show object and id are valid before rendering ShowCard
                         show && show.id ? <ShowCard key={show.id} show={show} /> : null
                     ))
                 )}

                {/* Display No Shows Message (only if not loading, no error, and array is empty) */}
                {!isLoading && !error && displayShows.length === 0 && (
                     // Make message span across the grid conceptually
                     <div className="sm:col-span-2 lg:col-span-4">
                        <p className="text-center text-gray-500 italic py-4">No shows available in this category yet.</p>
                     </div>
                )}
            </div>
        </section>
    );
};

export default ShowCategoryRow;
</file>

<file path="client/src/components/Layout/footer.jsx">
// client/src/components/Layout/Footer.jsx
import React from 'react';
import { Link } from 'react-router-dom'; // Import Link if needed for footer links

const Footer = () => {
  const currentYear = new Date().getFullYear();
  return (
    <footer className="bg-gray-800 text-gray-400 text-center p-5 mt-12 border-t border-gray-700"> {/* Adjusted colors and padding */}
      <p className="text-sm">&copy; {currentYear} Sensory Screen Time Guide. All rights reserved.</p>
      {/* Example of potential future links using React Router's Link */}
       <nav className="text-xs mt-2 space-x-3">
         {/* Example Links - replace with real routes if needed, or remove */}
         {/* <Link to="/about" className="hover:text-gray-200 hover:underline">About Us</Link> |
         <Link to="/privacy" className="hover:text-gray-200 hover:underline">Privacy Policy</Link> |
         <Link to="/contact" className="hover:text-gray-200 hover:underline">Contact</Link> */}
       </nav>
    </footer>
  );
};

export default Footer;
</file>

<file path="client/src/components/Layout/header.jsx">
// client/src/components/Layout/Header.jsx
import React from 'react';
import { Link, NavLink } from 'react-router-dom'; // Use NavLink for active styling

const Header = () => {
  // Function to determine NavLink class based on active state
  const getNavLinkClass = ({ isActive }) => {
    return isActive
      ? 'text-white bg-teal-700 px-3 py-1 rounded-md text-sm font-medium transition duration-200 shadow-inner' // Active style with subtle shadow
      : 'text-teal-100 hover:text-white hover:bg-teal-500/80 px-3 py-1 rounded-md text-sm font-medium transition duration-200'; // Default style with slight hover opacity
  };

  return (
    <header className="bg-teal-600 text-white shadow-lg sticky top-0 z-50"> {/* Increased shadow */}
      <nav className="container mx-auto px-4 py-3 flex justify-between items-center">
        {/* Logo/Brand Link */}
        <Link to="/" className="text-xl md:text-2xl font-bold hover:text-teal-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-white rounded px-1">
          Sensory Screen Time Guide
        </Link>
        {/* Navigation Links */}
        <div className="space-x-1 md:space-x-3"> {/* Adjusted spacing slightly */}
          {/* Use NavLink for automatic active styling */}
          <NavLink to="/" className={getNavLinkClass} end> {/* Added 'end' prop for exact match on home */}
            Home
          </NavLink>
          <NavLink to="/shows" className={getNavLinkClass}>
            Browse Shows
          </NavLink>
          <NavLink to="/compare" className={getNavLinkClass}>
            Compare
          </NavLink>
           {/* Add other links as needed */}
        </div>
      </nav>
    </header>
  );
};

export default Header;
</file>

<file path="client/src/components/shared/ScoreVisual.jsx">
// client/src/components/shared/ScoreVisual.jsx
import React from 'react';

const ScoreVisual = ({ score, maxScore = 5, label = "Stimulation Score" }) => {
    // Handle potential null/undefined score, default to 0
    const normalizedScore = score ?? 0;

    // Ensure score doesn't visually exceed maxScore or go below 0
    const displayScore = Math.min(Math.max(normalizedScore, 0), maxScore);

    // Determine color based on score (example thresholds)
    let barColorClass = 'bg-gray-300'; // Default for unfilled bars
    let textColorClass = 'text-gray-700';
    if (normalizedScore <= 2) {
        barColorClass = 'bg-green-500'; // Low stimulation
        textColorClass = 'text-green-700';
    } else if (normalizedScore <= 3) { // Adjusted threshold slightly
        barColorClass = 'bg-yellow-500'; // Moderate stimulation
        textColorClass = 'text-yellow-700';
    } else {
        barColorClass = 'bg-red-500'; // High stimulation
        textColorClass = 'text-red-700';
    }

    const tooltipText = `${label}: ${normalizedScore} out of ${maxScore}`;

    return (
        // Add tooltip title to the container
        <div className="flex items-center space-x-1" title={tooltipText}>
            {/* Render the bars */}
            {[...Array(maxScore)].map((_, i) => (
                <div
                    key={i}
                    // Apply color if index is less than the score to display
                    className={`h-2.5 w-4 rounded-sm transition-colors duration-300 ${i < displayScore ? barColorClass : 'bg-gray-300'}`} // Slightly larger bars, added transition
                ></div>
            ))}
            {/* Display the numeric score, colored based on level */}
            <span className={`text-xs font-semibold ml-1.5 ${textColorClass}`}>{normalizedScore}/{maxScore}</span>
        </div>
    );
};

export default ScoreVisual;
</file>

<file path="client/src/hooks/useAutocomplete.js">
// client/src/hooks/useAutocomplete.js
import { useState, useEffect, useCallback, useRef } from 'react';
import useDebounce from './useDebounce'; // Assuming useDebounce hook exists

/**
 * Custom Hook for Autocomplete functionality.
 *
 * @param {function} fetchSuggestionsFn - An async function that takes a search term and returns an array of suggestions.
 * @param {number} debounceDelay - Delay in ms for debouncing input.
 * @returns {object} - Contains state and handlers for autocomplete.
 */
function useAutocomplete(fetchSuggestionsFn, debounceDelay = 300) {
    const [searchTerm, setSearchTerm] = useState('');
    const [suggestions, setSuggestions] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [showSuggestions, setShowSuggestions] = useState(false);
    const containerRef = useRef(null); // Ref for the container to handle clicks outside

    const debouncedSearchTerm = useDebounce(searchTerm, debounceDelay);

    // Effect to fetch suggestions when debounced term changes
    useEffect(() => {
        let isMounted = true;
        const fetch = async () => {
            if (debouncedSearchTerm && debouncedSearchTerm.length > 1) {
                setIsLoading(true);
                try {
                    const results = await fetchSuggestionsFn(debouncedSearchTerm);
                    if (isMounted) {
                        setSuggestions(results || []);
                        setShowSuggestions(true); // Show suggestions when results are fetched
                    }
                } catch (error) {
                    console.error("Autocomplete fetch error:", error);
                    if (isMounted) {
                        setSuggestions([]);
                        setShowSuggestions(false); // Hide on error
                    }
                } finally {
                    if (isMounted) {
                        setIsLoading(false);
                    }
                }
            } else {
                // Clear suggestions if term is too short or empty
                if (isMounted) {
                    setSuggestions([]);
                    setShowSuggestions(false);
                }
            }
        };

        fetch();

        return () => { isMounted = false; }; // Cleanup on unmount or dependency change
    }, [debouncedSearchTerm, fetchSuggestionsFn]); // Re-run if term or fetch function changes

    // Effect to handle clicks outside the autocomplete container
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (containerRef.current && !containerRef.current.contains(event.target)) {
                setShowSuggestions(false); // Hide suggestions on outside click
            }
        };
        // Add event listener only when suggestions are shown
        if (showSuggestions) {
             document.addEventListener('mousedown', handleClickOutside);
        } else {
             document.removeEventListener('mousedown', handleClickOutside); // Clean up listener
        }
        // Cleanup listener on unmount
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [showSuggestions]); // Re-run when showSuggestions changes

    // Handler for input changes
    const handleInputChange = useCallback((event) => {
        setSearchTerm(event.target.value);
        // Optionally show suggestions immediately while typing, or wait for debounce effect
        // setShowSuggestions(true); // Uncomment to show list while typing (might be visually noisy)
    }, []);

    // Handler when a suggestion is clicked (or selected)
    const handleSuggestionSelect = useCallback((suggestion) => {
        setSearchTerm(suggestion); // Update input field
        setSuggestions([]); // Clear suggestions
        setShowSuggestions(false); // Hide suggestions list
        // Note: Navigation or further action should be handled by the component using the hook
    }, []);

    // Function to manually hide suggestions (e.g., on form submit)
    const hideSuggestions = useCallback(() => {
        setShowSuggestions(false);
    }, []);

     // Function to reset the autocomplete state
     const resetAutocomplete = useCallback(() => {
        setSearchTerm('');
        setSuggestions([]);
        setShowSuggestions(false);
        setIsLoading(false);
    }, []);

    return {
        // State
        inputValue: searchTerm,
        suggestions,
        isLoading,
        showSuggestions,
        // Handlers & Ref
        handleInputChange,
        handleSuggestionSelect,
        hideSuggestions,
        resetAutocomplete,
        containerRef, // Pass the ref down so the component can assign it
    };
}

export default useAutocomplete;
</file>

<file path="client/src/hooks/useDebounce.js">
// client/src/hooks/useDebounce.js
import { useState, useEffect } from 'react';

/**
 * Custom hook that debounces a value.
 * @param {any} value The value to debounce.
 * @param {number} delay The debounce delay in milliseconds.
 * @returns {any} The debounced value.
 */
function useDebounce(value, delay) {
  // State and setters for debounced value
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(
    () => {
      // Set debouncedValue to value (passed in) after the specified delay
      const handler = setTimeout(() => {
        setDebouncedValue(value);
      }, delay);

      // Return a cleanup function that will be called every time useEffect runs again.
      // This cancels the previous timeout if value changes quickly.
      return () => {
        clearTimeout(handler);
      };
    },
    // Only re-call effect if value or delay changes
    [value, delay]
  );

  return debouncedValue;
}

export default useDebounce;
</file>

<file path="client/src/index.css">
@import "tailwindcss";
</file>

<file path="client/tailwind.config.js">
// client/tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}", // Scan all JS/JSX files in src
  ],
  theme: {
    extend: {
      // Add aspect ratio utilities for consistent image containers
      aspectRatio: {
           '3/4': '3 / 4', // Portrait aspect ratio
           '4/3': '4 / 3',
           '16/9': '16 / 9',
           '1/1': '1 / 1',
      },
      // Optional: Add custom theme extensions here if needed later
      // colors: { 'brand-teal': '#008080', },
      // fontFamily: { sans: ['Inter', 'sans-serif'], },
    },
  },
  plugins: [
    // require('@tailwindcss/forms'), // Uncomment if you need form styling plugin
  ],
}
</file>

<file path="client/vite.config.js">
// client/vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    // Port for the Vite development server (frontend)
    port: 5173, // Explicitly set frontend port (default is often 5173)
    // Proxy API requests to the backend server
    proxy: {
      // Requests starting with /api/... will be forwarded
      '/api': {
        target: 'http://localhost:3001', // Your backend server address (running on port 3001)
        changeOrigin: true, // Recommended for virtual hosted sites and avoids CORS issues in dev
        secure: false, // Set to true if your backend uses HTTPS
        // Optional: Add logging for proxied requests
        configure: (proxy, _options) => {
          proxy.on('proxyReq', (proxyReq, req, _res) => {
            console.log(`[Vite Proxy] Forwarding request: ${req.method} ${req.originalUrl} -> ${proxyReq.path}`);
          });
           proxy.on('error', (err, _req, _res) => {
              console.error('[Vite Proxy] Error:', err);
           });
        },
      }
    }
  }
})
</file>

<file path="scripts/updateImageFilenames.js">
// updateImageFilenames.js
const fs = require('fs');
const path = require('path');

// --- Configuration: Define paths RELATIVE to the project root ---
// Assumes this script is in the project root directory.
const jsonFilePath = path.join('database', 'reviewed_shows.json');
const imageDirPath = path.join('client', 'public', 'images', 'Stim list - show images');
// --- End Configuration ---

// Helper to slugify title into a base filename (without extension)
const slugify = title => {
    if (!title || typeof title !== 'string') return '';
    return title.toLowerCase()
        .replace(/[:()']/g, '') // Remove specific problematic characters
        .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric with hyphens
        .replace(/^-+|-+$/g, ''); // Trim leading/trailing hyphens
};

// --- Main Logic ---
try {
    // Ensure paths exist
    if (!fs.existsSync(jsonFilePath)) {
        throw new Error(`JSON file not found at expected path: ${jsonFilePath}`);
    }
    if (!fs.existsSync(imageDirPath)) {
        throw new Error(`Image directory not found at expected path: ${imageDirPath}`);
    }

    // Load and parse the JSON
    console.log(`Reading JSON from: ${jsonFilePath}`);
    const showsJson = fs.readFileSync(jsonFilePath, 'utf8');
    const shows = JSON.parse(showsJson);
    if (!Array.isArray(shows)) {
        throw new Error('JSON data is not an array.');
    }

    // Get all image filenames in the directory
    console.log(`Scanning images in: ${imageDirPath}`);
    const imageFiles = fs.readdirSync(imageDirPath);
    const imageFileMap = new Map(imageFiles.map(file => [file.toLowerCase(), file])); // Map lowercase names to original names

    console.log(`Found ${imageFiles.length} image files.`);

    const matched = [];
    const unmatched = [];
    let updatedCount = 0;

    // Add matching image filename to each show
    shows.forEach((show, index) => {
        if (!show || !show.title) {
            console.warn(`Skipping show at index ${index} due to missing title.`);
            return;
        }
        // Process only if image_filename is currently missing or null
        if (!show.image_filename) {
            const slug = slugify(show.title);
            if (!slug) {
                console.warn(`Could not generate slug for title: "${show.title}"`);
                unmatched.push(show.title + " (Failed to generate slug)");
                return;
            }

            // Attempt to find a matching image file (case-insensitive start, common extensions)
            let foundMatch = null;
            for (const ext of ['.jpg', '.jpeg', '.png', '.webp']) { // Add more extensions if needed
                const potentialFilename = (slug + ext).toLowerCase();
                if (imageFileMap.has(potentialFilename)) {
                    foundMatch = imageFileMap.get(potentialFilename); // Get original filename casing
                    break;
                }
            }

            if (foundMatch) {
                show.image_filename = foundMatch;
                matched.push(`${show.title} → ${foundMatch}`);
                updatedCount++;
            } else {
                unmatched.push(show.title);
            }
        }
    });

    // Save updated JSON only if changes were made
    if (updatedCount > 0) {
        console.log(`\nSaving updated JSON back to: ${jsonFilePath}`);
        fs.writeFileSync(jsonFilePath, JSON.stringify(shows, null, 2), 'utf8');
        console.log(`✅ ${updatedCount} image filenames added!`);
    } else {
        console.log("\nNo missing image filenames needed updating.");
    }

    // Reporting
    if (matched.length > 0) {
        console.log('\n🟢 Matched Shows:');
        matched.forEach(entry => console.log('  - ' + entry));
    }
    if (unmatched.length > 0) {
        console.log('\n🔴 Unmatched Shows (Could not find corresponding image):');
        unmatched.forEach(title => console.log('  - ' + title));
    }

} catch (error) {
    console.error("\n❌ An error occurred during the script execution:");
    console.error(error.message);
    // Optionally log the full stack trace for more detail
    // console.error(error);
}
</file>

<file path="server/api/homepage.js">
// server/api/homepage.js
const express = require('express');
const { runQuery, getSingleRow, getThemesForShows, attachThemesToShowList } = require('../db/queries');
const router = express.Router();

// GET /api/homepage-data - Fetch data for homepage sections
router.get('/homepage-data', async (req, res) => {
  console.log('>>> API route /homepage-data called');
  try {
    // Define Promises for each section (using specific columns needed by UI)
    const featuredShowPromise = getSingleRow(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level, animation_style
      FROM shows ORDER BY RANDOM() LIMIT 1
    `);
    const popularShowsPromise = runQuery(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level
      FROM shows ORDER BY title LIMIT 4
    `); // Example: Sort by title for "Popular" for now
    const ratedShowsPromise = runQuery(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level
      FROM shows WHERE stimulation_score = 5 ORDER BY title LIMIT 4
    `);
    const lowStimShowsPromise = runQuery(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level
      FROM shows WHERE stimulation_score <= 2 ORDER BY stimulation_score ASC, title LIMIT 4
    `);
    const highInteractionShowsPromise = runQuery(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level
      FROM shows WHERE interactivity_level = 'High' COLLATE NOCASE ORDER BY title LIMIT 4
    `);

    // Execute all promises concurrently
    const [
      featuredShowResult, popularShowsResult, ratedShowsResult, lowStimShowsResult, highInteractionShowsResult
    ] = await Promise.all([
      featuredShowPromise, popularShowsPromise, ratedShowsPromise, lowStimShowsPromise, highInteractionShowsPromise
    ]);

    // Collect all unique show IDs from the results to fetch themes efficiently
    const allShowIds = new Set();
    if (featuredShowResult) allShowIds.add(featuredShowResult.id);
    [...popularShowsResult, ...ratedShowsResult, ...lowStimShowsResult, ...highInteractionShowsResult].forEach(s => s && allShowIds.add(s.id));

    const themesMap = await getThemesForShows(Array.from(allShowIds));

    // Attach themes to each show/list
    const featuredShow = featuredShowResult ? attachThemesToShowList([featuredShowResult], themesMap)[0] : null;
    const popularShows = attachThemesToShowList(popularShowsResult, themesMap);
    const ratedShows = attachThemesToShowList(ratedShowsResult, themesMap);
    const lowStimShows = attachThemesToShowList(lowStimShowsResult, themesMap);
    const highInteractionShows = attachThemesToShowList(highInteractionShowsResult, themesMap);

    const homepageData = { featuredShow, popularShows, ratedShows, lowStimShows, highInteractionShows };

    console.log('>>> Sending homepage data from API');
    res.json(homepageData);
  } catch (error) {
    // Log the specific error on the server
    console.error('Error fetching homepage data:', error); // Log full error
    // Send a generic error response to the client
    res.status(500).json({ error: 'Failed to fetch homepage data. Please try again later.' });
  }
});

// GET /api/show-list - Get only IDs and Titles for dropdowns (e.g., Compare page)
router.get('/show-list', async (req, res) => {
  console.log('>>> API route /show-list called');
  const sql = `SELECT id, title FROM shows ORDER BY title COLLATE NOCASE`;
  try {
    const showList = await runQuery(sql);
    res.json(showList);
  } catch (error) {
    console.error('Error fetching show list:', error); // Log full error
    res.status(500).json({ error: 'Failed to retrieve show list for dropdowns.' });
  }
});

module.exports = router;
</file>

<file path="server/api/index.js">
// server/api/index.js
const express = require('express');
const showsRouter = require('./shows');
const themesRouter = require('./themes');
const suggestionsRouter = require('./suggestions');
const homepageRouter = require('./homepage'); // Contains /homepage-data and /show-list now

console.log("--- Debugging API Index ---");
console.log("Type of showsRouter:", typeof showsRouter);
console.log("Type of themesRouter:", typeof themesRouter);
console.log("Type of suggestionsRouter:", typeof suggestionsRouter);
console.log("Type of homepageRouter:", typeof homepageRouter); // Check the type
console.log("Is homepageRouter a function?", homepageRouter instanceof Function); // Explicit check
console.log("--- End Debugging ---");

const router = express.Router();

// Mount the individual routers
router.use('/shows', showsRouter);         // Handles /api/shows/*
router.use('/themes', themesRouter);       // Handles /api/themes
router.use('/suggestions', suggestionsRouter); // Handles /api/suggestions
// Mount homepageRouter directly as it handles multiple specific endpoints
router.use('/', homepageRouter);           // Handles /api/homepage-data and /api/show-list

// Simple check for the base /api route
router.get('/', (req, res) => {
    res.json({ message: 'Sensory Screen Time Guide API is running!' });
});


module.exports = router; // Export the combined API router
</file>

<file path="server/api/suggestions.js">
// server/api/suggestions.js
const express = require('express');
const { runQuery } = require('../db/queries');
const router = express.Router();

// GET /api/suggestions?term=... - Autocomplete suggestions
router.get('/', async (req, res) => {
    const term = req.query.term;

    if (!term || typeof term !== 'string' || term.trim().length < 1) { // Allow 1 char for suggestions
        return res.json([]); // Return empty if term is too short or invalid
    }

    const searchTerm = term.trim() + '%'; // Add wildcard for prefix search
    // Limit suggestions for performance
    const sql = `SELECT DISTINCT title FROM shows WHERE title LIKE ? COLLATE NOCASE ORDER BY title LIMIT 10`;

    try {
        const rows = await runQuery(sql, [searchTerm]);
        const suggestions = rows.map(row => row.title);
        res.json(suggestions);
    } catch (error) {
        console.error(`Error fetching suggestions for term "${term}":`, error.message);
        // Return empty array on error for graceful frontend handling
        res.json([]);
    }
});

module.exports = router;
</file>

<file path="server/api/themes.js">
// server/api/themes.js
const express = require('express');
const { runQuery } = require('../db/queries'); // Import the database query function
const router = express.Router(); // Create an Express router instance

// Define the handler for GET requests to the root of this router (which will be /api/themes)
router.get('/', async (req, res) => {
    // SQL query to get all theme names, ordered alphabetically (case-insensitive)
    const sql = `SELECT name FROM themes ORDER BY name COLLATE NOCASE`;
    try {
        // Execute the query using our helper function
        const rows = await runQuery(sql);
        // The query returns objects like [{ name: 'Adventure' }, { name: 'Animals' }, ...],
        // so we extract just the 'name' property from each object into a simple array.
        const themeNames = rows.map(row => row.name);
        // Send the array of theme names back as the JSON response
        res.json(themeNames);
    } catch (error) {
        // Log any error that occurs during the database query
        console.error("Error fetching themes:", error.message);
        // Send a generic server error response back to the client
        res.status(500).json({ error: "Failed to retrieve themes." });
    }
});

// Export the router instance so it can be imported and used in server/api/index.js
module.exports = router;
</file>

<file path="server/db/connection.js">
// server/db/connection.js
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Construct path relative to this file's location to reach the root/database folder
const dbPath = path.resolve(__dirname, '..', '..', 'database', 'shows.db'); // Go up two levels then into database/
let db = null; // Initialize db as null

function connectDatabase(callback) {
    // Check if already connected
    if (db && db.open) {
        console.log("Database connection already established.");
        if (callback) callback(null, db); // Indicate success
        return;
    }

    console.log(`Attempting to connect to database at: ${dbPath}`);
    db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE, (err) => { // Use READWRITE for server operations if needed, or READONLY
        if (err) {
            console.error("Error connecting to the database:", err.message);
            db = null; // Ensure db is null on error
            if (callback) callback(err); // Pass error to callback
        } else {
            console.log("Successfully connected to the SQLite database.");
            db.on('error', (dbErr) => { // Add listener for future errors
                console.error('Database runtime error:', dbErr.message);
            });
            if (callback) callback(null, db); // Indicate success
        }
    });
}

function getDbConnection() {
    if (!db || !db.open) {
         // This situation should ideally be handled at startup,
         // but throw an error if accessed while disconnected.
         console.error("FATAL: Database is not connected.");
         throw new Error("Database connection is not available.");
    }
    return db;
}

function closeDatabase(callback) {
    if (db && db.open) {
        db.close((err) => {
            if (err) {
                console.error('Error closing database:', err.message);
                if (callback) callback(err);
            } else {
                console.log('Database connection closed.');
                db = null; // Reset db variable
                if (callback) callback(null);
            }
        });
    } else {
         if (callback) callback(null); // Already closed or never opened
    }
}

// Export the functions and potentially the db instance (use getDbConnection ideally)
module.exports = {
    connectDatabase,
    getDbConnection,
    closeDatabase
};
</file>

<file path="server/server.js">
// server/server.js
const express = require('express');
const path = require('path');
const cors = require('cors');
const { connectDatabase, closeDatabase } = require('./db/connection'); // Import DB connection functions
const apiRouter = require('./api'); // Import the main API router

const app = express();
const port = process.env.PORT || 3001;

// --- Connect to Database ---
connectDatabase((err) => {
    if (err) {
        console.error("Failed to connect to database on startup. Server shutting down.");
        process.exit(1); // Exit if DB connection fails initially
    }

    // --- Start Server Only After DB Connection ---
    // Middleware Setup
    app.use(cors()); // Enable CORS for all origins (adjust if needed for production)
    app.use(express.json()); // Middleware to parse JSON bodies

    // Request Logging Middleware
    app.use((req, res, next) => {
        console.log(`Server Request: ${req.method} ${req.originalUrl}`);
        next();
    });

    // --- API Routes ---
    app.use('/api', apiRouter); // Mount all API routes under /api

    // --- Static Files (If serving frontend build from backend) ---
    // Uncomment if you build the React app and want Node to serve it
    // app.use(express.static(path.join(__dirname, '..', 'client', 'dist')));
    // app.get('*', (req, res) => {
    //     if (!req.originalUrl.startsWith('/api')) {
    //         res.sendFile(path.join(__dirname, '..', 'client', 'dist', 'index.html'));
    //     } else {
    //         next(); // Important for API 404s below
    //     }
    // });

    // --- API 404 Handling (Not Found) ---
    // This middleware runs only if no API route above matched
    app.use('/api', (req, res, next) => {
        console.log(`API route not found: ${req.method} ${req.originalUrl}`);
        res.status(404).json({ error: `API endpoint not found: ${req.method} ${req.originalUrl.split('?')[0]}` });
    });

    // --- General Error Handling Middleware ---
    // Catches errors from routes or other middleware
    app.use((err, req, res, next) => {
        console.error("Unhandled application error:", err.stack);
        // Avoid sending detailed errors in production
        const statusCode = err.status || 500;
        const message = process.env.NODE_ENV === 'production' ? 'An internal server error occurred.' : err.message;
        res.status(statusCode).json({ error: message || 'Something went wrong on the server!' });
    });

    // --- Start Listening ---
    const server = app.listen(port, () => {
        console.log(`Backend server listening at http://localhost:${port}`);
    });

    // --- Graceful Shutdown ---
    const gracefulShutdown = (signal) => {
        console.log(`\n${signal} received. Closing server...`);
        server.close(() => {
            console.log('HTTP server closed.');
            closeDatabase((closeErr) => {
                if (closeErr) {
                    console.error("Error closing database during shutdown:", closeErr);
                    process.exit(1);
                } else {
                    console.log("Database connection closed. Exiting.");
                    process.exit(0);
                }
            });
        });
    };

    process.on('SIGINT', () => gracefulShutdown('SIGINT')); // CTRL+C
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // kill command

}); // End of connectDatabase callback
</file>

<file path="client/package.json">
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "chart.js": "^4.4.8",            
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",      
    "react-dom": "^19.0.0",
    "react-icons": "^5.2.1",         
    "react-router-dom": "^6.26.1"     
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@tailwindcss/cli": "^4.1.0",
    "@tailwindcss/postcss": "^4.1.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "gh-pages": "^6.3.0",
    "globals": "^15.15.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.0",
    "vite": "^6.2.0"
  }
}
</file>

<file path="client/src/App.jsx">
// client/src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';

// Import Page Components
import HomePage from './pages/HomePage';
import CatalogPage from './pages/CatalogPage';
import ShowDetailPage from './pages/ShowDetailPage';
import ComparePage from './pages/ComparePage';

// Import Layout Components
import Header from './components/Layout/header';
import Footer from './components/Layout/footer';

function App() {
  return (
    <Router>
      {/* Main container with flex column layout and minimum screen height */}
      <div className="flex flex-col min-h-screen font-sans bg-gray-50 text-gray-800 antialiased">
        <Header />
        {/* Main content area that grows, with consistent padding */}
        <main className="flex-grow container mx-auto px-4 py-6 md:py-8">
          <Routes>
            {/* Core Routes */}
            <Route path="/" element={<HomePage />} />
            <Route path="/shows" element={<CatalogPage />} />
            {/* Use :id parameter for dynamic show detail routes */}
            <Route path="/show/:id" element={<ShowDetailPage />} />
            <Route path="/compare" element={<ComparePage />} />

            {/* Catch-all 404 Route - improved styling */}
            <Route
              path="*"
              element={
                <div className="text-center py-16 px-4">
                  <h2 className="text-4xl font-bold text-red-600 mb-3">404</h2>
                  <h3 className="text-2xl font-semibold text-gray-700 mb-4">Page Not Found</h3>
                  <p className="text-gray-500 mb-6">Sorry, the page you are looking for does not exist or may have been moved.</p>
                  <Link to="/" className="inline-block px-6 py-2 bg-teal-600 text-white font-medium rounded-md hover:bg-teal-700 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500">
                    Go Back Home
                  </Link>
                </div>
              }
            />
          </Routes>
        </main>
        <Footer />
      </div>
    </Router>
  );
}

export default App;
</file>

<file path="client/src/components/home/FeaturedShow.jsx">
// client/src/components/home/FeaturedShow.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ScoreVisual from '../shared/ScoreVisual'; // Import ScoreVisual

// Placeholder image path (relative to the public directory)
const placeholderImage = "/images/placeholder-show.png";

const FeaturedShow = ({ show }) => {
    // Loading State: If show data is not yet available (render skeleton)
    if (!show) {
        return (
            <div className="py-12 px-4 bg-gradient-to-r from-blue-50 to-teal-50 rounded-lg shadow-md border border-gray-200 animate-pulse">
                <h2 className="text-2xl font-semibold text-center text-gray-400 mb-6">Featured Show</h2>
                <div className="flex flex-col md:flex-row items-center gap-6 md:gap-8 max-w-4xl mx-auto">
                    {/* Image Placeholder */}
                    <div className="md:w-1/3 flex-shrink-0 w-full max-w-xs md:max-w-none mx-auto">
                        <div className="rounded-lg shadow-lg w-full aspect-[3/4] bg-gray-300"></div> {/* Aspect Ratio Placeholder */}
                    </div>
                    {/* Details Placeholder */}
                    <div className="md:w-2/3 text-center md:text-left w-full space-y-4"> {/* Increased spacing */}
                        <div className="h-8 bg-gray-300 rounded w-3/4 mx-auto md:mx-0"></div> {/* Title */}
                        <div className="h-5 bg-gray-300 rounded w-1/2 mx-auto md:mx-0"></div> {/* Pills */}
                        <div className="h-4 bg-gray-300 rounded w-full"></div> {/* Desc line 1 */}
                        <div className="h-4 bg-gray-300 rounded w-5/6"></div> {/* Desc line 2 */}
                         <div className="h-5 bg-gray-300 rounded w-1/3 mx-auto md:mx-0"></div> {/* Themes heading */}
                         <div className="h-6 bg-gray-300 rounded w-2/3 mx-auto md:mx-0"></div> {/* Themes pills */}
                        <div className="h-11 bg-gray-300 rounded-lg w-52 mx-auto md:mx-0"></div> {/* Button */}
                    </div>
                </div>
            </div>
        );
    }

    // Data Loaded State: If show data is available
    const { id, title, stimulation_score, target_age_group, image_filename, themes = [], animation_style } = show;

    // Attempt to create a WebP URL first
    const webpImageUrl = image_filename ? `/images/${image_filename.replace(/\.(jpg|jpeg|png)$/i, '.webp')}` : placeholderImage;
    const originalImageUrl = image_filename ? `/images/${image_filename}` : placeholderImage;

    // Create a short description or use animation style as fallback
    const descriptionSnippet = animation_style
        ? `Style: ${animation_style.substring(0, 150)}${animation_style.length > 150 ? '...' : ''}`
        : 'Discover more about the sensory details and themes of this show!';

    return (
        <section className="py-10 px-4 md:py-12 bg-gradient-to-r from-blue-50 to-teal-50 rounded-lg shadow-md border border-gray-200 overflow-hidden"> {/* Added overflow hidden */}
            <h2 className="text-2xl md:text-3xl font-semibold text-center text-gray-700 mb-6 md:mb-8">Featured Show</h2>
            <div className="flex flex-col md:flex-row items-center gap-6 md:gap-10 max-w-4xl mx-auto">

                {/* Image Section */}
                <div className="md:w-1/3 flex-shrink-0 w-full max-w-xs md:max-w-none mx-auto">
                    <img
                        src={webpImageUrl} // Start with WebP attempt
                        alt={`${title} poster`}
                        className="rounded-lg shadow-lg w-full h-auto object-contain max-h-80 border border-gray-200 bg-white aspect-[3/4]" // Added aspect ratio
                        loading="lazy"
                        onError={(e) => {
                            if (e.target.src !== originalImageUrl && originalImageUrl !== placeholderImage) {
                                console.log(`FeaturedShow: WebP failed for ${title}, trying original: ${originalImageUrl}`);
                                e.target.src = originalImageUrl;
                            } else if (e.target.src !== placeholderImage) {
                                console.log(`FeaturedShow: Original/WebP image failed or missing for ${title}, using placeholder.`);
                                e.target.onerror = null;
                                e.target.src = placeholderImage;
                            }
                        }}
                    />
                </div>

                {/* Details Section */}
                <div className="md:w-2/3 text-center md:text-left">
                    <h3 className="text-3xl md:text-4xl font-bold text-teal-800 mb-2">{title}</h3>
                    {/* Key Info Pills */}
                    <div className="flex flex-wrap gap-2 justify-center md:justify-start mb-4">
                        <span className="bg-blue-100 text-blue-800 text-xs font-semibold px-3 py-1 rounded-full">
                            Age: {target_age_group || 'N/A'}
                        </span>
                         <span className="bg-green-100 text-green-800 text-xs font-semibold px-3 py-1 rounded-full flex items-center">
                             <span className="mr-1.5">Score:</span> <ScoreVisual score={stimulation_score} />
                         </span>
                    </div>

                    {/* Description */}
                    <p className="text-base text-gray-700 mb-4 italic">
                        {descriptionSnippet}
                    </p>

                    {/* Themes */}
                     <div className="mb-5">
                         <strong className="text-sm text-gray-600 block mb-1.5">Key Themes:</strong> {/* Adjusted margin */}
                         <div className="flex flex-wrap gap-2 justify-center md:justify-start">
                             {themes.length > 0 ? themes.slice(0, 4).map((theme, index) => (
                                 <span key={index} className="text-xs bg-gray-200 text-gray-800 px-3 py-1 rounded-full">
                                     {theme}
                                 </span>
                             )) : <span className="text-xs text-gray-500 italic">None listed</span>}
                             {themes.length > 4 && (
                                  <span className="text-xs text-gray-500 px-2 py-1" title={`${themes.length - 4} more themes`}>...</span>
                             )}
                         </div>
                     </div>

                    {/* Call to Action Button */}
                    <Link
                        to={`/show/${id}`}
                        className="inline-block px-8 py-3 bg-orange-500 text-white font-semibold rounded-lg shadow-md hover:bg-orange-600 transition duration-200 transform hover:scale-105 text-base focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500"
                    >
                        View Sensory Details
                    </Link>
                </div>
            </div>
        </section>
    );
};

export default FeaturedShow;
</file>

<file path="client/src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css' // Ensure your Tailwind CSS import is here


ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
</file>

<file path="database/import_data.js">
// database/import_data.js
console.log("✅ import_data.js script starting...");

const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

const dbPath = path.resolve(__dirname, 'shows.db');
const jsonPath = path.resolve(__dirname, 'reviewed_shows.json');
const schemaPath = path.resolve(__dirname, 'schema.sql');

// --- Helper Functions ---

function parseAgeGroup(ageString) {
    if (ageString === null || ageString === undefined) return { min_age: null, max_age: null };
    if (typeof ageString !== 'string') {
        console.warn(`Input ageString is not a string (type: ${typeof ageString}, value: ${ageString}). Setting min/max age to null.`);
        return { min_age: null, max_age: null };
    }
    const trimmedAgeString = ageString.trim();
    if (trimmedAgeString === '') return { min_age: null, max_age: null };
    const lowerCaseAgeString = trimmedAgeString.toLowerCase();

    const specificCases = {
        'any': { min_age: 0, max_age: 99 }, 'all ages': { min_age: 0, max_age: 99 }, 'any age': { min_age: 0, max_age: 99 },
        '0-3': { min_age: 0, max_age: 3 }, '0-5': { min_age: 0, max_age: 5 },
        '1-4': { min_age: 1, max_age: 4 }, '1-5': { min_age: 1, max_age: 5 },
        '2-4': { min_age: 2, max_age: 4 }, '2-5': { min_age: 2, max_age: 5 }, '2-6': { min_age: 2, max_age: 6 }, '2-8': { min_age: 2, max_age: 8 },
        '3-6': { min_age: 3, max_age: 6 }, '3-7': { min_age: 3, max_age: 7 }, '3-8': { min_age: 3, max_age: 8 },
        '4-7': { min_age: 4, max_age: 7 }, '4-8': { min_age: 4, max_age: 8 }, '4-10': { min_age: 4, max_age: 10 },
        '5-8': { min_age: 5, max_age: 8 }, '5-9': { min_age: 5, max_age: 9 }, '5-10': { min_age: 5, max_age: 10 }, '5-12': { min_age: 5, max_age: 12 },
        '6-10': { min_age: 6, max_age: 10 }, '6-12': { min_age: 6, max_age: 12 },
        '7-11': { min_age: 7, max_age: 11 }, '7-12': { min_age: 7, max_age: 12 },
        '8-12': { min_age: 8, max_age: 12 }, '8-14': { min_age: 8, max_age: 14 },
        '9-12': { min_age: 9, max_age: 12 },
        '10-14': { min_age: 10, max_age: 14 }, '10-16': { min_age: 10, max_age: 16 },
        '2+, any': { min_age: 2, max_age: 99 },
        '6-12, 12+': { min_age: 6, max_age: 99 }, '7-12, 12+': { min_age: 7, max_age: 99 },
        '0+': { min_age: 0, max_age: 99 }, '1+': { min_age: 1, max_age: 99 }, '2+': { min_age: 2, max_age: 99 }, '3+': { min_age: 3, max_age: 99 },
        '4+': { min_age: 4, max_age: 99 }, '5+': { min_age: 5, max_age: 99 }, '6+': { min_age: 6, max_age: 99 }, '7+': { min_age: 7, max_age: 99 },
        '8+': { min_age: 8, max_age: 99 }, '10+': { min_age: 10, max_age: 99 }, '12+': { min_age: 12, max_age: 99 },
    };
    if (specificCases[lowerCaseAgeString]) return specificCases[lowerCaseAgeString];

    const plusMatch = lowerCaseAgeString.match(/^(\d+)\s*\+$/);
    if (plusMatch) return { min_age: parseInt(plusMatch[1], 10), max_age: 99 };
    const rangeMatch = lowerCaseAgeString.match(/^(\d+)\s*-\s*(\d+)$/);
    if (rangeMatch) { const min = parseInt(rangeMatch[1], 10); const max = parseInt(rangeMatch[2], 10); return { min_age: Math.min(min, max), max_age: Math.max(min, max) }; }
    const singleAgeMatch = lowerCaseAgeString.match(/^(\d+)$/);
    if (singleAgeMatch) { const age = parseInt(singleAgeMatch[1], 10); return { min_age: age, max_age: age }; }

    console.warn(`Could not parse age string: "${ageString}". Setting min/max age to null.`);
    return { min_age: null, max_age: null };
}

function mapLevelToNumber(level) {
    if (!level || typeof level !== 'string') return null;
    const l = level.toLowerCase().trim();
    switch (l) {
        case 'none': return 0;
        case 'very low': return 1;
        case 'low': return 2;
        case 'low-moderate': return 3;
        case 'moderate': return 3;
        case 'moderate-high': return 4;
        case 'high': return 5;
        case 'very high': return 5;
        case 'varies': return 3; // Map 'Varies' to moderate as a default
        default: return null; // Return null for unknown values
    }
}

// --- Database Operation Promises ---
function connectDb(dbPath) { /* ... (no change needed) ... */ return new Promise((resolve, reject) => { const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, (err) => { if (err) { console.error('Error opening database:', err.message); reject(err); } else { console.log('Connected to the SQLite database for import.'); resolve(db); } }); }); }
function executeSchema(db, schemaSql) { /* ... (no change needed) ... */ return new Promise((resolve, reject) => { db.exec(schemaSql, (err) => { if (err) { console.error('Error executing schema:', err.message); reject(err); } else { console.log('Database schema applied successfully.'); resolve(); } }); }); }
function runDb(db, sql, params = []) { /* ... (no change needed, already handles skips) ... */ return new Promise((resolve, reject) => { db.run(sql, params, function(err) { if (err) { if (sql.startsWith('INSERT OR IGNORE INTO themes') && err.message.includes('UNIQUE constraint failed')) { resolve({ lastID: this.lastID, changes: this.changes, skipped: true }); } else if (sql.startsWith('INSERT OR IGNORE INTO show_themes') && err.message.includes('UNIQUE constraint failed')) { resolve({ lastID: this.lastID, changes: this.changes, skipped: true }); } else if (sql.startsWith('INSERT INTO shows') && err.message.includes('UNIQUE constraint failed: shows.title')) { console.warn(`Skipping duplicate show title (unique constraint): "${params[0]}"`); resolve({ lastID: 0, changes: 0, skipped: true }); } else { console.error(`Error running SQL: ${sql}`, params, err.message); reject(err); } } else { resolve({ lastID: this.lastID, changes: this.changes, skipped: false }); } }); }); }
function getDb(db, sql, params = []) { /* ... (no change needed) ... */ return new Promise((resolve, reject) => { db.get(sql, params, (err, row) => { if (err) { console.error(`Error getting row SQL: ${sql}`, params, err.message); reject(err); } else { resolve(row); } }); }); }
function closeDb(db) { /* ... (no change needed) ... */ return new Promise((resolve, reject) => { db.close((err) => { if (err) { console.error('Error closing database:', err.message); reject(err); } else { console.log('Database connection closed.'); resolve(); } }); }); }

// --- Main Import Logic ---
async function importData() {
    let db;
    try {
        if (fs.existsSync(dbPath)) { fs.unlinkSync(dbPath); console.log('Existing database deleted.'); }
        db = await connectDb(dbPath);
        const schemaSql = fs.readFileSync(schemaPath, 'utf8');
        await executeSchema(db, schemaSql);

        let showsData;
        try { const jsonData = fs.readFileSync(jsonPath, 'utf8'); showsData = JSON.parse(jsonData); }
        catch (parseError) { console.error(`Fatal Error reading/parsing JSON: ${parseError.message}`); throw new Error("JSON file error."); }
        if (!Array.isArray(showsData)) { throw new Error("JSON data is not an array."); }
        console.log(`Read ${showsData.length} show entries from JSON.`);

        await runDb(db, 'BEGIN TRANSACTION;'); console.log('Transaction started.');
        let showInsertCount = 0, themeInsertCount = 0, linkInsertCount = 0, errorCount = 0, skippedShowCount = 0;
        const themeCache = new Map();

        const showInsertSql = `INSERT INTO shows ( title, stimulation_score, platform, target_age_group, min_age, max_age, seasons, avg_episode_length, interactivity_level, animation_style, dialogue_intensity, sound_effects_level, music_tempo, total_music_level, total_sound_effect_time_level, scene_frequency, image_filename, dialogue_intensity_num, scene_frequency_num, sound_effects_level_num, total_music_level_num ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
        const themeInsertSql = `INSERT OR IGNORE INTO themes (name) VALUES (?)`;
        const themeSelectSql = `SELECT id FROM themes WHERE name = ? COLLATE NOCASE`;
        const linkInsertSql = `INSERT OR IGNORE INTO show_themes (show_id, theme_id) VALUES (?, ?)`;

        for (const [index, show] of showsData.entries()) {
            if (!show || typeof show !== 'object' || typeof show.title !== 'string' || !show.title.trim() || typeof show.stimulation_score !== 'number' || show.stimulation_score < 1 || show.stimulation_score > 5) {
                console.warn(`[Entry ${index}] Skipping entry due to invalid base data: Title='${show?.title}', Score=${show?.stimulation_score}`);
                skippedShowCount++; continue;
            }
            const title = show.title.trim();
            let ageResult = parseAgeGroup(show.target_age_group);
            const { min_age, max_age } = ageResult;
            const dialogueNum = mapLevelToNumber(show.dialogue_intensity);
            const sceneNum = mapLevelToNumber(show.scene_frequency);
            const sfxNum = mapLevelToNumber(show.sound_effects_level);
            const musicNum = mapLevelToNumber(show.total_music_level);

            const showParams = [ title, show.stimulation_score, show.platform, show.target_age_group, min_age, max_age, show.seasons, show.avg_episode_length, show.interactivity_level, show.animation_style, show.dialogue_intensity, show.sound_effects_level, show.music_tempo, show.total_music_level, show.total_sound_effect_time_level, show.scene_frequency, show.image_filename, dialogueNum, sceneNum, sfxNum, musicNum ];
            if (showParams.length !== 21) { console.error(`[Entry ${index} - "${title}"] Parameter count mismatch! Skipping.`); errorCount++; continue; }

            let showId = 0;
            try {
                const showResult = await runDb(db, showInsertSql, showParams);
                if (showResult.skipped) {
                    skippedShowCount++; const existingShow = await getDb(db, 'SELECT id FROM shows WHERE title = ? COLLATE NOCASE', [title]);
                    if (existingShow) { showId = existingShow.id; } else { console.error(`CRITICAL: Could not find existing show ID for skipped duplicate: "${title}"`); errorCount++; continue; }
                } else if (showResult.changes > 0) { showInsertCount++; showId = showResult.lastID; }
                else { console.error(`Unknown state inserting show: "${title}"`); errorCount++; continue; }

                if (showId > 0 && Array.isArray(show.themes)) {
                    for (const themeName of show.themes) {
                        if (typeof themeName !== 'string' || !themeName.trim()) continue;
                        const trimmedTheme = themeName.trim(); const lowerTheme = trimmedTheme.toLowerCase(); let themeId;
                        if (themeCache.has(lowerTheme)) { themeId = themeCache.get(lowerTheme); }
                        else {
                            await runDb(db, themeInsertSql, [trimmedTheme]); const themeRow = await getDb(db, themeSelectSql, [trimmedTheme]);
                            if (themeRow) { themeId = themeRow.id; if (!themeCache.has(lowerTheme)) { themeInsertCount++; themeCache.set(lowerTheme, themeId); } }
                            else { console.error(`[Show "${title}"] Failed to get/insert theme ID for: "${trimmedTheme}"`); errorCount++; continue; }
                        }
                        if (themeId) { const linkResult = await runDb(db, linkInsertSql, [showId, themeId]); if (linkResult && !linkResult.skipped && linkResult.changes > 0) { linkInsertCount++; } }
                    }
                }
            } catch (err) { console.error(`\n--- Error processing entry index ${index}, title "${title}" ---\n${err.message}\n--- End Error Log ---`); errorCount++; }
        } // End show loop

        await runDb(db, 'COMMIT;'); console.log('Transaction committed.');
        console.log(`\n--- Import Summary ---\nInserted ${showInsertCount} NEW shows.\nSkipped ${skippedShowCount} shows.\nProcessed ~${themeInsertCount} unique themes.\nCreated ${linkInsertCount} new show-theme links.\nErrors: ${errorCount}.\n----------------------\n`);
    } catch (error) {
        console.error('CRITICAL error during import:', error.message);
        if (db) { try { db.run('ROLLBACK', (rbErr) => { if (rbErr) console.error('Rollback failed:', rbErr); else console.log('Transaction rolled back.'); }); } catch (rbCatch) { console.error('Rollback error:', rbCatch); } }
    } finally { if (db) { await closeDb(db); } console.log("✅ import_data.js script finished."); }
}
importData();
</file>

<file path="database/schema.sql">
-- database/schema.sql

-- Drop tables in reverse order of dependency to avoid errors
DROP TABLE IF EXISTS show_themes;
DROP TABLE IF EXISTS themes;
DROP TABLE IF EXISTS shows;

-- Create the main shows table
CREATE TABLE shows (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL UNIQUE,
    stimulation_score INTEGER CHECK(stimulation_score BETWEEN 1 AND 5),
    platform TEXT,
    target_age_group TEXT,
    min_age INTEGER,
    max_age INTEGER,
    seasons TEXT,
    avg_episode_length TEXT,
    interactivity_level TEXT,
    animation_style TEXT,
    dialogue_intensity TEXT,
    sound_effects_level TEXT,
    music_tempo TEXT,
    total_music_level TEXT,
    total_sound_effect_time_level TEXT,
    scene_frequency TEXT,
    image_filename TEXT,
    dialogue_intensity_num INTEGER CHECK(dialogue_intensity_num IS NULL OR dialogue_intensity_num BETWEEN 0 AND 5),
    scene_frequency_num INTEGER CHECK(scene_frequency_num IS NULL OR scene_frequency_num BETWEEN 0 AND 5),
    sound_effects_level_num INTEGER CHECK(sound_effects_level_num IS NULL OR sound_effects_level_num BETWEEN 0 AND 5),
    total_music_level_num INTEGER CHECK(total_music_level_num IS NULL OR total_music_level_num BETWEEN 0 AND 5)
);

-- Create a separate table for unique themes
CREATE TABLE themes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE COLLATE NOCASE
);

-- Create a junction table to link shows and themes (Many-to-Many)
CREATE TABLE show_themes (
    show_id INTEGER NOT NULL,
    theme_id INTEGER NOT NULL,
    PRIMARY KEY (show_id, theme_id),
    FOREIGN KEY (show_id) REFERENCES shows (id) ON DELETE CASCADE,
    FOREIGN KEY (theme_id) REFERENCES themes (id) ON DELETE CASCADE
);

-- --- Indexes for Faster Queries ---

-- Existing Indexes
CREATE INDEX idx_shows_min_age ON shows (min_age);
CREATE INDEX idx_shows_max_age ON shows (max_age);
CREATE INDEX idx_shows_stimulation_score ON shows (stimulation_score);
CREATE INDEX idx_themes_name ON themes (name);
CREATE INDEX idx_show_themes_show_id ON show_themes (show_id);
CREATE INDEX idx_show_themes_theme_id ON show_themes (theme_id);

-- Index for sorting/searching by title (helps exact match, partial for prefix, NOT '%search%')
-- Note: Adding COLLATE NOCASE might help case-insensitive lookups if needed,
-- but the queries already use COLLATE NOCASE where appropriate.
CREATE INDEX idx_shows_title ON shows (title); -- Added explicit index for title

-- *** NEW Indexes for Common Filter Fields ***
CREATE INDEX idx_shows_interactivity ON shows (interactivity_level COLLATE NOCASE);
CREATE INDEX idx_shows_dialogue ON shows (dialogue_intensity COLLATE NOCASE);
CREATE INDEX idx_shows_scene_freq ON shows (scene_frequency COLLATE NOCASE);

-- Optional indexes for numeric scores if heavily used for filtering/sorting
-- CREATE INDEX idx_shows_dialogue_num ON shows (dialogue_intensity_num);
-- CREATE INDEX idx_shows_scene_freq_num ON shows (scene_frequency_num);
-- etc. (Let's hold off on these unless proven necessary)
</file>

<file path="server/db/queries.js">
// server/db/queries.js
const { getDbConnection } = require('./connection'); // Import the function to get DB connection

// Helper to log query errors consistently
function logQueryError(sql, params, error) {
     console.error(`--- Database Query Error ---`);
     console.error(`SQL: ${sql}`);
     if (params && params.length > 0) {
         console.error(`Parameters: ${JSON.stringify(params)}`);
     }
     console.error(`Error Message: ${error.message}`);
     // console.error(`Stack Trace: ${error.stack}`); // Optional: Uncomment for full stack
     console.error(`--------------------------`);
}

// Runs a query expected to return multiple rows (SELECT)
function runQuery(sql, params = []) {
    return new Promise((resolve, reject) => {
        try {
            const db = getDbConnection(); // Get the active DB connection
            db.all(sql, params, (err, rows) => {
                if (err) {
                    logQueryError(sql, params, err);
                    reject(new Error('Database query failed. Please check server logs.')); // Generic message to client
                } else {
                    resolve(rows || []); // Ensure an array is always resolved
                }
            });
        } catch (connectionError) {
             console.error("Database connection error in runQuery:", connectionError);
             reject(new Error("Database connection error."));
        }
    });
}

// Runs a query expected to return a single row (SELECT with LIMIT 1)
function getSingleRow(sql, params = []) {
    return new Promise((resolve, reject) => {
         try {
            const db = getDbConnection();
            db.get(sql, params, (err, row) => {
                if (err) {
                     logQueryError(sql, params, err);
                     reject(new Error('Database query failed. Please check server logs.'));
                } else {
                    resolve(row); // row is undefined if not found, which is expected behavior
                }
            });
         } catch (connectionError) {
             console.error("Database connection error in getSingleRow:", connectionError);
             reject(new Error("Database connection error."));
         }
    });
}

// Runs a query for INSERT, UPDATE, DELETE
function runAction(sql, params = []) {
     return new Promise((resolve, reject) => {
         try {
             const db = getDbConnection();
             // Use function() to access `this` for lastID, changes
             db.run(sql, params, function(err) { // `function` keyword is important here
                 if (err) {
                     logQueryError(sql, params, err);
                     reject(new Error('Database action failed. Please check server logs.'));
                 } else {
                     // Resolve with info about the action
                     resolve({ lastID: this.lastID, changes: this.changes });
                 }
             });
         } catch (connectionError) {
              console.error("Database connection error in runAction:", connectionError);
             reject(new Error("Database connection error."));
         }
     });
 }

// Helper to get themes for a list of show IDs efficiently
async function getThemesForShows(showIds) {
    const themesByShowId = {}; // Initialize map
    if (!showIds || showIds.length === 0) {
        return themesByShowId; // Return empty map if no IDs
    }
    // Ensure IDs are unique and valid numbers before querying
    const uniqueValidIds = [...new Set(showIds.filter(id => typeof id === 'number' && id > 0))];
    if (uniqueValidIds.length === 0) {
        return themesByShowId; // Return empty if no valid IDs remain
    }

    const placeholders = uniqueValidIds.map(() => '?').join(',');
    const themeSql = `
        SELECT st.show_id, t.name
        FROM show_themes st
        JOIN themes t ON st.theme_id = t.id
        WHERE st.show_id IN (${placeholders})
        ORDER BY st.show_id, t.name COLLATE NOCASE; -- Ensure consistent theme order
    `;
    try {
        const themeRows = await runQuery(themeSql, uniqueValidIds); // Use runQuery now
        // Group themes by show_id
        themeRows.forEach(row => {
            if (!themesByShowId[row.show_id]) {
                themesByShowId[row.show_id] = [];
            }
            themesByShowId[row.show_id].push(row.name);
        });
        return themesByShowId;
    } catch (error) {
        // Error is logged within runQuery, re-throw a specific error for this context
        console.error("getThemesForShows failed after runQuery succeeded or failed:", error);
        throw new Error('Failed to retrieve themes for shows.');
    }
}

// Helper to attach themes (from the map) to a list of show objects
function attachThemesToShowList(shows, themesMap) {
     return shows.map(show => ({
        ...show,
        // Ensure themes is always an array, even if show.id is not in themesMap
        themes: themesMap[show.id] || []
    }));
}

// Export all query functions
module.exports = {
    runQuery,
    getSingleRow,
    runAction,
    getThemesForShows,
    attachThemesToShowList
};
</file>

<file path="client/src/components/catalog/ShowCard.jsx">
// client/src/components/catalog/ShowCard.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ScoreVisual from '../shared/ScoreVisual';

// Placeholder image path (relative to public directory)
const placeholderImage = "/images/placeholder-show.png"; // Ensure this placeholder exists

const ShowCardComponent = ({ show }) => {
    // Gracefully handle invalid show prop before destructuring
    if (!show || typeof show !== 'object' || !show.id) {
        console.error("ShowCard received invalid show prop:", show);
        return (
            <div className="border border-red-300 p-3 text-red-600 text-xs rounded-lg shadow-md bg-white overflow-hidden flex flex-col">
                Invalid Show Data Provided. Cannot render card.
            </div>
        );
    }

    // Destructure needed properties, providing default values for safety
    const {
        id,
        title = "Unknown Title",
        target_age_group = "N/A",
        themes = [], // Default to empty array
        stimulation_score = 0,
        image_filename = null
    } = show;

    // Image URL Logic (WebP first, then original, then placeholder)
    const webpImageUrl = image_filename ? `/images/${image_filename.replace(/\.(jpg|jpeg|png)$/i, '.webp')}` : placeholderImage;
    const originalImageUrl = image_filename ? `/images/${image_filename}` : placeholderImage;

    // Limit themes displayed on the card
    const MAX_THEMES_DISPLAYED = 3;
    const displayedThemes = Array.isArray(themes) ? themes.slice(0, MAX_THEMES_DISPLAYED) : [];
    const hasMoreThemes = Array.isArray(themes) && themes.length > MAX_THEMES_DISPLAYED;

    return (
        <div className="border border-gray-200 rounded-lg shadow-md bg-white overflow-hidden flex flex-col transition-shadow duration-200 hover:shadow-lg h-full group"> {/* Added h-full & group */}

            {/* Image Container */}
            <div className="w-full h-48 bg-gray-100 relative overflow-hidden"> {/* Fixed height, relative positioning */}
                <Link to={`/show/${id}`} className="absolute inset-0" aria-label={`View details for ${title}`}> {/* Link covers image */}
                    <img
                        src={webpImageUrl}
                        alt={`${title} poster`}
                        className="w-full h-full object-cover transition-transform duration-300 ease-in-out group-hover:scale-105" // Smooth transition on hover
                        onError={(e) => {
                            // Fallback logic
                            if (e.target.src !== originalImageUrl && originalImageUrl !== placeholderImage) {
                                e.target.src = originalImageUrl;
                            } else if (e.target.src !== placeholderImage) {
                                e.target.onerror = null;
                                e.target.src = placeholderImage;
                            }
                        }}
                        loading="lazy"
                    />
                </Link>
            </div>

            {/* Details Section */}
            <div className="p-4 flex flex-col flex-grow"> {/* Padding, flex-grow pushes button down */}
                 {/* Title (Truncated) */}
                 <h3 className="text-lg font-semibold mb-1 text-gray-800 truncate" title={title}>
                     <Link to={`/show/${id}`} className="hover:text-teal-700 transition duration-150 focus:outline-none focus:underline">
                        {title}
                     </Link>
                 </h3>

                 {/* Age Group */}
                 <p className="text-sm text-gray-600 mb-2">Age: {target_age_group}</p>

                 {/* Themes */}
                 <div className="mb-3 flex flex-wrap gap-1 min-h-[24px]"> {/* Min height to prevent jump */}
                    {displayedThemes.length > 0 ? displayedThemes.map((theme, index) => (
                        <span key={index} className="text-xs bg-teal-100 text-teal-800 px-2 py-0.5 rounded-full whitespace-nowrap">
                            {theme}
                        </span>
                    )) : (
                        <span className="text-xs text-gray-400 italic">No themes listed</span>
                    )}
                    {hasMoreThemes && (
                        <span className="text-xs text-gray-400 px-1 py-0.5" title={`${themes.length - MAX_THEMES_DISPLAYED} more themes`}>...</span>
                    )}
                </div>

                 {/* Score */}
                 <div className="mb-4">
                     <ScoreVisual score={stimulation_score} />
                 </div>

                {/* Learn More Button (Pushed to bottom) */}
                <div className="mt-auto pt-2"> {/* Margin-top auto pushes this down, padding-top for space */}
                    <Link
                        to={`/show/${id}`}
                        className="block w-full text-center px-4 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition duration-200 text-sm font-medium shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500" // Added focus styles
                    >
                        Learn More
                    </Link>
                </div>
            </div>
        </div>
    );
};

// Wrap the component with React.memo for performance optimization
const ShowCard = React.memo(ShowCardComponent);

export default ShowCard;
</file>

<file path="client/src/pages/CatalogPage.jsx">
// client/src/pages/CatalogPage.jsx
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useSearchParams } from 'react-router-dom';
import FilterPanel from '../components/catalog/FilterPanel';
import ShowCard from '../components/catalog/ShowCard';
import { getShows } from '../services/showService';
import useDebounce from '../hooks/useDebounce';

const DEBOUNCE_DELAY = 400; // Delay in milliseconds for search input debounce
const ITEMS_PER_PAGE = 12; // Number of shows per page

// --- Skeleton Card for Loading State ---
const SkeletonShowCard = () => (
    <div className="border border-gray-200 rounded-lg shadow-md bg-white p-4 animate-pulse h-full flex flex-col">
        <div className="h-48 bg-gray-300 rounded mb-3"></div>
        <div className="h-5 bg-gray-300 rounded w-3/4 mb-2"></div>
        <div className="h-4 bg-gray-300 rounded w-1/2 mb-3"></div>
        <div className="mt-auto pt-2"><div className="h-9 bg-gray-300 rounded-md"></div></div>
    </div>
);

const CatalogPage = () => {
  // State for shows, loading, error, and pagination
  const [shows, setShows] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [totalPages, setTotalPages] = useState(0);
  const [totalShows, setTotalShows] = useState(0); // Store total results count

  // Manage URL search parameters
  const [searchParams, setSearchParams] = useSearchParams();

  // --- State for the IMMEDIATE search input value ---
  const [localSearchTerm, setLocalSearchTerm] = useState(searchParams.get('search') || '');

  // --- Debounce the local search term ---
  const debouncedSearchTerm = useDebounce(localSearchTerm, DEBOUNCE_DELAY);

  // --- Derive Filters and Page from URL Search Parameters ---
  const activeFilters = useMemo(() => {
    const filters = {};
    searchParams.forEach((value, key) => {
      if (key !== 'page' && key !== 'limit' && key !== 'search') {
        filters[key] = value;
      }
    });
    // Reflect the immediate search term in the FilterPanel input,
    // but the 'search' key here uses the debounced term for consistency checks if needed.
    // If `localSearchTerm` is used for display, `filters.search` is less critical here.
    if (debouncedSearchTerm) {
       filters.search = debouncedSearchTerm;
     }
    return filters;
  }, [searchParams, debouncedSearchTerm]); // Depend on URL and debounced term

  const currentPage = useMemo(() => {
    const pageParam = searchParams.get('page');
    const page = parseInt(pageParam, 10);
    return !isNaN(page) && page > 0 ? page : 1;
  }, [searchParams]);

  // --- Effect to update URL when DEBOUNCED search term changes ---
  useEffect(() => {
    const currentParams = new URLSearchParams(searchParams);
    const currentSearchInUrl = currentParams.get('search') || '';

    if (debouncedSearchTerm !== currentSearchInUrl) {
      console.log(`CatalogPage: Debounced search changed to "${debouncedSearchTerm}". Updating URL.`);
      if (debouncedSearchTerm) {
        currentParams.set('search', debouncedSearchTerm);
      } else {
        currentParams.delete('search');
      }
      currentParams.set('page', '1');
      setSearchParams(currentParams, { replace: true });
    }
  }, [debouncedSearchTerm, searchParams, setSearchParams]);

  // --- Fetching Logic ---
  useEffect(() => {
    let isMounted = true;
    const controller = new AbortController(); // For fetch cancellation

    const fetchFilters = {};
    searchParams.forEach((value, key) => {
      if (key !== 'page' && key !== 'limit') {
        fetchFilters[key] = value;
      }
    });

    console.log(`CatalogPage: Fetching shows with filters:`, fetchFilters, `Page: ${currentPage}`);
    setIsLoading(true);
    setError(null);

    getShows(fetchFilters, currentPage, ITEMS_PER_PAGE, { signal: controller.signal })
      .then(data => {
        if (isMounted) {
          console.log(`CatalogPage: Received ${data.shows.length} shows, Total Shows: ${data.totalShows}, Total Pages: ${data.totalPages}`);
          setShows(data.shows);
          setTotalPages(data.totalPages);
          setTotalShows(data.totalShows);
          // Redirect to last page if current page becomes invalid after filtering/fetching
          if (currentPage > data.totalPages && data.totalPages > 0) {
             handlePageChange(data.totalPages);
          }
        }
      })
      .catch(err => {
        if (err.name !== 'AbortError' && err.message !== 'Request cancelled while fetching shows.') { // Check for cancellation
          if (isMounted) {
            console.error('CatalogPage: Failed to fetch shows:', err);
            setError(err.message || 'Failed to fetch shows. Please try again.');
            setShows([]); setTotalPages(0); setTotalShows(0);
          }
        } else {
             console.log("CatalogPage: Fetch aborted or cancelled.");
        }
      })
      .finally(() => {
        if (isMounted) {
          setIsLoading(false);
        }
      });

    return () => {
      isMounted = false;
      controller.abort(); // Cancel fetch on unmount or dependency change
      console.log("CatalogPage: Unmounting or dependencies changed, fetch cleanup.");
    };
  }, [searchParams, currentPage]); // Rerun fetch when URL params or current page changes

  // --- Filter Handlers ---
  const handleFilterChange = useCallback((newFilters) => {
    console.log("CatalogPage: handleFilterChange called with:", newFilters);
    const currentParams = new URLSearchParams(searchParams);
    const currentSearch = currentParams.get('search'); // Preserve existing search term

    // Remove all old filters except search and pagination
     const keysToRemove = [];
     currentParams.forEach((_, key) => {
          if (key !== 'page' && key !== 'limit' && key !== 'search') {
              keysToRemove.push(key);
          }
      });
      keysToRemove.forEach(key => currentParams.delete(key));

    // Add new filters
    Object.entries(newFilters).forEach(([key, value]) => {
         // Ensure value is treated correctly (e.g., themes string)
         if (value !== null && value !== undefined && String(value).trim() !== '') {
             currentParams.set(key, String(value));
         } else {
              currentParams.delete(key); // Explicitly remove if empty/null
         }
     });

    // Restore search term if it existed
    if (currentSearch) {
        currentParams.set('search', currentSearch);
    } else {
         currentParams.delete('search');
     }

    currentParams.set('page', '1'); // Reset page
    setSearchParams(currentParams, { replace: true });
  }, [searchParams, setSearchParams]);


  const handleSearchInputChange = useCallback((event) => {
    setLocalSearchTerm(event.target.value);
  }, []);

  const handleResetFilters = useCallback(() => {
    console.log("CatalogPage: Resetting filters.");
    setLocalSearchTerm('');
    setSearchParams({ page: '1' }, { replace: true }); // Reset URL to just page 1
  }, [setSearchParams]);

  // --- Pagination Handlers ---
  const handlePageChange = useCallback((newPage) => {
    if (newPage < 1 || newPage > totalPages || isLoading || newPage === currentPage) return;
    console.log(`CatalogPage: Changing page to ${newPage}`);
    const params = new URLSearchParams(searchParams);
    params.set('page', newPage.toString());
    setSearchParams(params, { replace: true }); // Update URL, triggers fetch effect

     // Scroll to top of results list smoothly
     const resultsSection = document.getElementById('show-results-section');
     if (resultsSection) {
         // Use setTimeout to allow state update before scrolling
         setTimeout(() => {
             resultsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
         }, 0);
     }
  }, [searchParams, setSearchParams, totalPages, isLoading, currentPage]);

  const handleNextPage = useCallback(() => handlePageChange(currentPage + 1), [handlePageChange, currentPage]);
  const handlePrevPage = useCallback(() => handlePageChange(currentPage - 1), [handlePageChange, currentPage]);

  // --- Result Summary Text ---
  const resultSummary = useMemo(() => {
      if (isLoading && totalShows === 0) return <p className="text-sm text-gray-500 mb-4 h-5 animate-pulse bg-gray-200 rounded w-48"></p>; // Placeholder
      if (error) return null;

      const startItem = totalShows === 0 ? 0 : (currentPage - 1) * ITEMS_PER_PAGE + 1;
      const endItem = Math.min(currentPage * ITEMS_PER_PAGE, totalShows);

      if (totalShows === 0 && !isLoading) return <p className="text-sm text-gray-600 mb-4 font-medium">No shows found matching your criteria.</p>;
       if (totalShows > 0) return (
           <p className="text-sm text-gray-600 mb-4">
               Showing <span className='font-medium'>{startItem} - {endItem}</span> of <span className='font-medium'>{totalShows}</span> results
           </p>
       );
       return null; // Should not happen if loading/error/no results are handled
  }, [isLoading, error, totalShows, currentPage]);

    // --- Pagination Component ---
    const PaginationControls = () => {
        // Hide pagination if loading results, or if there's only one page or fewer.
        if (isLoading || totalPages <= 1) return null;

        const pageNumbers = [];
        const maxPagesToShow = 5; // Max number of page buttons (e.g., 1 ... 4 5 6 ... 10)
        let startPage, endPage;

        if (totalPages <= maxPagesToShow) {
            startPage = 1; endPage = totalPages;
        } else {
             // Calculate start/end pages for the sliding window
             let maxPagesBeforeCurrent = Math.floor((maxPagesToShow - 1) / 2);
             let maxPagesAfterCurrent = Math.ceil((maxPagesToShow - 1) / 2);

             if (currentPage <= maxPagesBeforeCurrent) {
                 startPage = 1;
                 endPage = maxPagesToShow -1; // Leave space for ellipsis and last page
             } else if (currentPage + maxPagesAfterCurrent >= totalPages) {
                 startPage = totalPages - (maxPagesToShow - 2); // Leave space for first page and ellipsis
                 endPage = totalPages;
             } else {
                 startPage = currentPage - maxPagesBeforeCurrent + 1;
                 endPage = currentPage + maxPagesAfterCurrent -1;
             }
        }

        for (let i = startPage; i <= endPage; i++) {
            pageNumbers.push(i);
        }

         // Button styling classes
        const buttonClass = "px-3 py-1 mx-0.5 border border-gray-300 rounded text-sm transition duration-150 focus:outline-none focus:ring-1 focus:ring-teal-500 focus:z-10 relative";
        const activeClass = "bg-teal-600 text-white border-teal-600 z-20";
        const defaultClass = "bg-white text-gray-700 hover:bg-gray-100";
        const disabledClass = "opacity-50 cursor-not-allowed bg-gray-100 text-gray-400 border-gray-200";
        const ellipsisClass = "text-gray-500 mx-1 px-1 py-1 text-sm";

        return (
            <nav aria-label="Pagination" className="flex justify-center items-center mt-8 space-x-1">
                <button onClick={handlePrevPage} disabled={currentPage === 1} aria-label="Previous page"
                    className={`${buttonClass} ${currentPage === 1 ? disabledClass : defaultClass}`}>
                    Previous
                </button>
                {/* Show first page and ellipsis if needed */}
                {startPage > 1 && (
                    <>
                        <button onClick={() => handlePageChange(1)} aria-label="Go to page 1" className={`${buttonClass} ${defaultClass}`}>1</button>
                        {startPage > 2 && <span className={ellipsisClass} aria-hidden="true">...</span>}
                    </>
                )}
                {/* Page number buttons */}
                {pageNumbers.map(num => (
                    <button key={num} onClick={() => handlePageChange(num)} disabled={num === currentPage} aria-current={num === currentPage ? 'page' : undefined}
                        className={`${buttonClass} ${num === currentPage ? activeClass : defaultClass}`}>
                        {num}
                    </button>
                ))}
                 {/* Show last page and ellipsis if needed */}
                 {endPage < totalPages && (
                    <>
                         {endPage < totalPages - 1 && <span className={ellipsisClass} aria-hidden="true">...</span>}
                        <button onClick={() => handlePageChange(totalPages)} aria-label={`Go to page ${totalPages}`} className={`${buttonClass} ${defaultClass}`}>{totalPages}</button>
                    </>
                )}
                <button onClick={handleNextPage} disabled={currentPage === totalPages} aria-label="Next page"
                     className={`${buttonClass} ${currentPage === totalPages ? disabledClass : defaultClass}`}>
                    Next
                </button>
            </nav>
        );
    };

  // --- JSX Rendering ---
  return (
    <div className="flex flex-col md:flex-row gap-6 md:gap-8">
      {/* Filter Panel Sidebar */}
       <aside className="w-full md:w-1/4 lg:w-1/5 md:sticky md:top-24 md:max-h-[calc(100vh-7rem)] md:overflow-y-auto"> {/* Adjust top offset based on header height, enable scroll */}
        <h2 className="text-xl font-semibold mb-4 text-gray-700">Filters</h2>
        {/* Pass only relevant props derived from URL state */}
        <FilterPanel
          filters={activeFilters}
          onFilterChange={handleFilterChange}
          searchInputValue={localSearchTerm} // Display the immediate value
          onSearchInputChange={handleSearchInputChange}
        />
        <button
          onClick={handleResetFilters}
          className="mt-4 w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition duration-200 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-gray-400"
        >
          Reset All Filters
        </button>
      </aside>

      {/* Main Content Area: Results Grid and Pagination */}
      <section id="show-results-section" className="w-full md:w-3/4 lg:w-4/5">
        <h1 className="text-2xl md:text-3xl font-bold text-teal-700 mb-1">Browse Shows</h1>
        {resultSummary}

        {/* Results Grid Area */}
        <div className="min-h-[60vh]">
          {error && !isLoading && ( // Show error prominently if it occurs
            <p className="text-center text-red-600 bg-red-100 p-4 rounded border border-red-300 mb-6">{error}</p>
          )}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {isLoading ? (
              [...Array(ITEMS_PER_PAGE)].map((_, index) => <SkeletonShowCard key={`skel-${index}`} />)
            ) : !error && shows.length > 0 ? (
              shows.map((show) => (
                show && show.id ? <ShowCard key={show.id} show={show} /> : null
              ))
            ) : null /* No shows message handled by resultSummary */}
          </div>
          <PaginationControls />
        </div>
      </section>
    </div>
  );
};

export default CatalogPage;
</file>

<file path="client/src/pages/HomePage.jsx">
// client/src/pages/HomePage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios'; // Keep axios for AbortController check

// Import API service functions
import { getAutocompleteSuggestions, getHomepageData } from '../services/showService.js';

// Import child components
import FeaturedShow from '../components/home/FeaturedShow.jsx';
import CategoryCard from '../components/home/CategoryCard.jsx';
import ShowCategoryRow from '../components/home/ShowCategoryRow.jsx';

// Import Custom Hook
import useAutocomplete from '../hooks/useAutocomplete.js';

// Import Icons (Make sure react-icons is installed: npm install react-icons)
import { FaSearch, FaStar, FaSmileBeam, FaThumbsUp, FaHandPaper } from 'react-icons/fa'; // Example icons

// --- Category Data with Icons and Links ---
const categories = [
  {
    title: 'Lower Stimulation',
    description: 'Shows with lower sensory load (Scores 1-2)',
    IconComponent: FaSmileBeam, // Added Icon
    linkUrl: '/shows?stimScoreMin=1&stimScoreMax=2' // Added Link
  },
  {
    title: 'Highly Rated',
    description: 'Shows with the highest stimulation score (Score 5)',
    IconComponent: FaStar, // Added Icon
    linkUrl: '/shows?stimScoreMin=5&stimScoreMax=5' // Added Link
  },
  {
    title: 'Higher Interaction',
    description: 'Shows designed for more viewer participation',
    IconComponent: FaHandPaper, // Added Icon
    linkUrl: '/shows?interactivity=High' // Added Link
  },
    {
    title: 'Popular', // Assuming popularity might be based on views or another metric
    description: 'Shows often searched for or highly reviewed',
    IconComponent: FaThumbsUp, // Added Icon
    linkUrl: '/shows?sortBy=title' // Link to browse sorted by title (or a future popularity metric)
  },
];

// --- Main HomePage Component ---
const HomePage = () => {
    const navigate = useNavigate();

    // --- Autocomplete Hook Usage ---
    const {
        inputValue: searchTerm,
        suggestions,
        isLoading: isAutocompleteLoading,
        showSuggestions,
        handleInputChange: handleSearchChange,
        handleSuggestionSelect,
        hideSuggestions,
        containerRef: autocompleteContainerRef
    } = useAutocomplete(getAutocompleteSuggestions, 300);

    // --- State for Page Content Loading ---
    const [homepageData, setHomepageData] = useState({
        featuredShow: null,
        popularShows: [],
        ratedShows: [],
        lowStimShows: [],
        highInteractionShows: []
    });
    const [isPageLoading, setIsPageLoading] = useState(true);
    const [pageError, setPageError] = useState(null);
    const [isNavigating, setIsNavigating] = useState(false);

    // --- Fetching Logic for Homepage Data ---
    useEffect(() => {
        const controller = new AbortController();
        const fetchHomepageContent = async () => {
            setIsPageLoading(true);
            setPageError(null);

            try {
                console.log("HomePage: Fetching homepage data...");
                const data = await getHomepageData({ signal: controller.signal }); // Pass signal
                if (!controller.signal.aborted) {
                     if (data) {
                        console.log("HomePage: Homepage data received:", data);
                         setHomepageData({ // Ensure all keys exist
                            featuredShow: data.featuredShow || null,
                            popularShows: data.popularShows || [],
                            ratedShows: data.ratedShows || [],
                            lowStimShows: data.lowStimShows || [],
                            highInteractionShows: data.highInteractionShows || []
                         });
                     } else {
                         console.warn("HomePage: No data received from getHomepageData.");
                         setPageError("Could not load homepage content.");
                         setHomepageData({ featuredShow: null, popularShows: [], ratedShows: [], lowStimShows: [], highInteractionShows: [] });
                     }
                }
            } catch (err) {
                 if (err.name !== 'AbortError' && !axios.isCancel(err)) { // Check cancellation
                    if (!controller.signal.aborted) {
                       console.error("HomePage: Error fetching homepage data:", err);
                       setPageError(err.message || "Failed to load homepage content.");
                       setHomepageData({ featuredShow: null, popularShows: [], ratedShows: [], lowStimShows: [], highInteractionShows: [] });
                    }
                 } else {
                    console.log('Homepage data fetch aborted or cancelled.');
                 }
            } finally {
                 if (!controller.signal.aborted) {
                    setIsPageLoading(false);
                 }
            }
        };

        fetchHomepageContent();
        return () => { console.log("HomePage: Unmounting, aborting fetch."); controller.abort(); };
    }, []); // Empty dependency array

    // --- Search Submit Handler ---
    const handleSearchSubmit = (event) => {
        event.preventDefault();
        if (!searchTerm.trim()) return;
        hideSuggestions();
        navigate(`/shows?search=${encodeURIComponent(searchTerm.trim())}`);
    };

    // --- Suggestion Click/Select Handler ---
    const handleSuggestionClickAction = (selectedSuggestion) => {
        setIsNavigating(true);
        try { navigate(`/shows?search=${encodeURIComponent(selectedSuggestion)}`); }
        catch(err) { console.error("Error navigating from suggestion:", err); }
        // Let page transition handle isNavigating state naturally
    };

    // --- JSX Output ---
    return (
        <div className="space-y-12 md:space-y-16"> {/* Increased spacing */}

            {/* Hero/Search Section */}
            <section className="text-center py-12 md:py-16 px-4 bg-gradient-to-br from-teal-50 via-white to-blue-50 rounded-xl shadow border border-gray-100">
                 <h1 className="text-3xl md:text-4xl font-bold text-teal-700 mb-3">Sensory Screen Time Guide</h1>
                 <p className="text-md md:text-lg text-gray-600 mb-8 max-w-2xl mx-auto">
                    Find TV shows reviewed for sensory stimulation levels, helping you choose content that fits your child's needs.
                 </p>
                {/* Search Form */}
                <form onSubmit={handleSearchSubmit} className="max-w-xl mx-auto relative" ref={autocompleteContainerRef}>
                    <div className="relative flex items-center">
                         <input
                             type="search" placeholder="Search show titles (e.g., Bluey, Puffin Rock)"
                             value={searchTerm} onChange={handleSearchChange}
                             className="w-full pl-4 pr-20 py-3 border border-gray-300 rounded-full shadow-sm focus:ring-2 focus:ring-teal-500 focus:outline-none text-base"
                             aria-label="Search for TV show titles"
                         />
                         <button type="submit" aria-label="Submit search"
                            className="absolute right-1 top-1 bottom-1 px-5 bg-teal-600 text-white rounded-full hover:bg-teal-700 transition duration-200 flex items-center justify-center shadow focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500">
                             <FaSearch /> <span className="sr-only">Search</span>
                         </button>
                    </div>
                    {/* Autocomplete Suggestions */}
                    {showSuggestions && (searchTerm.trim().length > 1) && (
                         <ul className="absolute left-0 right-0 mt-1 bg-white border border-gray-300 rounded-md shadow-lg z-20 text-left max-h-60 overflow-y-auto" role="listbox">
                           {isAutocompleteLoading && <li className="px-4 py-2 text-gray-500 italic">Loading...</li>}
                           {!isAutocompleteLoading && suggestions.length > 0 && suggestions.map((suggestion, index) => (
                                   <li key={index} role="option" aria-selected="false"
                                       className="px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm"
                                       onMouseDown={() => { handleSuggestionSelect(suggestion); handleSuggestionClickAction(suggestion); }}>
                                       {suggestion}
                                   </li>
                           ))}
                           {!isAutocompleteLoading && suggestions.length === 0 && searchTerm.trim().length > 1 &&
                                <li className="px-4 py-2 text-gray-500 italic">No suggestions found.</li>}
                         </ul>
                    )}
                     {isNavigating && <p className="text-sm text-gray-500 mt-2 absolute bottom-[-25px] left-0 right-0">Navigating...</p>}
                 </form>
            </section>

             {/* Featured Show Section */}
             <section>
                 {/* Render skeleton via FeaturedShow component when loading and no data */}
                 {isPageLoading && !homepageData?.featuredShow && <FeaturedShow show={null} /> }
                 {!isPageLoading && pageError && (
                      <div className="text-center p-4 bg-red-100 text-red-700 rounded border border-red-300">
                           Error loading featured show section: {pageError}
                      </div>
                 )}
                 {!isPageLoading && !pageError && homepageData?.featuredShow && (
                     <FeaturedShow show={homepageData.featuredShow} />
                 )}
                 {!isPageLoading && !pageError && !homepageData?.featuredShow && (
                      <div className="text-center p-6 bg-gray-100 rounded-lg">
                           No featured show available at the moment.
                      </div>
                 )}
             </section>

            {/* Category Links Section */}
            <section>
                 <h2 className="text-2xl font-semibold text-gray-700 mb-5 text-center md:text-left">Explore Categories</h2>
                 <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 md:gap-6">
                     {categories.map((cat) => ( <CategoryCard key={cat.title} {...cat} /> ))}
                 </div>
             </section>

            {/* Show Rows */}
            {!pageError && (
                 <>
                     <ShowCategoryRow title="Popular Shows" shows={homepageData?.popularShows} isLoading={isPageLoading} viewAllLink="/shows?sortBy=title"/>
                     <ShowCategoryRow title="Highly Rated (Stim Score 5)" shows={homepageData?.ratedShows} isLoading={isPageLoading} viewAllLink="/shows?stimScoreMin=5&stimScoreMax=5"/>
                     <ShowCategoryRow title="Lower Stimulation (Scores 1-2)" shows={homepageData?.lowStimShows} isLoading={isPageLoading} viewAllLink="/shows?stimScoreMin=1&stimScoreMax=2"/>
                     <ShowCategoryRow title="Higher Interaction" shows={homepageData?.highInteractionShows} isLoading={isPageLoading} viewAllLink="/shows?interactivity=High"/>
                 </>
            )}
            {pageError && !isPageLoading && (
                 <div className="text-center p-4 bg-red-100 text-red-700 rounded border border-red-300 mt-8">
                    Could not load show categories: {pageError}
                 </div>
            )}
        </div>
    );
};

export default HomePage;
</file>

<file path="client/src/pages/ShowDetailPage.jsx">
// client/src/pages/ShowDetailPage.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { useParams, Link } from 'react-router-dom';
import { getShowById } from '../services/showService';
import ScoreVisual from '../components/shared/ScoreVisual'; // Import ScoreVisual

// Import Chart.js components
import { Pie, Bar } from 'react-chartjs-2';
import {
    Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title
} from 'chart.js';

// Register Chart.js components
ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title);

// Placeholder image path
const placeholderImage = "/images/placeholder-show.png"; // Make sure this exists

// --- Helper Components ---
const DetailItem = React.memo(({ label, value, children }) => (
    <div className="mb-3 break-words">
        <strong className="text-sm font-semibold text-gray-600 block">{label}:</strong>
        {children ? <div className="text-base text-gray-800 mt-0.5">{children}</div>
                  : <span className="text-base text-gray-800 mt-0.5">{value ?? <span className="text-gray-500 italic">N/A</span>}</span>}
    </div>
));

const ThemeTags = React.memo(({ themes }) => {
    if (!themes || themes.length === 0) return <span className="text-sm text-gray-500 italic">None listed</span>;
    return (
        <div className="flex flex-wrap gap-2 mt-1">
            {themes.map((theme, index) => (
                <span key={index} className="text-sm bg-teal-100 text-teal-800 px-3 py-1 rounded-full whitespace-nowrap">{theme}</span>
            ))}
        </div>
    );
});

const InteractionExplanation = React.memo(({ level }) => {
    let explanation = "Interaction level information not available.";
    switch (level?.toLowerCase().trim()) {
        case 'high': explanation = "Frequently asks questions or prompts viewers to participate (e.g., Blue's Clues, Dora)."; break;
        case 'moderate': explanation = "Occasionally encourages participation or has interactive segments."; break;
        case 'low-moderate': explanation = "Limited direct interaction, perhaps some songs or simple call-outs."; break;
        case 'low': explanation = "Primarily passive viewing with little to no direct viewer interaction."; break;
        case 'none': explanation = "No interactive elements are present in this show."; break;
    }
    return <p className="text-gray-700 text-sm mt-1">{explanation}</p>;
});

// --- Main Show Detail Page Component ---
const ShowDetailPage = () => {
    const { id } = useParams();
    const [show, setShow] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    // --- Fetch Show Data ---
    useEffect(() => {
        const numericId = parseInt(id, 10);
        if (!id || isNaN(numericId) || numericId <= 0) {
            setError("Invalid Show ID provided."); setIsLoading(false); return;
        }
        setIsLoading(true); setError(null); setShow(null);
        const controller = new AbortController();

        getShowById(numericId)
            .then(fetchedShowData => { if (!controller.signal.aborted) {
                if (fetchedShowData) { setShow(fetchedShowData); }
                else { setError(`Show with ID ${numericId} not found.`); }
            }})
            .catch(err => { if (!controller.signal.aborted) setError(err.message || `Failed to load show details.`); })
            .finally(() => { if (!controller.signal.aborted) setIsLoading(false); });

        return () => controller.abort();
    }, [id]);

    // --- Prepare Chart Data using useMemo ---
    const chartData = useMemo(() => {
        if (!show) return { pieData: null, barData: null };
        const factorScores = {
            dialogue: show.dialogue_intensity_num ?? 0, sceneFreq: show.scene_frequency_num ?? 0,
            soundFx: show.sound_effects_level_num ?? 0, music: show.total_music_level_num ?? 0,
        };
        const factorLabels = ['Dialogue', 'Scene Freq.', 'Sound FX', 'Music'];
        const scoresArray = [factorScores.dialogue, factorScores.sceneFreq, factorScores.soundFx, factorScores.music];
        const factorColors = ['rgba(54, 162, 235, 0.7)', 'rgba(255, 159, 64, 0.7)', 'rgba(255, 99, 132, 0.7)', 'rgba(75, 192, 192, 0.7)'];
        const factorBorders = factorColors.map(c => c.replace('0.7', '1'));

        const totalScoreSum = scoresArray.reduce((sum, score) => sum + score, 0);
        const piePercentages = totalScoreSum > 0 ? scoresArray.map(score => (score / totalScoreSum) * 100) : [0, 0, 0, 0];
        const pieData = { labels: factorLabels, datasets: [{ label: 'Factor Contribution (%)', data: piePercentages, backgroundColor: factorColors, borderColor: '#ffffff', borderWidth: 1 }] };
        const barData = { labels: factorLabels, datasets: [{ label: `Factor Scores (0-5)`, data: scoresArray, backgroundColor: factorColors, borderColor: factorBorders, borderWidth: 1 }] };
        return { pieData, barData };
    }, [show]);

    // --- Chart Options ---
    const commonChartOptions = useMemo(() => ({
        responsive: true, maintainAspectRatio: false,
        plugins: {
            legend: { position: 'bottom', labels: { boxWidth: 12, padding: 15, font: {size: 11} } },
            title: { display: false },
            tooltip: { callbacks: { label: ctx => `${ctx.label}: ${ctx.parsed.toFixed(1)}%` } } // For Pie
        },
    }), []);
    const barChartOptions = useMemo(() => ({
        ...commonChartOptions, scales: { y: { beginAtZero: true, suggestedMax: 5, ticks: { stepSize: 1 } } },
        plugins: { ...commonChartOptions.plugins, legend: { display: false }, tooltip: { callbacks: { label: ctx => `${ctx.label}: ${ctx.parsed.y}` } } } // For Bar
    }), [commonChartOptions]);

    // --- Render Logic ---
    if (isLoading) return <p className="text-center text-lg text-gray-600 py-10 animate-pulse">Loading show details...</p>;
    if (error) return ( <div className="max-w-4xl mx-auto bg-red-50 p-6 md:p-8 rounded-lg shadow-lg border border-red-300 text-center"> <p className="text-red-700 font-semibold mb-2">Error Loading Show</p> <p className="text-red-600">{error}</p> <Link to="/shows" className="mt-4 inline-block px-4 py-2 border border-red-600 text-red-600 rounded hover:bg-red-100 transition duration-200 text-sm"> ← Back to Catalog </Link> </div> );
    if (!show) return ( <div className="max-w-4xl mx-auto text-center py-10"> <p className="text-gray-500 text-lg">Show data could not be displayed.</p> <Link to="/shows" className="mt-4 inline-block px-4 py-2 border border-gray-400 text-gray-600 rounded hover:bg-gray-100 transition duration-200 text-sm"> ← Back to Catalog </Link> </div> );

    const imageUrl = show.image_filename ? `/images/${show.image_filename}` : placeholderImage;
    return (
        <div className="max-w-5xl mx-auto bg-white p-5 md:p-8 rounded-lg shadow-lg border border-gray-100">
            {/* Back Button */}
            <div className="mb-4"> <Link to="/shows" className="text-sm text-teal-600 hover:text-teal-800 hover:underline focus:outline-none focus:ring-1 focus:ring-teal-500 rounded px-1"> ← Back to Catalog </Link> </div>
            {/* Main Content Grid */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8">
                {/* Left Column: Image & Key Info */}
                <div className="md:col-span-1 space-y-4">
                    <img src={imageUrl} alt={`${show.title} primary image`} className="rounded-lg shadow-md w-full object-contain border border-gray-200 bg-gray-50 aspect-[3/4]" onError={(e) => { e.target.onerror = null; e.target.src=placeholderImage }} loading="lazy" />
                    <div className="border border-gray-200 rounded-lg p-4 bg-gray-50 shadow-sm">
                        <h2 className="text-lg font-semibold text-gray-700 mb-3 border-b pb-2">Key Information</h2>
                        <DetailItem label="Target Age Range" value={show.target_age_group} />
                        <DetailItem label="Platform(s)" value={show.platform} />
                        <DetailItem label="Avg. Episode Length" value={show.avg_episode_length} />
                        <DetailItem label="Seasons" value={show.seasons} />
                        <DetailItem label="Overall Stimulation Score"> <ScoreVisual score={show.stimulation_score} /> </DetailItem>
                        <DetailItem label="Themes"> <ThemeTags themes={show.themes} /> </DetailItem>
                    </div>
                </div>
                {/* Right Column: Title, Sensory Details, Charts */}
                 <div className="md:col-span-2 space-y-6">
                     <h1 className="text-3xl md:text-4xl font-bold text-teal-800">{show.title}</h1>
                     <div className="border border-gray-200 rounded-lg p-4 shadow-sm bg-white">
                        <h2 className="text-xl font-semibold text-gray-700 mb-4 border-b pb-2">Sensory Details</h2>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-3">
                            <DetailItem label="Dialogue Intensity" value={show.dialogue_intensity} />
                            <DetailItem label="Scene Frequency" value={show.scene_frequency} />
                            <DetailItem label="Sound Effects Level" value={show.sound_effects_level} />
                            <DetailItem label="Music Tempo" value={show.music_tempo} />
                            <DetailItem label="Total Music Level" value={show.total_music_level} />
                             <div className="sm:col-span-2"> <DetailItem label="Interaction Level" value={show.interactivity_level}> <InteractionExplanation level={show.interactivity_level} /> </DetailItem> </div>
                            <DetailItem label="Animation Style" value={show.animation_style} />
                        </div>
                     </div>
                     {/* Charts Section */}
                     {(chartData.pieData || chartData.barData) && (
                        <div className="border border-gray-200 rounded-lg p-4 shadow-sm bg-white">
                            <h2 className="text-xl font-semibold text-gray-700 mb-4 border-b pb-2">Visual Breakdown</h2>
                             <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 h-72 md:h-80">
                                <div className="relative flex flex-col items-center">
                                    <h3 className="text-center text-sm font-medium text-gray-600 mb-2">Factor Contribution</h3>
                                    <div className='w-full h-full max-h-[250px]'> {chartData.pieData ? <Pie data={chartData.pieData} options={commonChartOptions} /> : <p className="err-msg">Data unavailable.</p>} </div>
                                </div>
                                <div className="relative flex flex-col items-center">
                                     <h3 className="text-center text-sm font-medium text-gray-600 mb-2">Factor Scores (0-5)</h3>
                                     <div className='w-full h-full max-h-[250px]'> {chartData.barData ? <Bar data={chartData.barData} options={barChartOptions} /> : <p className="err-msg">Data unavailable.</p>} </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};
// Added basic error message class for charts
const ErrMsg = ({ children }) => <p className="text-center text-gray-400 italic text-xs mt-10">{children}</p>;
ShowDetailPage.Err = ErrMsg; // Assign ErrMsg to ShowDetailPage if needed elsewhere (unlikely)

export default ShowDetailPage;
</file>

<file path="database/reviewed_shows.json">
[
  {
    "title": "A for Adley",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Family Relationships",
      "Family Values",
      "Conflict Resolution",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action Family Videos",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "a-for-adley.jpg"
  },
  {
    "title": "Ada Twist, Scientist",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "STEM",
      "Critical Thinking",
      "Curiosity",
      "Problem Solving",
      "Teamwork",
      "Perseverance",
      "Science"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "ada-twist-scientist.jpg"
  },
  {
    "title": "Adventure Agents",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "6-12, 12+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Environmental Awareness",
      "Cause and Effect",
      "Life Lessons",
      "Outdoor Exploration",
      "Nature",
      "Natural World",
      "Exploration",
      "Motor Skills",
      "Animals",
      "Farm Life",
      "Emotional Intelligence",
      "Problem Solving",
      "Critical Thinking",
      "Teamwork",
      "Curiosity",
      "Adventure",
      "Discovery",
      "Safety",
      "Nature Sounds",
      "Healthy Eating",
      "Confidence Building",
      "Mature Themes",
      "Wild Animal Captures and Cooking"
    ],
    "interactivity_level": "High",
    "animation_style": "Live Action Outdoors Survival Adventure",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "adventure-agents.jpg"
  },
  {
    "title": "Adventure Time (2010-2018)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "10-14",
    "seasons": "10 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Friendship",
      "Entertainment",
      "Fantasy Elements",
      "Adventure",
      "Mild Mature Themes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional hand-drawn 2D animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "adv-time.jpg"
  },
  {
    "title": "Akili and Me",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Early Childhood experiences",
      "Cultures & Traditions",
      "Cultural & Social",
      "Life Lessons",
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Motor Skills",
      "Music",
      "Repetitive Learning",
      "Language Learning",
      "Exercise",
      "Colours",
      "Shapes",
      "sing-a-long",
      "Social-Emotional",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "akili-and-me.jpg"
  },
  {
    "title": "Alma's Way",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Cause and Effect",
      "Social-Emotional",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "almas-way.jpg"
  },
  {
    "title": "Alphablocks",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Preschool-Basics",
      "Literacy",
      "Phonics",
      "Language Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with colorful and stylized block characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "alpha-blocks.jpg"
  },
  {
    "title": "Amakandu",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Engineering Concepts",
      "Creativity & Imagination",
      "Sensory Exploration",
      "Mindfulness",
      "Nature",
      "Relaxation",
      "Captivating Visuals",
      "Nature Sounds",
      "ASMR"
    ],
    "interactivity_level": "Low",
    "animation_style": "Real Props No Animations",
    "dialogue_intensity": "None",
    "sound_effects_level": "High",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "amakandu.jpg"
  },
  {
    "title": "Andy's Dinosaur Adventures",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Dinosaurs",
      "Paleontology",
      "Adventure",
      "Science",
      "Natural History",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Combination of live-action and CGI animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "andys-dinosaur-adventure.jpg"
  },
  {
    "title": "Angelina Ballerina (2008-2010)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural Appreciation",
      "Creativity & Imagination",
      "Perseverance",
      "Friendship",
      "Problem Solving",
      "Ballet",
      "Motor Skills"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "angelina-ballerina.jpg"
  },
  {
    "title": "Art Kids TV",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "5-12",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Arts & Crafts",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Origami",
      "Painting",
      "Drawing",
      "Motor Skills",
      "Literacy",
      "Numeracy",
      "Shapes",
      "Colours"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "art-kids-tv.jpg"
  },
  {
    "title": "Arthur",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "25 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Family Values",
      "Relatable Situations",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Traditional hand-drawn",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "arthur.jpg"
  },
  {
    "title": "Avatar: The Last Airbender",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-14",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Teamwork",
      "Morality",
      "Emotional Intelligence",
      "Entertainment",
      "Fantasy Elements",
      "Martial Arts",
      "Friendship",
      "Responsibility",
      "Perseverance",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D animation inspired by anime styles.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "avatar-last-airbender.jpg"
  },
  {
    "title": "Baba blast",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Dinosaurs",
      "Paleontology",
      "Natural History",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Exploration",
      "Entertainment"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "baba-blast.jpg"
  },
  {
    "title": "Babar",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Responsibility",
      "Problem Solving",
      "Leadership",
      "Emotional Intelligence",
      "Perseverance",
      "Family Values",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "babar.jpg"
  },
  {
    "title": "Babblarna",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "1 Season",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Language Learning",
      "Repetitive Learning",
      "Social-Emotional",
      "Phonics"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Very Low",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "babblarna.jpg"
  },
  {
    "title": "Badanamu",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "1-5",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Preschool-Basics",
      "sing-a-long",
      "Numeracy",
      "Literacy",
      "Motor Skills",
      "Cognitive Development",
      "Language Learning",
      "Phonics",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "badanamu.jpg"
  },
  {
    "title": "Bananas in Pyjamas (2011-2013)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Social-Emotional",
      "sing-a-long",
      "Repetitive Learning"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation introduces brighter colors and more dynamic visuals but the animation remains straightforward to prevent overstimulation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "bananas-in-pyjamas.jpg"
  },
  {
    "title": "Barbapapa (1973-2003)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Environmental Awareness",
      "Creativity & Imagination",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "traditional hand-drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "barbapapa.jpg"
  },
  {
    "title": "Barney & Friends",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "13 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Dance",
      "Social-Emotional",
      "Friendship",
      "Numeracy",
      "Literacy",
      "Music",
      "Teamwork",
      "Shapes",
      "Emotional Intelligence",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "Live action with costumed characters",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "barney-and-friends.jpg"
  },
  {
    "title": "Be Cool, Scooby-Doo! (2015–2018)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "Cartoonish 2D animation style",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "be-cool-scooby-doo.jpg"
  },
  {
    "title": "Bear in the Big Blue House",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Routine",
      "Problem Solving",
      "Emotional Intelligence",
      "Social Development",
      "Relatable Situations",
      "sing-a-long",
      "Bedtime Routines"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action costumed puppetry with detailed sets.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "bear-in-the-big-blue-house.jpg"
  },
  {
    "title": "Beep and Mort",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence",
      "Adventure",
      "Teamwork",
      "Perseverance",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with colorful characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "beep-and-mort.jpg"
  },
  {
    "title": "Ben & Holly's Little Kingdom (2009-2013)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "ben-and-hollys-little-kingdom.jpg"
  },
  {
    "title": "Between the Lions",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "11 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Literacy",
      "Phonics",
      "Language Learning",
      "Reading Comprehension",
      "Music",
      "Humor"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action puppetry, 2D animation, and CGI effects. Bright but balanced colors, with emphasis on text and literacy elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "between-the-lions.jpg"
  },
  {
    "title": "Bill Nye the Science Guy",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-14",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Cause and Effect",
      "Safety",
      "Discovery",
      "Science",
      "Critical Thinking",
      "Experimentation",
      "Curiosity",
      "Natural World",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action with fast-paced editing, animations, and special effects.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "bill-nye-the-science-guy.jpg"
  },
  {
    "title": "Bing",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-4",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social Development",
      "Emotional Intelligence",
      "Problem Solving"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "bing.jpg"
  },
  {
    "title": "Blippi",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Early Childhood experiences",
      "Creativity & Imagination",
      "Curiosity",
      "Animals",
      "Natural World",
      "Exploration",
      "sing-a-long",
      "Dance",
      "Vocabulary",
      "Adventure",
      "Silly Comedy",
      "Colours",
      "Shapes",
      "Nature",
      "Hyper-Activity"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Real-World Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "blippi.jpg"
  },
  {
    "title": "Blue's Clues (1996-2007)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Emotional Intelligence",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Live action, Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Very Low",
    "image_filename": "blues-clues.jpg"
  },
  {
    "title": "Blue's Clues & You! (2019)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Emotional Intelligence",
      "Problem Solving",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "Live action, 3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Very Low",
    "image_filename": "blues-clues-and-you.jpg"
  },
  {
    "title": "Bluey 2018-present",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Family Values",
      "Family Relationships"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "bluey.jpg"
  },
  {
    "title": "Bob the Builder (1997-2015)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "21 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Repetitive Learning",
      "Construction"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Stop-Motion animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "bob-the-builder.jpg"
  },
  {
    "title": "Bob the Builder (2015-2018)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Repetitive Learning",
      "Construction"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "bob-the-builder-2015.jpg"
  },
  {
    "title": "Boba the Show (2021-present)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Early Childhood experiences",
      "Social-Emotional",
      "Friendship",
      "Emotional Intelligence",
      "Social Development",
      "sing-a-long",
      "Dance",
      "Humor",
      "Motor Skills"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with realistic textures and environments.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "boba.jpg"
  },
  {
    "title": "Bounce Patrol",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Literacy",
      "Numeracy",
      "Colours",
      "Animals",
      "Social-Emotional",
      "sing-a-long",
      "Dance",
      "Phonics",
      "Vocabulary",
      "Exercise"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "bounce-patrol.jpg"
  },
  {
    "title": "Brain Candy TV",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Spacetime and the Cosmos",
      "Preschool-Basics",
      "Elementary-Basics",
      "STEM",
      "Early Childhood experiences",
      "Engineering Concepts",
      "Science",
      "Language Learning",
      "Phonics",
      "Vocabulary",
      "Cognitive Development",
      "Curiosity",
      "Natural History",
      "Colours",
      "Literacy"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with Bright Colors and Realistic Models",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "brain-candy-tv.jpg"
  },
  {
    "title": "Bubble Guppies",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Math",
      "Literacy",
      "Science",
      "Social-Emotional",
      "Teamwork",
      "sing-a-long",
      "Problem Solving",
      "Numeracy",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "bubble-guppies.jpg"
  },
  {
    "title": "Builder Brothers' Dream Factory",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Engineering Concepts",
      "Teamwork",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with detailed environments.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "builder-brothers-dream-factory.jpg"
  },
  {
    "title": "Caillou (1997-2010)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "8 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Relatable Situations",
      "Patience",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Friendship",
      "Frequent Whining",
      "Tantrums",
      "Lack of Consequences"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional hand-drawn 2D animation. DIgital later in the seasons",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "caillou.jpg"
  },
  {
    "title": "Caitie's Classroom (SuperSimplePlay)",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "1-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Early Childhood experiences",
      "STEM",
      "Elementary-Basics",
      "Cultural & Social",
      "sing-a-long",
      "Dance",
      "Music",
      "Social-Emotional",
      "Literacy",
      "Numeracy",
      "Social Development",
      "Emotional Intelligence",
      "Motor Skills"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Puppetry and Props",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "caitie_s-classroom-(superssimpleplay).jpg"
  },
  {
    "title": "Canticos (2016-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "1-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Language Learning",
      "Literacy",
      "sing-a-long",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 2D animation with a simple, storybook-inspired art style. The characters are designed with soft, rounded features and bright, pastel colors, reflecting the show's musical and educational focus. The animation often incorporates interactive elements, encouraging audience participation.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "canticos-(2016-present).jpg"
  },
  {
    "title": "Captain Planet and the Planeteers (1990-1996)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Environmental Awareness",
      "Teamwork",
      "Ecosystems",
      "Responsibility",
      "Social Development",
      "Entertainment",
      "Mild Peril"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D Animation with Bold Designs",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "captain-planet-and-the-planeteers-(1990-1996).jpg"
  },
  {
    "title": "Care Bears: Unlock the Magic (2019-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Learning from Mistakes",
      "Emotional Intelligence",
      "Social-Emotional",
      "Social Development",
      "Friendship"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a modern, vibrant design. Color Palette: Bright and pastel colors with high saturation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "care-bears-unlock-the-magi-(2019-present).jpg"
  },
  {
    "title": "Casper Babypants",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "1-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Music",
      "sing-a-long",
      "Vocabulary",
      "Dance",
      "Relaxation",
      "Repetitive Learning",
      "Language Learning",
      "Literacy",
      "Numeracy",
      "Phonics",
      "Routine",
      "Bedtime Routines",
      "Motor Skills",
      "Sensory Exploration",
      "Cognitive Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Simple Animations or Live-Action with Gentle Imagery",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "casper-babypants.jpg"
  },
  {
    "title": "Charlie's Colorform City",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Preschool-Basics",
      "Shapes",
      "Colours",
      "Critical Thinking",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "charlies-colorform-city.jpg"
  },
  {
    "title": "Chip and Potato",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Overcoming Fears",
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Family Values",
      "Emotional Intelligence",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with soft, rounded designs. Color Palette: Warm and pastel colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "chip-and-potato.jpg"
  },
  {
    "title": "City of friends",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Community Service",
      "Teamwork",
      "Responsibility",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "city-of-friends.jpg"
  },
  {
    "title": "CITY VEHICLES",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Creativity & Imagination",
      "Engineering Concepts",
      "Mechanics",
      "Problem Solving",
      "Teamwork",
      "Music",
      "Entertainment"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation with Bright Colors and Realistic Models",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "city-vehicles.jpg"
  },
  {
    "title": "Clifford the Big Red Dog (2000)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Emotional Intelligence",
      "Social Development",
      "Problem Solving",
      "Friendship",
      "Community"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "clifford-the-big-red-dog-(2000).jpg"
  },
  {
    "title": "Clifford the Big Red Dog (2019)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Emotional Intelligence",
      "Friendship",
      "Problem Solving",
      "Social Development",
      "Community"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "clifford-the-big-red-dog-(2019).jpg"
  },
  {
    "title": "Cloudbabies",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Environmental Awareness",
      "Social-Emotional",
      "Responsibility",
      "Teamwork",
      "Social Development",
      "Routine",
      "Bedtime Routines",
      "Natural World",
      "Natural Science",
      "Relaxation",
      "Nature",
      "sing-a-long"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "cloudbabies.jpg"
  },
  {
    "title": "CoasterFan2105",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Engineering Concepts",
      "Cultural Appreciation",
      "Locomotive History",
      "History",
      "Hobbies",
      "Entertainment",
      "Travel Geography",
      "Curiosity",
      "Machinery",
      "Trains"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "High-Definition Live-Action Footage",
    "dialogue_intensity": "Low",
    "sound_effects_level": "High",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "coasterfan2105.jpg"
  },
  {
    "title": "Cocomelon",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "10 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Shapes",
      "Routine",
      "Social-Emotional",
      "Cognitive Development",
      "Language Learning",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with extremely bright and vivid colors.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "cocomelon.jpg"
  },
  {
    "title": "Codename: Kids Next Door",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Teamwork",
      "Problem Solving",
      "Courage",
      "Mischievous Behaviour",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with stylized character designs. Color Palette: Bright and varied colors with bold outlines.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "codename-kids-next-door.jpg"
  },
  {
    "title": "Colourblocks",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Colours",
      "Shapes",
      "Art",
      "Motor Skills",
      "Colour Combinations"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "colourblocks.jpg"
  },
  {
    "title": "Cosmic kids yoga",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Life Lessons",
      "Positive Engaging Screen-Time",
      "Mindfulness",
      "Exercise",
      "Yoga",
      "Emotional Intelligence",
      "Routine",
      "Sensory Exploration",
      "Relaxation",
      "sing-a-long",
      "Positive Mindset"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Colorful Green Screen Animations",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "cosmic-kids-yoga.jpg"
  },
  {
    "title": "Courage the Cowardly Dog (1999-2002)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "10-14",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Overcoming Fears",
      "Problem Solving",
      "Entertainment",
      "Humor",
      "Courage",
      "Perseverance",
      "Dark Themes",
      "Surreal Imagery",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with surreal and sometimes dark visuals. Color Palette: Varied colors with contrasting dark and bright tones.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Varies",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "courage-the-cowardly-dog-(1999-2002).jpg"
  },
  {
    "title": "Cowboy Jack",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Positive Role Models",
      "Life Lessons",
      "Exploration",
      "Relatable Situations",
      "Vocabulary",
      "Social Development",
      "Social-Emotional",
      "Curiosity",
      "History",
      "Adventure",
      "Discovery",
      "Travel Geography"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Real-World Exploration",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "cowboy-jack.jpg"
  },
  {
    "title": "Curious George (2006-present)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "15 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Motor Skills",
      "Discovery",
      "Science",
      "Curiosity",
      "Exploration"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital hand-drawn 2D artwork animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "curious-george-(2006-present).jpg"
  },
  {
    "title": "Cyberchase (2002-present)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "15 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Problem Solving",
      "Critical Thinking",
      "Math",
      "Science",
      "Entertainment"
    ],
    "interactivity_level": "High",
    "animation_style": "traditional 2D hand-drawn animation. Digital in later series.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "cyberchase-2002-present).jpg"
  },
  {
    "title": "Daniel Tiger's Neighbourhood",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Communication & Expression",
      "Life Lessons",
      "Social-Emotional",
      "Emotional Intelligence",
      "Problem Solving",
      "Social Development",
      "Relatable Situations",
      "Friendship",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "daniel-tigers-neighbourhood.jpg"
  },
  {
    "title": "Danny Go!",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Physical Fitness",
      "Cultural Appreciation",
      "Creativity & Imagination",
      "Preschool-Basics",
      "sing-a-long",
      "Phonics",
      "Entertainment",
      "Interactive Game Elements",
      "Dance",
      "Repetitive Learning",
      "Music",
      "Exercise"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Interactive Elements",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "danny-go!.jpg"
  },
  {
    "title": "Davey and Goliath",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cause and Effect",
      "Life Lessons",
      "Morality",
      "Family Values",
      "Religion",
      "Responsibility",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-Motion Animation using clay figures",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "davey-and-goliath.jpg"
  },
  {
    "title": "De Zoete Zusjes",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "4-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Family Values",
      "Family Relationships",
      "Relatable Situations",
      "Problem Solving",
      "Vocabulary",
      "Dutch Language"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action with Puppetry and Props",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "de-zoete-zusjes.jpg"
  },
  {
    "title": "DG Bible Songs",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Religious Teachings",
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Spiritual Development",
      "Biblical Stories",
      "Religion",
      "sing-a-long",
      "Family Values",
      "Music",
      "Christian Values",
      "Faith",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "high-quality animation and music",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "dg-bible-songs.jpg"
  },
  {
    "title": "Diego",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Environmental Awareness",
      "Animal Behaviour",
      "Wildlife Conservation",
      "Language Learning",
      "Problem Solving",
      "Natural World"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "diego.jpg"
  },
  {
    "title": "Digimon: Digital Monsters",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-14",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Teamwork",
      "Friendship",
      "Perseverance",
      "Entertainment",
      "Adventure",
      "Fantasy Elements",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional 2D Anime-style Animation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "digimon-digital-monsters.jpg"
  },
  {
    "title": "Dino Dana",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-9",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Paleontology",
      "Science",
      "Curiosity",
      "Problem Solving",
      "Critical Thinking",
      "Natural History",
      "Ecosystems"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with CGI Dinosaurs. Color Palette: Natural colors with realistic environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "dino-dana.jpg"
  },
  {
    "title": "Dino Ranch",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Teamwork",
      "Responsibility",
      "Problem Solving",
      "Adventure",
      "Dinosaurs"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "dino-ranch.jpg"
  },
  {
    "title": "Dinosaur train",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Friendship",
      "Paleontology",
      "Natural History",
      "Dinosaurs",
      "Natural World",
      "Exploration",
      "Science"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "dinosaur-train.jpg"
  },
  {
    "title": "Dinotrux",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Teamwork",
      "Entertainment",
      "Problem Solving",
      "Engineering Concepts",
      "Dinosaurs",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed characters and environments. Color Palette: Bright and vivid colors with metallic textures.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "dinotrux.jpg"
  },
  {
    "title": "Doc McStuffins",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Health & Well-being",
      "Social-Emotional",
      "Problem Solving",
      "Emotional Intelligence",
      "Medical Care",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with soft, rounded designs. Color Palette: Bright and cheerful colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "doc-mcstuffins.jpg"
  },
  {
    "title": "Doggyland",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Dance",
      "sing-a-long",
      "Cognitive Development",
      "Literacy",
      "Numeracy",
      "Colours",
      "Shapes",
      "Animals",
      "Social-Emotional",
      "Repetitive Learning",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "3D Animation with Bright Colors and Anthropomorphic Dogs",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "doggyland.jpg"
  },
  {
    "title": "Dora the Explorer (2000-2014)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "2-6",
    "seasons": "8 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Language Learning",
      "Problem Solving",
      "Geography",
      "Teamwork",
      "Cognitive Development",
      "Adventure"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "dora-the-explorer-(2000-2014).jpg"
  },
  {
    "title": "Dragon Ball",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "10-16",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Positive Role Models",
      "Entertainment",
      "Adventure",
      "Martial Arts",
      "Fantasy Elements",
      "Morality",
      "Mild Violent themes",
      "Mild Fantasy Violence",
      "Mild Peril"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Hand-drawn animation (Anime style).",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "dragon-ball.jpg"
  },
  {
    "title": "Dragon Tales",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Emotional Intelligence",
      "Teamwork",
      "Social Development",
      "Social-Emotional",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with soft designs. Color Palette: Pastel colors with whimsical settings.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "dragon-tales.jpg"
  },
  {
    "title": "Duck & Goose",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Problem Solving",
      "Friendship",
      "Social-Emotional",
      "Teamwork",
      "Emotional Intelligence",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "duck-and-goose.jpg"
  },
  {
    "title": "Ed Edd n Eddy",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cause and Effect",
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Humor",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional 2D Animation with exaggerated designs. Color Palette: Bright colors with bold outlines.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "ed-edd-n-eddy.jpg"
  },
  {
    "title": "Elena of Avalor",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "5-9",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Positive Role Models",
      "Leadership",
      "Responsibility",
      "Emotional Intelligence",
      "Morality"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed designs. Color Palette: Bright and vibrant colors with cultural motifs.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "elena-of-avalor.jpg"
  },
  {
    "title": "Elmo's World",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "14 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Preschool-Basics",
      "Motor Skills",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Numeracy",
      "Literacy",
      "Colours",
      "Shapes"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "elmos-world.jpg"
  },
  {
    "title": "English Tree",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Repetitive Learning",
      "Literacy",
      "Phonics",
      "Vocabulary",
      "Music",
      "Numeracy",
      "Colours",
      "Shapes",
      "Cognitive Development",
      "Language Learning",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "2D and 3D Animation with Bright Colors and Simple Characters",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "english-tree.jpg"
  },
  {
    "title": "Ernst, Bobbie en de rest",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Humor",
      "Social Development",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Dutch children's show, Live-Action with comedic elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "ernst-bobbie-en-de-rest.jpg"
  },
  {
    "title": "Fireman Sam (1987)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "15 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "Community Service",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Stop-Motion animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "fireman-sam-(1987).jpg"
  },
  {
    "title": "Fireman Sam (2008)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "Community Service",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "fireman-sam-(2008).jpg"
  },
  {
    "title": "Franklin (1997-2004)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Hand-drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "franklin-(1997-2004).jpg"
  },
  {
    "title": "Franklin and Friends (2011)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Teamwork",
      "Relatable Situations",
      "Problem Solving"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename":   "franklin-and-friends-(2011).jpg"
  },
  {
    "title": "Frog and Toad",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence",
      "Nature",
      "Relatable Situations",
      "Patience"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a hand-drawn aesthetic.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "frog-and-toad.jpg"
  },
  {
    "title": "Gabby's Dollhouse",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "10 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action and 3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "gabbys-dollhouse.jpg"
  },
  {
    "title": "Gecko’s Garage",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Engineering Concepts",
      "Mechanics",
      "Teamwork",
      "Shapes",
      "Colours"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "geckos-garage.jpg"
  },
  {
    "title": "Genevieve playhouse",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Teaching with Toys",
      "Preschool-Basics",
      "Colours",
      "Numeracy",
      "Literacy",
      "Multilingual Learning",
      "Entertainment",
      "Humor",
      "Vocabulary"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action Toy Demonstrations with Bright Colors",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "genevieve-playhouse.jpg"
  },
  {
    "title": "Get Rolling with Otis",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Perseverance",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "get-rolling-with-otis.jpg"
  },
  {
    "title": "Gigantosaurus",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Adventure",
      "Problem Solving",
      "Teamwork",
      "Dinosaurs",
      "Entertainment"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "gigantosaurus-may.jpg"
  },
  {
    "title": "GirlsTtoyZZ",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Teaching with Toys",
      "Early Childhood experiences",
      "Sensory Exploration",
      "Entertainment",
      "Toy Review"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "girlsttoyzz.jpg"
  },
  {
    "title": "Go Go! Cory Carson",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "7 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Relatable Situations",
      "Emotional Intelligence",
      "Vehicle Themes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "go-go-cory-carson.jpg"
  },
  {
    "title": "Go, Dog. Go!",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Critical Thinking",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with stylized character designs based on the original book illustrations. Color Palette: Bright and vivid colors with a focus on primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "go-dog-go!.jpg"
  },
  {
    "title": "Gracie's Corner",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural Appreciation",
      "Cultural & Social",
      "Learning through Songs",
      "Early Childhood experiences",
      "Literacy",
      "Numeracy",
      "Social-Emotional",
      "sing-a-long",
      "Dance",
      "Music",
      "Healthy Eating",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "2D animation with bright, colorful visuals and rhythmic, energetic choreography.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "gracies-corner.jpg"
  },
  {
    "title": "Grizzy and the Lemmings (2016-present)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Communication & Expression",
      "Entertainment",
      "Problem Solving",
      "Humor",
      "Slapstick Comedy",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Very Low",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "grizzy-and-the-lemmings-(2016-present).jpg"
  },
  {
    "title": "Guess How Much I Love You",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Emotional Intelligence",
      "Friendship",
      "Family Values",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "guess-how-much-i-love-you.jpeg"
  },
  {
    "title": "Gullah, Gullah Island",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Life Lessons",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Social Development",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with musical elements. Color Palette: Bright and vibrant colors reflecting the cultural setting.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "gullah-gullah-island.jpg"
  },
  {
    "title": "Gumby: The Movie",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Stop-Motion Animation using clay figures (claymation). Color Palette: Varied colors with a mix of bright and muted tones. Unique aesthetic uncommon in the present day.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Varies",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "gumby-the-movie.jpg"
  },
  {
    "title": "Handyman Hal",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Life Lessons",
      "Engineering Concepts",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Vehicle Themes",
      "STEM",
      "Farm Life",
      "Agriculture",
      "Mechanics",
      "Curiosity",
      "Entertainment",
      "Humor",
      "Safety"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Primarily live-action with occasional animated elements to highlight tools or processes.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "handyman-hal.jpg"
  },
  {
    "title": "He-Man and the Masters of the Universe",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Positive Role Models",
      "Entertainment",
      "Responsibility",
      "Morality",
      "Adventure",
      "Fantasy Elements",
      "Mild Violent themes",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with action-oriented designs. Color Palette: Bright and vivid colors with bold contrasts.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "he-man-and-the-masters-of-the-universe.jpeg"
  },
  {
    "title": "Helper Cars",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Teamwork",
      "Colours",
      "Shapes",
      "Problem Solving",
      "Vehicle Recognition",
      "Entertainment",
      "Mechanics"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation with Bright Colors and Friendly Vehicle Characters",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "helper-cars.jpg"
  },
  {
    "title": "Hero Elementary",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Superhero Themes",
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Curiosity",
      "Critical Thinking",
      "Science"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "hero-elementary.jpeg"
  },
  {
    "title": "Hey Bear Sensory",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "0-3",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Sensory Exploration",
      "Colours",
      "Motor Skills",
      "Music"
    ],
    "interactivity_level": "Low",
    "animation_style": "High-Contrast 3D Animation with Bright Colors and Simple Shapes",
    "dialogue_intensity": "None",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "hey-bear-sensory.jpg"
  },
  {
    "title": "Hey Duggee",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Merit Reward systems",
      "Teamwork",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with simple, geometric shapes and bold outlines. Bright and bold colors with clear contrasts.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "hey-duggee.jpg"
  },
  {
    "title": "Horrid Henry",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Cause and Effect",
      "Morality",
      "Humor",
      "Entertainment",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "horrid-henry.jpg"
  },
  {
    "title": "Hudson’s Playground",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Cultures & Traditions",
      "Life Lessons",
      "Farm Life",
      "Machinery",
      "Agriculture",
      "Outdoor Exploration",
      "Problem Solving",
      "Family Relationships",
      "Curiosity"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-Action Family Videos",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "hudsons-playground.jpg"
  },
  {
    "title": "If You Give a Mouse a Cookie(2015-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Cause and Effect",
      "Creativity & Imagination",
      "Problem Solving",
      "Curiosity",
      "Critical Thinking",
      "Cognitive Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "if-you-give-a-mouse-a-cookie(2015-present).jpg"
  },
  {
    "title": "In the Night Garden (07-09)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Sensory Exploration",
      "Repetitive Learning",
      "Motor Skills",
      "Cognitive Development"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-action costume performances combined with CGI-enhanced environments",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "in-the-night-garden-(07-09).jpg"
  },
  {
    "title": "It's a Big Big World",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Science",
      "Friendship",
      "Nature",
      "Ecosystems",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with CGI backgrounds.Color Palette: Soft, natural colors with earthy tones.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "its-a-big-big-world.jpeg"
  },
  {
    "title": "Johnson & Friends",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live action with costumed characters",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "johnson-and-friends.jpg"
  },
  {
    "title": "JoJo & Gran Gran",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultures & Traditions",
      "Family Relationships",
      "Family Values",
      "Relatable Situations",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a hand-drawn aesthetic.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename":   "jojo-and-gran-gran.jpg"
  },
  {
    "title": "Juf Roos",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Learning through Songs",
      "Dutch Language",
      "Language Learning",
      "sing-a-long",
      "Dance",
      "Literacy",
      "Music"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action with Colorful Costumes and Simple Sets",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "juf-roos.jpeg"
  },
  {
    "title": "JunyTony - Songs and Stories",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Learning from Mistakes",
      "Learning through Songs",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Literacy",
      "Numeracy",
      "sing-a-long",
      "Dance",
      "Phonics",
      "Vocabulary",
      "Music",
      "Routine",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Animation with Vibrant Colors and Cute Characters",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "junytony-songs-and-stories.jpg"
  },
  {
    "title": "KarazahChannel",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Cultural & Social",
      "Language Learning",
      "Arabic Language Learning",
      "Literacy",
      "sing-a-long",
      "Reading Comprehension",
      "Music",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "Mix of 3D CGI animations for the characters and settings",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "karazahchannel.jpg"
  },
  {
    "title": "Katuri tv",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Nature",
      "Family Relationships",
      "Animals",
      "Nature Sounds",
      "Problem Solving",
      "Social Development",
      "Entertainment",
      "Humor",
      "Social-Emotional"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "katuri-tv.jpg"
  },
  {
    "title": "Kazwa and Bilal",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Cultural & Social",
      "Curiosity",
      "Social-Emotional",
      "Relatable Situations",
      "Religion",
      "Morality"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "kazwa-and-bilal.jpeg"
  },
  {
    "title": "Kid-E-Cats",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Family Relationships",
      "Family Values",
      "Social-Emotional",
      "Social Development",
      "Relatable Situations"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "kid-e-cats.jpeg"
  },
  {
    "title": "Kids 2 kids",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "5-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Learn Through Play",
      "Creativity & Imagination",
      "Social-Emotional",
      "Humor",
      "Outdoor Exploration",
      "DIY Projects",
      "Curiosity",
      "Silly Comedy"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-Action Family Videos",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "kids-to-kids.jpg"
  },
  {
    "title": "Kipper(1997-2000)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Friendship"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional hand-drawn 2D animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low",
    "image_filename": "kipper(1997-2000).jpg"
  },
  {
    "title": "Kiri and Lou",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Nature",
      "Emotional Intelligence",
      "Mindfulness"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-motion animation using clay and paper cutouts",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "kiri-and-lou.jpg"
  },
  {
    "title": "Laurie Berkner",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Physical Fitness",
      "Early Childhood experiences",
      "Music",
      "sing-a-long",
      "Social-Emotional",
      "Literacy",
      "Entertainment",
      "Dance"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-Action with Colorful Green Screen Animations",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "laurie-berkner.jpg"
  },
  {
    "title": "Lazytown",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Physical Fitness",
      "Positive Role Models",
      "Healthy Eating",
      "Teamwork",
      "Problem Solving",
      "Exercise",
      "Motor Skills",
      "sing-a-long",
      "Dance",
      "Perseverance"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "lazytown.jpg"
  },
  {
    "title": "Leo the Truck",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Vehicle Themes",
      "Colours",
      "Shapes",
      "Vehicle Recognition",
      "Mechanics",
      "Curiosity"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "leo-the-truck.jpg"
  },
  {
    "title": "Leo the wildlife ranger",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Wildlife Exploration",
      "Wildlife Conservation",
      "Animals",
      "Animal Behaviour",
      "Curiosity",
      "Problem Solving",
      "Nature",
      "Natural World",
      "Responsibility"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation with detailed depictions of animals and environments.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "leo-the-wild-live-ranger.jpg"
  },
  {
    "title": "Les' Copaque Production - Upin & Ipin",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "4-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural & Social",
      "Learning from Mistakes",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Morality",
      "Responsibility",
      "Relatable Situations",
      "Family Relationships",
      "Family Values",
      "Social-Emotional",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with vibrant colors and detailed environments reflecting Malaysian village life.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "les-copaque-production-upin-and-ipin.jpg"
  },
  {
    "title": "LifeKids (Blinky’s Bible adventures)",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Religious Teachings",
      "Cultures & Traditions",
      "Cultural & Social",
      "Cause and Effect",
      "Life Lessons",
      "Spiritual Development",
      "Religion",
      "Family Relationships",
      "Relatable Situations",
      "Social-Emotional",
      "Morality",
      "sing-a-long",
      "Repetitive Learning",
      "Dance"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename":   "lifekids-(blinkys-bible-adventures).jpg"
  },
  {
    "title": "Listener Kids",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Cultures & Traditions",
      "Cultural & Social",
      "Spiritual Development",
      "Faith",
      "Biblical Stories",
      "Religion",
      "Christian Values",
      "Morality",
      "sing-a-long",
      "Social Development",
      "Positive Mindset"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action and animated elements, featuring colorful visuals and friendly characters.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "listener-kids.jpeg"
  },
  {
    "title": "Little Angel",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "1 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Routine",
      "Social-Emotional",
      "sing-a-long",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "little-angel.jpg"
  },
  {
    "title": "Little Bear",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Family Relationships",
      "Social Development",
      "Emotional Intelligence",
      "Family Values"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Hand-Drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "little-bear.jpg"
  },
  {
    "title": "Little Einsteins (2005-2009)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Music",
      "Art",
      "Problem Solving",
      "Cognitive Development",
      "Teamwork",
      "History"
    ],
    "interactivity_level": "High",
    "animation_style": "digital 2D animation. CGI for the Rocket ship and certain elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "little-einsteins-(2005-2009).jpg"
  },
  {
    "title": "Llama Llama (2018-2019)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Family Values",
      "Problem Solving",
      "Relatable Situations",
      "Social Development",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "llama-llama-(2018-2019).jpg"
  },
  {
    "title": "Lucas the spider(2021)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Overcoming Fears",
      "Emotional Intelligence",
      "Relatable Situations",
      "Creativity & Imagination",
      "Recurring Antagonist"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "lucas-the-spider(2021).jpg"
  },
  {
    "title": "Lyla in the loop",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "STEM",
      "Problem Solving",
      "Motor Skills",
      "Curiosity",
      "Critical Thinking",
      "Relatable Situations"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "lyla-in-the-loop.jpg"
  },
  {
    "title": "Maddie's Do You Know?",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Curiosity",
      "Science",
      "Technology",
      "Exploration",
      "Engineering Concepts",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "maddies-do-you-know.jpeg"
  },
  {
    "title": "Maggie and the Ferocious Beast",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with simple, childlike designs. Color Palette: Bright and pastel colors with minimal backgrounds.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "maggie-and-the-ferocious-beast.jpg"
  },
  {
    "title": "maizenofficial",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "7-12, 12+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Arts & Crafts",
      "Creativity & Imagination",
      "Building and Design",
      "Entertainment",
      "Humor",
      "Problem Solving",
      "Critical Thinking",
      "MineCraft",
      "Interactive Game Elements"
    ],
    "interactivity_level": "Low",
    "animation_style": "Real In Game Video Footage",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "maizenofficial.jpg"
  },
  {
    "title": "Marcus Level",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-11",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Fantasy Elements",
      "Problem Solving",
      "Perseverance",
      "Adventure",
      "Teamwork",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "marcus-level.jpeg"
  },
  {
    "title": "Masha and the Bear",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "5 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Patience",
      "Humor",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation with high-quality, detailed visuals",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "masha-and-the-bear.jpg"
  },
  {
    "title": "Mickey Mouse Clubhouse",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Early Childhood experiences",
      "Preschool-Basics",
      "Numeracy",
      "Teamwork",
      "Shapes",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "mickey-mouse-clubhouse.jpeg"
  },
  {
    "title": "Miffy and friends",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Early Childhood experiences",
      "Social-Emotional",
      "Social Development",
      "Teamwork",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Stop-Motion Animation with Simple Designs, Emphasizes clear shapes and actions easily understood by young viewers.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "miffy-and-friends.jpeg"
  },
  {
    "title": "Milo",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural & Social",
      "Career Exploration",
      "Teamwork",
      "Problem Solving",
      "Responsibility",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "milo.jpg"
  },
  {
    "title": "Minno - Bible Stories for Kids",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Religious Teachings",
      "Positive Role Models",
      "Spiritual Development",
      "Cultures & Traditions",
      "Cultural & Social",
      "Biblical Stories",
      "Faith",
      "Religion",
      "Christian Values",
      "Morality",
      "Positive Mindset"
    ],
    "interactivity_level": "High",
    "animation_style": "Varies across series, primarily 2D and 3D animations with colorful visuals and relatable character designs.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "minno-bible-stories-for-kids.jpg"
  },
  {
    "title": "Minuscule",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Environmental Awareness",
      "Storytelling without Dialogue",
      "Creativity & Imagination",
      "Insect Behaviour",
      "Nature",
      "Nature Sounds",
      "Entertainment",
      "Humor",
      "Relaxation",
      "Music",
      "Natural World",
      "ASMR",
      "Silly Comedy",
      "Ecosystems",
      "Slice of Life",
      "Light Hearted"
    ],
    "interactivity_level": "Low",
    "animation_style": "Combination of CGI and Real-Life Backdrops",
    "dialogue_intensity": "None",
    "sound_effects_level": "High",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "minuscule.jpg"
  },
  {
    "title": "Mira, Royal Detective",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Positive Role Models",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Problem Solving",
      "Critical Thinking",
      "Mystery",
      "Adventure",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with Vibrant Colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "mira-royal-detective.jpg"
  },
  {
    "title": "Miss Katie Sings",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Communication & Expression",
      "Cultural & Social",
      "Learning through Songs",
      "Music",
      "sing-a-long",
      "Positive Mindset",
      "Social-Emotional",
      "Courage",
      "Mindfulness",
      "Diversity",
      "Political Leanings"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action Performances with Simple Props and Backgrounds",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low",
    "image_filename": "miss-katie-sings.jpg"
  },
  {
    "title": "Miss Moni",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Preschool-Basics",
      "Early Childhood experiences",
      "Literacy",
      "Numeracy",
      "Vocabulary",
      "Music",
      "Language Learning",
      "Phonics",
      "sing-a-long",
      "Cognitive Development",
      "Auslan (Sign Language)"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action and 2D Animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Varies",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "miss-moni.jpg"
  },
  {
    "title": "Miss Rachel",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "1-4",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Phonics",
      "Language Learning",
      "Speech Development",
      "sing-a-long",
      "Cognitive Development",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "Primarily live-action with Miss Rachel interacting directly with the audience. Some Puppet and 2D Animation use",
    "dialogue_intensity": "High",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "miss-rachel.jpg"
  },
  {
    "title": "Mister Maker",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "Creativity & Imagination",
      "Arts & Crafts",
      "Curiosity",
      "Motor Skills",
      "Art",
      "Colours"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with colorful crafts and animated segments. Color Palette: Bright and varied colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "mister-maker.jpg"
  },
  {
    "title": "Mister Rogers' Neighbourhood",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "31 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Elementary-Basics",
      "Life Lessons",
      "Social-Emotional",
      "Social Development",
      "Literacy",
      "Emotional Intelligence",
      "Relatable Situations",
      "Relaxation",
      "Community Service",
      "Problem Solving",
      "Critical Thinking",
      "Family Values",
      "sing-a-long",
      "Morality",
      "Friendship",
      "Creativity & Imagination"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with puppet segments. Color Palette: Soft, natural colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "mister-rogers-neighbourhood.jpg"
  },
  {
    "title": "Molly of Denali",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Problem Solving",
      "Adventure",
      "Exploration",
      "Nature",
      "Natural World",
      "Mystery"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with cultural representation. Color Palette: Bright colors reflecting Alaskan landscapes.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "molly-of-denali.jpeg"
  },
  {
    "title": "Moominvalley",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Friendship",
      "Fantasy Elements",
      "Emotional Intelligence",
      "Relaxation"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "moominvalley.jpeg"
  },
  {
    "title": "Moon and Me",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Early Childhood experiences",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-Motion Animation with soft toys. Color Palette: Soft, soothing colors.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "moon-and-me.jpg"
  },
  {
    "title": "Mother goose club",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Creativity & Imagination",
      "Literacy",
      "Numeracy",
      "Language Learning",
      "Speech Development",
      "sing-a-long",
      "Dance",
      "Music",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Colorful Costumes and Simple Sets",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "mother-goose-club.jpg"
  },
  {
    "title": "Mr Bean Cartoon",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Entertainment",
      "Problem Solving",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Digital Animation with exaggerated expressions. Color Palette: Bright colors with bold contrasts.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "mr-bean-cartoon.jpeg"
  },
  {
    "title": "Mr. Monkey, Monkey Mechanic",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "STEM",
      "Mechanics",
      "Problem Solving",
      "Engineering Concepts"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "mr-monkey-monkey-mechanic.jpg"
  },
  {
    "title": "MyGov Sign Language for Kids-ASL",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "0-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Memory Exercises",
      "American Sign Language",
      "Communication & Expression",
      "Deaf Community",
      "Visual Demonstrations",
      "Language Learning",
      "Cognitive Development",
      "Motor Skills",
      "Literacy"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action demonstrations combined with animated segments to illustrate signs and concepts effectively.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "mygosignlanguageforkids-asl.jpg"
  },
  {
    "title": "Nanalan",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Creativity & Imagination",
      "Preschool-Basics",
      "Communication & Expression",
      "Vocabulary",
      "Social-Emotional",
      "Social Development",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Puppet-based animation with simple sets and characters, creating a unique and engaging visual experience",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "nanalan.jpeg"
  },
  {
    "title": "Nick Cope's Popcast",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Communication & Expression",
      "Creativity & Imagination",
      "Social-Emotional",
      "Emotional Intelligence",
      "sing-a-long",
      "Dance",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "nick-copes-popcast.jpg"
  },
  {
    "title": "Ninja Kids",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "5-12",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Superhero Themes",
      "Creativity & Imagination",
      "Positive Role Models",
      "Physical Fitness",
      "Exercise",
      "Adventure",
      "Entertainment",
      "Skit Comedy",
      "Choreographed Action Scenes",
      "Outdoor Exploration",
      "Courage",
      "Confidence Building",
      "Martial Arts",
      "Mild Violent themes",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action videos with dynamic editing and occasional special effects to enhance the viewing experience.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "ninja-kids.jpg"
  },
  {
    "title": "Ninjago",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Complex & Emotional Themes",
      "Teamwork",
      "Perseverance",
      "Courage",
      "Problem Solving",
      "Morality",
      "Entertainment",
      "Mild Fantasy Violence",
      "Mild Violent themes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "ninjago.jpg"
  },
  {
    "title": "Noddy Original Series (1998)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Social Development"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Stop-Motion with simple models. Color Palette: Bright but soft colors.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "noddy-original-series-(1998).jpeg"
  },
  {
    "title": "Noddy, Toyland Detective (2016)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Social Development"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "noddy-toyland-detective-(2016).jpeg"
  },
  {
    "title": "Noodle & Pals",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Social-Emotional",
      "Language Learning",
      "Cognitive Development",
      "Music",
      "Literacy",
      "Numeracy"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "noodle-and-pals.jpg"
  },
  {
    "title": "Noodle and Bun",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Storytelling without Dialogue",
      "Creativity & Imagination",
      "Humor",
      "Silly Comedy",
      "Captivating Visuals",
      "Friendship",
      "Animals"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogue_intensity": "None",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "noodle-and-bun.jpg"
  },
  {
    "title": "Numberblocks (2017-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "7 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Elementary-Basics",
      "Numeracy",
      "Problem Solving",
      "Math",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "numberblocks-(2017-present).jpg"
  },
  {
    "title": "Odd Squad",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Math",
      "Numeracy",
      "Teamwork",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action and CGI animation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "odd-squad.jpg"
  },
  {
    "title": "Oggy and the Cockroaches",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "7 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Entertainment",
      "Slapstick Comedy",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with exaggerated and dynamic character movements.",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "oggy-and-the-cockroaches.jpg"
  },
  {
    "title": "Olivia",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a unique visual style resembling charcoal drawings with splashes of color.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "olivia.jpg"
  },
  {
    "title": "Omar and hana",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultural & Social",
      "Cultures & Traditions",
      "Religion",
      "Family Values",
      "Morality",
      "Emotional Intelligence",
      "sing-a-long",
      "Relatable Situations",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "omar-and-hana.jpg"
  },
  {
    "title": "One Piece",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "12+",
    "seasons": "1500+ Episodes",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Creativity & Imagination",
      "Complex & Emotional Themes",
      "Teamwork",
      "Perseverance",
      "Morality",
      "Entertainment",
      "Humor",
      "Slapstick Comedy",
      "Emotional Intelligence",
      "Friendship",
      "Social-Emotional",
      "Adventure",
      "Mild Violent themes",
      "Mild Fantasy Violence",
      "Mild Peril",
      "Mild Mature Themes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D Animation with a distinctive anime style, featuring exaggerated expressions, dynamic action sequences, and detailed environments.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "one-piece.jpg"
  },
  {
    "title": "Oswald",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Social-Emotional",
      "Social Development",
      "Critical Thinking",
      "Conflict Resolution",
      "Emotional Intelligence",
      "Relatable Situations",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "oswald.jpg"
  },
  {
    "title": "Out of the Box",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Arts & Crafts",
      "Music",
      "Motor Skills",
      "Social-Emotional",
      "Colours",
      "Shapes",
      "Art"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "out-of-the-box.jpeg"
  },
  {
    "title": "Pajanimals",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Overcoming Fears",
      "Bedtime Routines",
      "Social-Emotional",
      "Relaxation",
      "Family Relationships",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with colorful characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "Pajanimals.jpg"
  },
  {
    "title": "Paw patrol",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "11 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Community Service",
      "Teamwork",
      "Problem Solving",
      "Courage"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "paw-patrol.jpeg"
  },
  {
    "title": "Peg+Cat",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Math",
      "Problem Solving",
      "Critical Thinking",
      "Adventure",
      "Perseverance"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a hand-drawn, sketch-like aesthetic.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "peg-cat.jpeg"
  },
  {
    "title": "Peppa pig (2004-present)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "8 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Friendship",
      "Routine",
      "Social Development",
      "Relatable Situations",
      "Tantrums",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "peppa-pig-(2004-present).jpg"
  },
  {
    "title": "Pete The Cat",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Music",
      "Emotional Intelligence",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital animation with a hand-drawn look",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "pete-the-cat-3272.jpg"
  },
  {
    "title": "Peter Rabbit(2012-2016)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Adventure",
      "Problem Solving",
      "Nature",
      "Teamwork",
      "Courage"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "peter-rabbit(2012-2016).jpg"
  },
  {
    "title": "Phineas and Ferb",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Problem Solving",
      "Curiosity",
      "Adventure",
      "Humor",
      "Family Relationships",
      "Entertainment",
      "Engineering Concepts",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Digital Animation with stylized, geometric designs. Bright and vivid colors with detailed backgrounds.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "phineas-and-ferb.jpeg"
  },
  {
    "title": "Pingu",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "6 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Emotional Intelligence",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional Stop-Motion (claymation)",
    "dialogue_intensity": "None",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "pingu.jpeg"
  },
  {
    "title": "Pinkalicious & Peterrific",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Art",
      "Music",
      "Problem Solving",
      "Teamwork",
      "Motor Skills"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "pinkalicious-and-peterrific.jpg"
  },
  {
    "title": "Pip and Posy",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cause and Effect",
      "Friendship",
      "Social-Emotional",
      "Problem Solving",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Relatable Situations",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "pip-and-posy.jpeg"
  },
  {
    "title": "Pipi Mā",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Te reo Māori language development",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Māori immersion preschool",
      "Cultural & Social",
      "Numeracy",
      "Literacy",
      "Traditional Narratives",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Animation with Cultural Themes and Soft Colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "pipi-mā.jpg"
  },
  {
    "title": "PJ Masks",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Superhero Themes",
      "Creativity & Imagination",
      "Entertainment",
      "Morality",
      "Social Development",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "pj-masks.jpeg"
  },
  {
    "title": "Planet earth",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "8+",
    "seasons": "1 Season",
    "avg_episode_length": "Very Long (>30m)",
    "themes": [
      "Environmental Awareness",
      "Natural World",
      "Nature",
      "Natural History",
      "Wildlife Exploration",
      "Science",
      "Realistic Depictions of Nature"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-action nature documentary with high-definition footage. Natural colors showcasing diverse ecosystems.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "planet-earth.jpeg"
  },
  {
    "title": "Play School",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "59 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Shapes",
      "Colours",
      "Social-Emotional",
      "Problem Solving",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "play-school.jpeg"
  },
  {
    "title": "Pocoyo",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-4",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Cultural & Social",
      "Language Learning",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Curiosity",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "pocoyo.jpeg"
  },
  {
    "title": "Pokemon",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "25 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Overcoming Fears",
      "Friendship",
      "Teamwork",
      "Wildlife Exploration",
      "Entertainment",
      "Humor",
      "Exploration",
      "Perseverance",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "traditional and Digital hand-drawn 2D animation. Anime style",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "pokemon.jpg"
  },
  {
    "title": "Postman Pat (1981–2008)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "9 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Community Service",
      "Problem Solving",
      "Responsibility",
      "Teamwork",
      "Entertainment"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional Stop-Motion animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "postman-pat-(1981–2008).jpg"
  },
  {
    "title": "Postman Pat: Special Delivery Service (2008–2017)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Community Service",
      "Problem Solving",
      "Responsibility",
      "Teamwork",
      "Entertainment"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "postman-pat-special-delivery-service.jpg"
  },
  {
    "title": "Puffin Rock",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Environmental Awareness",
      "Nature",
      "Wildlife Exploration",
      "Family Relationships",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "puffin-rock.jpg"
  },
  {
    "title": "Puppy Dog Pals",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Adventure",
      "Problem Solving",
      "Teamwork",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "puppy-dog-pals.jpeg"
  },
  {
    "title": "Raa Raa the Noisy Lion",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Communication & Expression",
      "Social-Emotional",
      "Social Development",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "raa-raa-the-noisy-lion.jpg"
  },
  {
    "title": "Rainbow Ruby",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Career Exploration",
      "Curiosity",
      "Emotional Intelligence",
      "Fantasy Elements",
      "Problem Solving",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "rainbow-ruby.jpg"
  },
  {
    "title": "Rapunzel's Tangled Adventure",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Life Lessons",
      "Overcoming Fears",
      "Adventure",
      "Courage",
      "Friendship",
      "Emotional Intelligence",
      "Problem Solving",
      "Perseverance",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate",
    "image_filename": "rapunzels-tangled-adventure.jpg"
  },
  {
    "title": "RC Action Channel",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Engineering Concepts",
      "Vehicle Themes",
      "Vehicle Recognition",
      "Machinery",
      "Relaxation",
      "Entertainment",
      "Hobbies",
      "Mechanics"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-action footage of RC vehicles in operation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "rc-action-channel.jpeg"
  },
  {
    "title": "Reading rainbow",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "5-9",
    "seasons": "16 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Cultural Appreciation",
      "Life Lessons",
      "Positive Role Models",
      "Creativity & Imagination",
      "Social-Emotional",
      "Literacy",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "reading-rainbow.jpg"
  },
  {
    "title": "Ready, Steady, Wiggle!",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Physical Fitness",
      "Elementary-Basics",
      "sing-a-long",
      "Dance",
      "Music",
      "Friendship",
      "Motor Skills",
      "Repetitive Learning",
      "Entertainment",
      "Numeracy",
      "Literacy",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "ready-steady-wiggle.jpg"
  },
  {
    "title": "Reef School",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Environmental Awareness",
      "Ecosystems",
      "Marine Biology",
      "Curiosity",
      "Social Development",
      "Emotional Intelligence",
      "Wildlife Conservation",
      "Natural World",
      "Teamwork"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "reef-school.jpg"
  },
  {
    "title": "Rhyme Time Town",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Language Learning",
      "Literacy",
      "sing-a-long",
      "Cognitive Development",
      "Social-Emotional",
      "Repetitive Learning",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with extremely bright and vivid colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "rhyme-time-town.jpg"
  },
  {
    "title": "Robocar Poli",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural & Social",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Adventure",
      "Community Service",
      "Social Development",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "robocar-poli.jpg"
  },
  {
    "title": "Rolie Polie Olie",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Critical Thinking"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "rolie-polie-olie.jpg"
  },
  {
    "title": "Rosie & Jim",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "8 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Repetitive Learning",
      "Language Learning",
      "sing-a-long",
      "Problem Solving",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with colorful characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "rosie-and-jim.jpg"
  },
  {
    "title": "Rosie's Rules",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Social-Emotional",
      "Problem Solving",
      "Family Relationships",
      "Responsibility",
      "Teamwork",
      "Social Development",
      "Family Values",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "rosies-rules.jpg"
  },
  {
    "title": "Rugrats",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "9 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social Development",
      "Social-Emotional",
      "Relatable Situations",
      "Emotional Intelligence",
      "Problem Solving",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with a distinctive, sketchy style. Muted and earthy tones, reflecting a somewhat realistic environment.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "rugrats.jpg"
  },
  {
    "title": "Rugrats (2021 Reboot)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social Development",
      "Social-Emotional",
      "Relatable Situations",
      "Emotional Intelligence",
      "Problem Solving",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "rugrats-(2021-reboot).jpg"
  },
  {
    "title": "Ryan's World",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "0-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Science",
      "Creativity & Imagination",
      "Learn Through Play",
      "STEM",
      "Geography",
      "Numeracy",
      "Unboxing Videos",
      "Entertainment",
      "Humor",
      "Silly Comedy",
      "Family Relationships",
      "Family Values",
      "Teamwork",
      "Toy Review"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action with Bright Colors, High Energy, and Occasional Animations",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "ryans-world.jpeg"
  },
  {
    "title": "Sagwa, the Chinese Siamese Cat",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Cultural & Social",
      "Friendship",
      "Problem Solving",
      "Family Values"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D animation with a hand-drawn look.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "sagwa-the-chinese-siamese-cat.jpeg"
  },
  {
    "title": "Sarah and Duck",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Relatable Situations",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital animation with a hand-drawn look",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "sarah-and-duck.jpeg"
  },
  {
    "title": "Scooby-Doo, Where Are You! (1969–1970)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "traditional hand-drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Low",
    "image_filename": "scooby-doo-(1969-1970).jpg"
  },
  {
    "title": "Sea of love",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Teamwork",
      "Marine Biology",
      "Wildlife Conservation",
      "Friendship",
      "Natural World",
      "Responsibility",
      "Social-Emotional",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "sea-of-love.jpg"
  },
  {
    "title": "Sesame Street (1969-present)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "54 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Cultural & Social",
      "STEM",
      "Elementary-Basics",
      "Cultures & Traditions",
      "Social Development",
      "Routine",
      "Motor Skills",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "Various Art Styles",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "sesame-street-(1969-present).jpeg"
  },
  {
    "title": "Shaun the Sheep",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "6 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Teamwork"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional Stop-Motion (claymation) digital enhancements may be used for post-production",
    "dialogue_intensity": "None",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "shaun-the-sheep.jpg"
  },
  {
    "title": "Sid the Science Kid",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Critical Thinking",
      "Problem Solving",
      "Science",
      "Motor Skills",
      "Relatable Situations",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with Motion Capture",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "sid-the-science-kid.jpg"
  },
  {
    "title": "Silly Miss Lily (Paisley's Corner)",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Positive Engaging Screen-Time",
      "Preschool-Basics",
      "Numeracy",
      "Colours",
      "Shapes",
      "Social-Emotional",
      "sing-a-long",
      "Literacy"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Props",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "silly-miss-lily(paisleys-corner).jpg"
  },
  {
    "title": "Simon",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "8 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Friendship",
      "Family Relationships",
      "Emotional Intelligence",
      "Social-Emotional",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate-High",
    "image_filename": "simon.jpeg"
  },
  {
    "title": "Something Special: Hello Mr Tumble",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-6",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Early Childhood experiences",
      "Social-Emotional",
      "Emotional Intelligence",
      "Language Learning",
      "Makaton Sign Language",
      "Learning Disabilities"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "something-special-hello-mr-tumble.jpeg"
  },
  {
    "title": "Sonic the Hedgehog",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Perseverance",
      "Entertainment",
      "Humor",
      "Courage",
      "Adventure",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "sonic-the-hedgehog.jpg"
  },
  {
    "title": "Spanish with liz",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "0-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Learning through Songs",
      "Spanish Language",
      "Language Learning",
      "Music",
      "Vocabulary",
      "Phonics",
      "Emotional Intelligence",
      "Routine",
      "Healthy Eating"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Educational Props and Colorful Backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "spanish-with-liz.jpg"
  },
  {
    "title": "Spidey and his amazing friends (2021-present)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Positive Role Models",
      "Teamwork",
      "Responsibility",
      "Entertainment",
      "Mischievous Behaviour",
      "Mild Peril"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Very High",
    "image_filename": "spidey-and-his-amazing-friends-(2021-present).jpg"
  },
  {
    "title": "Spirit Riding Free",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "8 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Responsibility",
      "Perseverance",
      "Adventure",
      "Horses",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "spirit-riding-free.jpg"
  },
  {
    "title": "SpongeBob SquarePants",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-12",
    "seasons": "15 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Friendship",
      "Problem Solving",
      "Entertainment",
      "Surreal Imagery",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D animation with expressive and exaggerated character designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "spongebob-squarepants.jpg"
  },
  {
    "title": "Star Wars: Young Jedi Adventures",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cause and Effect",
      "Cultures & Traditions",
      "Positive Role Models",
      "Entertainment",
      "Courage",
      "Adventure",
      "Conflict Resolution",
      "Friendship",
      "Teamwork",
      "Responsibility",
      "Fantasy Elements",
      "Morality",
      "Mild Intense Scenes",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "star-wars-young-jedi-adventures.jpeg"
  },
  {
    "title": "Stella and Sam",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Exploration",
      "Emotional Intelligence",
      "Curiosity",
      "Family Relationships",
      "Social-Emotional",
      "Social Development",
      "Natural World"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "stella-and-sam.jpg"
  },
  {
    "title": "Steve and Maggie",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Every Day Concepts",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Language Learning",
      "Vocabulary",
      "Phonics",
      "Repetitive Learning",
      "Literacy",
      "Social Development",
      "Social-Emotional",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Puppet Interaction and Simple Animations",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "steve-and-maggie.jpg"
  },
  {
    "title": "Stick man",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Family Values",
      "Perseverance",
      "Family Relationships",
      "Courage",
      "Social-Emotional",
      "Mild Peril"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "stick-man.jpg"
  },
  {
    "title": "Stillwater (2020-present)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Mindfulness",
      "Emotional Intelligence",
      "Problem Solving",
      "Social-Emotional",
      "Conflict Resolution"
    ],
    "interactivity_level": "High",
    "animation_style": "Mix of 3D CGI animations for the characters and settings",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate-High",
    "image_filename": "stillwater-(2020-present).jpg"
  },
  {
    "title": "Story Time Book: Read-Along",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "1 Season",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Literacy",
      "Language Learning",
      "Reading Comprehension",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "Illustrations or Minimal Animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "story-time-book-read-along.jpg"
  },
  {
    "title": "Storybots",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Literacy",
      "Reading Comprehension",
      "Problem Solving",
      "Curiosity",
      "Social Development",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of 2D and 3D Animation with Mixed Media",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "storybots.jpg"
  },
  {
    "title": "Super Monsters",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Creativity & Imagination",
      "Social-Emotional",
      "Friendship",
      "Emotional Intelligence",
      "Self Discipline",
      "Problem Solving",
      "Social Development",
      "Entertainment"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "super-monsters.jpeg"
  },
  {
    "title": "SUPER SIMPLE SONG",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Storytelling without Dialogue",
      "Literacy",
      "Numeracy",
      "Shapes",
      "Colours",
      "sing-a-long",
      "Social Development",
      "Social-Emotional",
      "Dance",
      "Motor Skills",
      "Language Learning",
      "Cognitive Development",
      "Music",
      "Vocabulary"
    ],
    "interactivity_level": "High",
    "animation_style": "2D and 3D Animation with Bright Colors and Simple Characters",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "super-simple-song.jpeg"
  },
  {
    "title": "Super Why!",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Numeracy",
      "Literacy",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright colors and clear designs. Bright and vivid colors focused on storybook settings.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "super-why.jpeg"
  },
  {
    "title": "Superbook",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Cause and Effect",
      "Positive Role Models",
      "Religion",
      "Morality",
      "History",
      "Literacy",
      "Courage",
      "Repetitive Learning"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "superbook.jpg"
  },
  {
    "title": "Super Kitties",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Superhero Themes",
      "Teamwork",
      "Problem Solving",
      "Responsibility",
      "Adventure",
      "Entertainment",
      "Friendship"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "superkitties.jpg"
  },
  {
    "title": "Superworm",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Nature",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with detailed textures and natural settings. Earthy tones with vivid highlights.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "superworm.jpg"
  },
  {
    "title": "Takaro Tribe",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Religion",
      "Literacy",
      "History",
      "Music",
      "Routine",
      "Repetitive Learning",
      "Social-Emotional",
      "Language Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "takaro-tribe.jpg"
  },
  {
    "title": "Tangled: Before Ever After",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Very Long (>30m)",
    "themes": [
      "Overcoming Fears",
      "Adventure",
      "Friendship",
      "Courage",
      "Social Development",
      "Perseverance",
      "Fantasy Elements",
      "Responsibility",
      "Nature",
      "Mild Peril",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "tangled-before-ever-after.jpeg"
  },
  {
    "title": "Tayo the Little Bus",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Vehicle Recognition",
      "Social Development",
      "Teamwork",
      "Problem Solving",
      "Community Service",
      "Responsibility",
      "Entertainment",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "tayo-the-little-bus.jpg"
  },
  {
    "title": "Team Umizoomi",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Math",
      "Problem Solving",
      "Critical Thinking",
      "Teamwork",
      "Numeracy",
      "Shapes"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "team-umizoomi.jpg"
  },
  {
    "title": "Teen Titans Go!",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "9 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Superhero Themes",
      "Humor",
      "Teamwork",
      "Friendship",
      "Adventure",
      "Entertainment",
      "Surreal Imagery",
      "Mild Mature Themes"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "teen-titans-go.jpeg"
  },
  {
    "title": "Teletubbies (2015-2018)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Repetitive Learning",
      "Sensory Exploration",
      "Routine",
      "Bedtime Routines"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live action costumed. some digital elements",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "High",
    "image_filename":   "teletubbies-(2015-2018).jpg"
  },
  {
    "title": "Teletubbies (1997-2001)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Repetitive Learning",
      "Sensory Exploration",
      "Routine",
      "Bedtime Routines"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live action costumed. some digital elements",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "teletubbies-(1997-2001).jpg"
  },
  {
    "title": "The Adventures of Abney & Teal",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Social-Emotional",
      "Nature"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-motion animation with hand-crafted models.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "the-adventures-of-abney-and-teal.jpeg"
  },
  {
    "title": "The Adventures of Paddington (2019)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural & Social",
      "Emotional Intelligence",
      "Problem Solving",
      "Family Values",
      "Social Development",
      "Family Relationships"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-adventures-of-paddington-(2019).jpg"
  },
  {
    "title": "The Adventures of Paddington Bear Original Series (1997–2000)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Friendship",
      "Emotional Intelligence",
      "Social-Emotional",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with a unique style combining stop-motion elements.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "the-adventures-of-paddington-bear-original-series-(1997–2000).jpg"
  },
  {
    "title": "The Adventures of Teddy Ruxpin",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Friendship",
      "Adventure",
      "Problem Solving",
      "Morality",
      "Fantasy Elements",
      "Perseverance",
      "Courage",
      "Social-Emotional",
      "Mild Peril"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-adventures-of-teddy-ruxpin.jpg"
  },
  {
    "title": "The adventures of the gummi bears",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Overcoming Fears",
      "Adventure",
      "Friendship",
      "Fantasy Elements",
      "Problem Solving",
      "Courage",
      "Perseverance",
      "Mild Violent themes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D Anime-style Animation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "the-adventures-of-the-gummi-bears.jpg"
  },
  {
    "title": "The Backyardigans",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Communication & Expression",
      "Creativity & Imagination",
      "Teamwork",
      "Music",
      "Problem Solving",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "the-backyardigans.jpg"
  },
  {
    "title": "The Bear Construction",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Engineering Concepts",
      "Storytelling without Dialogue",
      "Construction",
      "Teamwork",
      "Problem Solving",
      "Machinery",
      "Vehicle Recognition",
      "Entertainment",
      "Curiosity",
      "ASMR"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation with detailed depictions of construction sites and machinery",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-bear-construction.jpg"
  },
  {
    "title": "The Bernstein Bears",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Relatable Situations",
      "Social Development",
      "Social-Emotional",
      "Family Relationships",
      "Family Values",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D animation with a hand-drawn look.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-bernstein-bears.jpg"
  },
  {
    "title": "The Big Comfy Couch",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-6",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Overcoming Fears",
      "Social-Emotional",
      "Problem Solving",
      "Motor Skills",
      "Numeracy",
      "Literacy",
      "Exercise"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action costumed puppetry with detailed sets.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-big-comfy-couch.jpg"
  },
  {
    "title": "The Busy World of Richard Scarry",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Learning from Mistakes",
      "Cultural & Social",
      "Problem Solving",
      "Social-Emotional",
      "Community Service",
      "Relatable Situations",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-busy-world-of-richard-scarry.jpg"
  },
  {
    "title": "The Care Bears (1985-1988)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Learning from Mistakes",
      "Emotional Intelligence",
      "Social-Emotional",
      "Social Development",
      "Friendship"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D animation with soft character designs. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "the-care-bears-(1985-1988).jpg"
  },
  {
    "title": "The Cat in the Hat",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Science",
      "Nature",
      "Exploration",
      "Problem Solving",
      "Geography",
      "Ecosystems",
      "Curiosity",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "the-cat-in-the-hat.jpg"
  },
  {
    "title": "The Clangers (BBC)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Spacetime and the Cosmos",
      "Creativity & Imagination",
      "Problem Solving",
      "Social-Emotional",
      "Social Development",
      "Exploration",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional Stop-Motion animation with live-action model sets",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename":     "the-clangers-(bbc).jpeg"
  },
  {
    "title": "The Crocodile Hunter (1996-2007):",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "8+",
    "seasons": "8 Seasons",
    "avg_episode_length": "Very Long (>30m)",
    "themes": [
      "Environmental Awareness",
      "Overcoming Fears",
      "Positive Role Models",
      "Wildlife Exploration",
      "Wildlife Conservation",
      "Nature",
      "Natural World",
      "Animals",
      "Animal Behaviour",
      "Curiosity",
      "Ecosystems",
      "Intense Animal Interaction"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action documentary featuring wildlife. Color Palette: Natural colors showcasing diverse environments.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-crocodile-hunter-(1996-2007).jpg"
  },
  {
    "title": "The Enchanted World of Brambly Hedge",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Natural World",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Curiosity",
      "Mindfulness",
      "Nature"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-motion animation with hand-crafted models.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-enchanted-world-of-brambly-hedge.jpg"
  },
  {
    "title": "The Epic Tales of Captain Underpants (2018-present)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Friendship",
      "Problem Solving",
      "Entertainment",
      "Mischievous Behaviour",
      "Toilet Humour"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D animation with a comic-book aesthetic",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-epic-tales-of-captain-underpants-(2018-present).jpeg"
  },
  {
    "title": "The fixies",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "STEM",
      "Problem Solving",
      "Curiosity",
      "Teamwork",
      "Science",
      "Motor Skills",
      "Critical Thinking",
      "Technology",
      "Engineering Concepts"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-fixies.jpeg"
  },
  {
    "title": "The Land Before Time (2016)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Perseverance",
      "Adventure",
      "Entertainment",
      "Dinosaurs",
      "Mild Peril",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-land-before-time-(2016).jpg"
  },
  {
    "title": "The Land of Boggs",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "12+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural & Social",
      "Life Lessons",
      "Creativity & Imagination",
      "Learning from Mistakes",
      "Complex Emotional Themes",
      "Entertainment",
      "Humor",
      "Silly Comedy",
      "Skit Comedy",
      "Slice of Life",
      "Light Hearted",
      "Social-Emotional",
      "Relatable Situations",
      "Surreal Imagery",
      "Mature Themes"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D animation with simple, colorful designs and expressive characters.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-land-of-boggs.jpeg"
  },
  {
    "title": "The Lion Guard",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Natural World",
      "Wildlife Conservation",
      "Wildlife Exploration",
      "Courage",
      "Responsibility"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-lion-guard.jpg"
  },
  {
    "title": "The Little Mermaid 1992 series",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Adventure",
      "Friendship",
      "Courage",
      "Marine Biology",
      "Entertainment",
      "Teamwork",
      "Mild Peril"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with Bold Designs",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-little-mermaid-1992-series.jpg"
  },
  {
    "title": "The Magic School Bus Rides Again",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "STEM",
      "Exploration",
      "Critical Thinking",
      "Discovery",
      "Curiosity",
      "Nature",
      "Science"
    ],
    "interactivity_level": "High",
    "animation_style": "Traditional hand-drawn 2D animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "the-magic-school-bus-rides-again.jpg"
  },
  {
    "title": "The Magic School Bus (1994-1997)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "STEM",
      "Nature",
      "Science",
      "Engineering Concepts",
      "Curiosity",
      "Experimentation"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Traditional hand-drawn",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-magic-school-bus-(1994-1997).jpg"
  },
  {
    "title": "The Mik Maks",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Preschool-Basics",
      "Elementary-Basics",
      "sing-a-long",
      "Dance",
      "Instruments",
      "Music",
      "Motor Skills",
      "Exercise",
      "Phonics",
      "Vocabulary",
      "Entertainment",
      "Silly Comedy",
      "Family Values",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action Performances with Colorful Costumes and Sets. Some 2D animations",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-mik-maks.jpg"
  },
  {
    "title": "The New Adventures of Winnie the Pooh",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Social Development",
      "Emotional Intelligence",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional Hand-Drawn 2D animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "the-new-adventures-of-winnie-the-pooh.jpg"
  },
  {
    "title": "The Octonauts",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Problem Solving",
      "Ecosystems",
      "Curiosity",
      "Natural World",
      "Marine Biology",
      "Teamwork"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-octonauts.jpg"
  },
  {
    "title": "The Oddbods Show",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Friendship",
      "Entertainment",
      "Social-Emotional",
      "Slapstick Comedy",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "the-oddbods-show.jpg"
  },
  {
    "title": "The Snoopy Show",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultural & Social",
      "Creativity & Imagination",
      "Entertainment",
      "Social Development",
      "Friendship"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-snoopy-show.jpg"
  },
  {
    "title": "The Stinky & Dirty Show (2016-2019)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Teamwork",
      "Perseverance",
      "Engineering Concepts",
      "Critical Thinking"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-stinky-and-dirty-show-(2016-2019).jpg"
  },
  {
    "title": "The Wiggles",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Physical Fitness",
      "Preschool-Basics",
      "Music",
      "Dance",
      "sing-a-long",
      "Motor Skills",
      "Social-Emotional",
      "Entertainment"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "the-wiggles.jpg"
  },
  {
    "title": "Theodore Tugboat",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Adventure",
      "Responsibility",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "theodore-tugboat.jpeg"
  },
  {
    "title": "Thomas & Friends (1984-2008)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "25 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional Stop-Motion animation with live-action model sets",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "thomas-and-friends-(1984-2008).jpg"
  },
  {
    "title": "Thomas & Friends: All Engines Go (2021)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Responsibility",
      "Problem Solving"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "thomas-and-friends-all-engines-go-(2021).jpg"
  },
  {
    "title": "Time for school",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Arts & Crafts",
      "Preschool-Basics",
      "Elementary-Basics",
      "Relatable Situations",
      "Social Development",
      "Social-Emotional",
      "Routine",
      "Motor Skills"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "High",
    "image_filename": "time-for-school.jpeg"
  },
  {
    "title": "Tinga Tinga Tales",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "4-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural Appreciation",
      "Cultural & Social",
      "Learning from Mistakes",
      "African folk tales",
      "Cultures & Traditions",
      "Animals",
      "Curiosity",
      "Nature Sounds",
      "Traditional Narratives",
      "Geography",
      "Animal Behaviour",
      "Social-Emotional",
      "Morality",
      "Friendship",
      "Responsibility",
      "Humor",
      "Entertainment",
      "Light Hearted"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Animation Inspired by Tinga Tinga African Art",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "tinga-tinga-tales.jpg"
  },
  {
    "title": "Tom & Jerry",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-12",
    "seasons": "1 Season",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Slapstick Comedy",
      "Rivalry",
      "Entertainment",
      "Music",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Digital Animation with exaggerated and dynamic character movements.",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "tom-and-jerry.jpeg"
  },
  {
    "title": "Topsy and Tim",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Social-Emotional",
      "Relatable Situations",
      "Family Relationships",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "High",
    "image_filename": "topsy-and-tim.jpeg"
  },
  {
    "title": "Tots TV",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultures & Traditions",
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Literacy",
      "Curiosity",
      "Language Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with puppet segments. Color Palette: Soft, natural colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "tots-tv.jpg"
  },
  {
    "title": "Tractor Ted",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Agriculture",
      "Machinery",
      "Farm Life",
      "Animals",
      "Nature",
      "Animal Behaviour"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action and 2D Animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "tractor-ted.jpg"
  },
  {
    "title": "Trash truck",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "trash-truck.jpeg"
  },
  {
    "title": "Tumble leaf",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Nature",
      "Motor Skills",
      "Critical Thinking",
      "Exploration",
      "Natural World",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 3D Stop-Motion",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "tumble-leaf.jpg"
  },
  {
    "title": "Tweedy & Fluff",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Life-Lessons",
      "Exploring Emotions",
      "Communication and Expression",
      "Stop-Motion",
      "Slice of Life",
      "Friendship",
      "Pet Ownership",
      "Empathy",
      "Gentle Humour",
      "Problem-Solving",
      "Relatable-Situations"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional stop-frame animation techniques, meticulously capturing each movement of the handcrafted puppets frame by frame to create fluid and engaging motion.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low",
    "image_filename": "tweedy-and-fluff.jpg"
  },
  {
    "title": "Ultimate Spiderman",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Morality",
      "Responsibility",
      "Courage",
      "Problem Solving",
      "Entertainment",
      "Humor",
      "Mild Violent themes",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate",
    "image_filename": "ultimate-spiderman.jpeg"
  },
  {
    "title": "VeggieTales",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Religion",
      "Responsibility",
      "Family Values",
      "History",
      "Literacy",
      "Social Development",
      "Community Service",
      "Biblical Teachings"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Very High",
    "image_filename": "veggietales.jpg"
  },
  {
    "title": "VeggieTales in the House (2014-2016)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Religion",
      "Responsibility",
      "Family Values",
      "History",
      "Literacy",
      "Social Development",
      "Community Service",
      "Biblical Teachings"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "veggietales-in-the-house.jpg"
  },
  {
    "title": "Vlad and Nikki",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learn Through Play",
      "Creativity & Imagination",
      "Problem Solving",
      "Adventure",
      "Family Relationships",
      "Multilingual Learning",
      "Humor",
      "Entertainment",
      "Hyper-Activity"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-action videos featuring Vlad and Niki, often enhanced with special effects and animations to create engaging and fantastical elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "vlad-and-nikki.jpg"
  },
  {
    "title": "Vooks",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Literacy",
      "Reading Comprehension",
      "Vocabulary",
      "Language Learning",
      "Phonics",
      "Cognitive Development",
      "Music",
      "Speech Development",
      "Read-Along"
    ],
    "interactivity_level": "High",
    "animation_style": "Animated adaptations of children's books, featuring subtle animations that complement the original illustrations, accompanied by professional narration and sound effects.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "Vooks.jpg"
  },
  {
    "title": "Wacky Races",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Adventure",
      "Humor",
      "Entertainment",
      "Perseverance",
      "Slapstick Comedy",
      "Mechanics",
      "Engineering Concepts",
      "Lack of Consequences",
      "Mild Intense Scenes",
      "Mild Violent themes"
    ],
    "interactivity_level": "Low",
    "animation_style": "Cartoonish 2D animation style",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate",
    "image_filename": "wacky-races.jpeg"
  },
  {
    "title": "Wallykazam",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Motor Skills",
      "Problem Solving",
      "Language Learning",
      "Literacy",
      "Fantasy Elements",
      "Reading Comprehension",
      "Phonics"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Very High",
    "image_filename": "wallykazam.jpg"
  },
  {
    "title": "What's New, Scooby-Doo? (2002–2006)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "whats-new-scooby-doo.jpeg"
  },
  {
    "title": "Wishenpoof",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Social Development",
      "Morality",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "wishenpoof.jpeg"
  },
  {
    "title": "Woolly and Tig",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Overcoming Fears",
      "Social-Emotional",
      "Relatable Situations",
      "Courage",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Combination of live-action and CGI animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "wolly-and-tig.jpg"
  },
  {
    "title": "Work It Out Wombats",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Problem Solving",
      "Teamwork",
      "Critical Thinking",
      "Social-Emotional",
      "Relatable Situations"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "work-it-out-wombats.jpg"
  },
  {
    "title": "Xavier Riddle and the Secret Museum",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Life Lessons",
      "History",
      "Morality",
      "Problem Solving",
      "Curiosity",
      "Courage",
      "Adventure"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "Xavier Riddle and the Secret Museum.jpg"
  },
  {
    "title": "Zaky & friends",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Life Lessons",
      "Cultures & Traditions",
      "Learning through Songs",
      "Cultural Appreciation",
      "Spiritual Development",
      "Quranic stories",
      "Religion",
      "Literacy",
      "Numeracy",
      "Social Development",
      "Social-Emotional",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "zaky-and-friends.jpg"
  },
  {
    "title": "Zoboomafoo (1999-2001)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Wildlife Exploration",
      "Animals",
      "Curiosity",
      "Nature",
      "Wildlife Conservation"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action, puppetry, and animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "zoboomafoo.jpg"
  }
]
</file>

<file path="package.json">
{
  "name": "sensory-friendly-shows",
  "version": "1.0.0",
  
  "main": "server/server.js",
  "scripts": {
    
    "start": "node server/server.js",
    "dev": "nodemon server/server.js",
    "test": "echo \"Error: no test specified\" && exit 1",
    
    "import-data": "node database/import_data.js",
    
    "update-images": "node scripts/updateImageFilenames.js"
  },
  
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^5.1.0", 
    "sqlite3": "^5.1.7"
    
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}
</file>

<file path="server/api/shows.js">
// server/api/shows.js
const express = require('express');
const { runQuery, getSingleRow, getThemesForShows, attachThemesToShowList } = require('../db/queries'); // Import query helpers

const router = express.Router();

// GET /api/shows - List shows with filtering, sorting, pagination
router.get('/', async (req, res) => {
    console.log(`>>> API route /shows called with query:`, req.query);
    const {
        search, themes, minAge, maxAge, stimScoreMin, stimScoreMax,
        interactivity, dialogue, sceneFreq,
        sortBy = 'title', sortOrder = 'asc', page = 1, limit = 12 // Default limit changed
    } = req.query;

    const pageNum = parseInt(page, 10) || 1;
    const limitNum = parseInt(limit, 10) || 12; // Use updated default
    const offset = (pageNum - 1) * limitNum;

    const validSortOrders = ['asc', 'desc'];
    const order = validSortOrders.includes(sortOrder.toLowerCase()) ? sortOrder.toLowerCase() : 'asc';
    // Whitelist valid sort columns more carefully
    const validSortColumns = ['title', 'stimulation_score', 'min_age', 'max_age']; // Add more as needed
    const sortColumn = validSortColumns.includes(sortBy.toLowerCase()) ? sortBy.toLowerCase() : 'title';

    // --- Build SQL Query ---
    let queryBase = `SELECT DISTINCT s.id, s.title, s.stimulation_score, s.target_age_group, s.image_filename, s.interactivity_level FROM shows s`;
    let countBase = `SELECT COUNT(DISTINCT s.id) as total FROM shows s`;
    let joins = '';
    let conditions = [];
    let queryParams = [];
    let countParams = [];

    // Theme Filtering
    if (themes) {
        const themeList = themes.split(',').map(t => t.trim()).filter(t => t);
        if (themeList.length > 0) {
            joins += ` JOIN show_themes st ON s.id = st.show_id JOIN themes t ON st.theme_id = t.id`;
            const themePlaceholders = themeList.map(() => '?').join(',');
            conditions.push(`t.name IN (${themePlaceholders}) COLLATE NOCASE`);
            queryParams.push(...themeList);
        }
    }

    // Text Search (Title)
    if (search) {
        conditions.push(`s.title LIKE ? COLLATE NOCASE`);
        queryParams.push(`%${search}%`);
    }

    // Age Range Filter (Overlap Logic)
    if (minAge !== undefined && maxAge !== undefined) {
         const minAgeNum = parseInt(minAge, 10); const maxAgeNum = parseInt(maxAge, 10);
         if (!isNaN(minAgeNum) && !isNaN(maxAgeNum)) {
             conditions.push(`( (s.max_age >= ? AND s.min_age <= ?) OR (s.min_age IS NULL OR s.max_age IS NULL) )`);
             queryParams.push(minAgeNum, maxAgeNum);
         }
    }

    // Stimulation Score Range
    if (stimScoreMin !== undefined) { const scoreMin = parseInt(stimScoreMin, 10); if (!isNaN(scoreMin)) { conditions.push(`s.stimulation_score >= ?`); queryParams.push(scoreMin); } }
    if (stimScoreMax !== undefined) { const scoreMax = parseInt(stimScoreMax, 10); if (!isNaN(scoreMax)) { conditions.push(`s.stimulation_score <= ?`); queryParams.push(scoreMax); } }

    // Other Text Filters (Exact Match, Case-Insensitive)
    if (interactivity) { conditions.push(`s.interactivity_level = ? COLLATE NOCASE`); queryParams.push(interactivity); }
    if (dialogue) { conditions.push(`s.dialogue_intensity = ? COLLATE NOCASE`); queryParams.push(dialogue); }
    if (sceneFreq) { conditions.push(`s.scene_frequency = ? COLLATE NOCASE`); queryParams.push(sceneFreq); }

    // --- Combine Query Parts ---
    let query = queryBase + joins;
    let countQuery = countBase + joins; // Apply joins to count query base as well

    if (conditions.length > 0) {
        const whereClause = ` WHERE ${conditions.join(' AND ')}`;
        query += whereClause;
        countQuery += whereClause;
        countParams = [...queryParams]; // Count params match main query params up to WHERE
    }

    // Add Sorting and Pagination to main query
    query += ` ORDER BY s.${sortColumn} ${order}, s.title ASC LIMIT ? OFFSET ?`;
    queryParams.push(limitNum, offset);

    // --- Execute Queries ---
    try {
        console.log(`Executing Show Query: ${query}`); console.log(`Params:`, queryParams);
        console.log(`Executing Count Query: ${countQuery}`); console.log(`Params:`, countParams);

        const [totalResult, showsResult] = await Promise.all([
            getSingleRow(countQuery, countParams),
            runQuery(query, queryParams)
        ]);

        const totalShows = totalResult?.total || 0;
        const totalPages = Math.ceil(totalShows / limitNum);

        // Fetch and attach themes for the current page's shows
        const showIds = showsResult.map(s => s.id);
        const themesMap = await getThemesForShows(showIds);
        const showsWithThemes = attachThemesToShowList(showsResult, themesMap);

        res.json({ shows: showsWithThemes, totalShows, totalPages, currentPage: pageNum, limit: limitNum });
    } catch (error) {
        console.error(`Error in GET /shows:`, error);
        res.status(500).json({ error: "Failed to retrieve shows. Please try again later." });
    }
});

// GET /api/shows/title/:title - Get show by exact title (Case-Insensitive)
router.get('/title/:title', async (req, res) => {
    const title = decodeURIComponent(req.params.title);
    console.log(`>>> API route /shows/title/:title called with title: ${title}`);
    const sql = `SELECT * FROM shows WHERE title = ? COLLATE NOCASE`;
    try {
        const show = await getSingleRow(sql, [title]);
        if (show) {
             const themesMap = await getThemesForShows([show.id]);
             const showWithThemes = attachThemesToShowList([show], themesMap)[0];
             res.json(showWithThemes);
        } else {
            res.status(404).json({ error: `Show with title "${title}" not found.` });
        }
    } catch (error) {
        console.error(`Error in GET /shows/title/${title}:`, error);
        res.status(500).json({ error: "Failed to retrieve show by title." });
    }
});

// GET /api/shows/compare?ids=1,2,3 - Get multiple shows for comparison
router.get('/compare', async (req, res) => {
    const idString = req.query.ids;
    console.log(`>>> API route /shows/compare called with IDs: ${idString}`);
    if (!idString) return res.status(400).json({ error: "Missing 'ids' query parameter." });

    const ids = idString.split(',')
                       .map(id => parseInt(id.trim(), 10))
                       .filter(id => !isNaN(id) && id > 0);

    if (ids.length === 0) return res.status(400).json({ error: "No valid IDs provided." });
    if (ids.length > 3) return res.status(400).json({ error: "Cannot compare more than 3 shows." });

    const placeholders = ids.map(() => '?').join(',');
    // Select all columns needed for comparison display, including numeric scores for charts
    const sql = `SELECT * FROM shows WHERE id IN (${placeholders})`;

    try {
        const shows = await runQuery(sql, ids);
         if (shows.length === 0) return res.json([]); // Return empty array if no shows found

        const themesMap = await getThemesForShows(ids);
        const showsWithThemes = attachThemesToShowList(shows, themesMap);
        // Ensure order matches input IDs
        const sortedShows = ids.map(id => showsWithThemes.find(s => s.id === id)).filter(Boolean);

        res.json(sortedShows);
    } catch (error) {
        console.error(`Error fetching shows for comparison (IDs: ${ids.join(',')}):`, error);
        res.status(500).json({ error: "Failed to retrieve shows for comparison." });
    }
});

// GET /api/shows/:id - Get single show by ID (MUST be last specific route)
router.get('/:id', async (req, res) => {
    const id = parseInt(req.params.id, 10);
    console.log(`>>> API route /shows/:id called with ID: ${id}`);
    if (isNaN(id) || id <= 0) return res.status(400).json({ error: "Invalid show ID provided." });

    // Select all columns needed for the detail page
    const sql = `SELECT * FROM shows WHERE id = ?`;
    try {
        const show = await getSingleRow(sql, [id]);
        if (show) {
             const themesMap = await getThemesForShows([show.id]);
             const showWithThemes = attachThemesToShowList([show], themesMap)[0];
             res.json(showWithThemes);
        } else {
            res.status(404).json({ error: `Show with ID ${id} not found.` });
        }
    } catch (error) {
        console.error(`Error fetching show ID ${id}:`, error);
        res.status(500).json({ error: "Failed to retrieve show details." });
    }
});

module.exports = router;
</file>

<file path="client/src/components/catalog/FilterPanel.jsx">
// client/src/components/catalog/FilterPanel.jsx
import React, { useState, useEffect } from 'react'; // Standard React imports
import { getThemes } from '../../services/showService'; // To fetch the list of themes

// --- Constants defined OUTSIDE the component (Makes them reusable and keeps component clean) ---
const ageRanges = [
    { label: 'Any Age', value: { min: 0, max: 99 } },
    { label: 'Toddler (0-2)', value: { min: 0, max: 2 } },
    { label: 'Preschool (3-5)', value: { min: 3, max: 5 } },
    { label: 'Early Elem. (6-8)', value: { min: 6, max: 8 } },
    { label: 'Late Elem. (9-12)', value: { min: 9, max: 12 } },
    { label: 'Teen (13+)', value: { min: 13, max: 99 } },
];
const interactionLevels = ['High', 'Moderate', 'Low-Moderate', 'Low'];
const dialogueIntensities = ['High', 'Moderate-High', 'Moderate', 'Low-Moderate', 'Low', 'Very Low', 'None'];
const sceneFrequencies = ['Very High', 'High', 'Moderate', 'Low', 'Very Low'];

// --- Component Definition ---
// We define the component's logic here.
// It receives properties (props) from its parent (CatalogPage):
// - filters: The current filter values (except search) derived from the URL
// - onFilterChange: A function to call when a NON-search filter changes
// - searchInputValue: The current text typed into the search box
// - onSearchInputChange: A function to call specifically when the search box text changes
const FilterPanelComponent = ({ filters = {}, onFilterChange, searchInputValue, onSearchInputChange }) => {
    // console.log("Rendering FilterPanel. Filters:", filters, "SearchVal:", searchInputValue); // For debugging if needed

    // State for loading themes list
    const [availableThemes, setAvailableThemes] = useState([]);
    const [themesLoading, setThemesLoading] = useState(true);

    // Effect to fetch themes when the component first loads
    useEffect(() => {
        const fetchThemes = async () => {
            try {
                setThemesLoading(true);
                const themesData = await getThemes();
                setAvailableThemes(themesData || []);
            } catch (error) {
                console.error("Error fetching themes for filter:", error);
                // Optionally show an error message to the user here
            } finally {
                setThemesLoading(false);
            }
        };
        fetchThemes();
    }, []); // Empty array means this runs only once on mount

    // --- Event Handler for NON-Search Filters ---
    // This function runs when you change things like Age Range, Themes checkboxes, dropdowns, sliders
    const handleChange = (event) => {
        const { name, value, type, checked } = event.target;

        // Make a copy of the current filters (passed in via props)
        // Exclude 'search' as it's handled separately by onSearchInputChange
        const currentNonSearchFilters = { ...filters };
        delete currentNonSearchFilters.search;

        let updatedFilters = { ...currentNonSearchFilters }; // Start with non-search filters

        // --- Handle Theme Checkboxes ---
        if (type === 'checkbox' && name === 'themes') {
            const currentThemes = filters.themes ? filters.themes.split(',').filter(t => t) : [];
            if (checked) {
                updatedFilters.themes = [...currentThemes, value].join(',');
            } else {
                updatedFilters.themes = currentThemes.filter(theme => theme !== value).join(',');
            }
            // If no themes are selected, remove the 'themes' filter key entirely
            if (!updatedFilters.themes) delete updatedFilters.themes;

        // --- Handle Age Range Radio Buttons ---
        } else if (name === 'ageRange') {
             try {
                // The value is a JSON string like '{"min":3,"max":5}', parse it
                const ageValue = JSON.parse(value);
                // Ensure ageValue is an object with min/max before proceeding
                if (ageValue && typeof ageValue.min === 'number' && typeof ageValue.max === 'number') {
                    if (ageValue.min === 0 && ageValue.max === 99) { // "Any Age" selected
                        // Remove age filters if "Any Age" is chosen
                        delete updatedFilters.minAge;
                        delete updatedFilters.maxAge;
                    } else {
                        // Set specific min/max age filters
                        updatedFilters.minAge = ageValue.min;
                        updatedFilters.maxAge = ageValue.max;
                    }
                } else {
                     console.warn("Invalid age range value received:", value);
                }
             } catch(e) {
                console.error("Error parsing age range value:", value, e);
             }

        // --- Handle Stimulation Score Range Sliders ---
        } else if (name === 'stimScoreMin' || name === 'stimScoreMax') {
            const newValue = parseInt(value, 10);
            // Only update if the parsed value is a valid number
            if (!isNaN(newValue)) {
                 updatedFilters[name] = newValue;

                 // Ensure min score is always less than or equal to max score
                 const currentMin = parseInt(updatedFilters.stimScoreMin || filters.stimScoreMin || '1', 10);
                 const currentMax = parseInt(updatedFilters.stimScoreMax || filters.stimScoreMax || '5', 10);

                 if (name === 'stimScoreMin' && newValue > currentMax) {
                     // If new min is greater than current max, set max to the new min
                     updatedFilters.stimScoreMax = newValue;
                 } else if (name === 'stimScoreMax' && newValue < currentMin) {
                      // If new max is less than current min, set min to the new max
                     updatedFilters.stimScoreMin = newValue;
                 }
             }
        // --- Handle Other Select Dropdowns (Interactivity, Dialogue, Scene Frequency) ---
        } else {
            // If the selected value is empty (e.g., the "-- Any --" option), remove the filter key
            if (value === '') {
                 delete updatedFilters[name];
            } else {
                // Otherwise, set the filter key to the selected value
                updatedFilters[name] = value;
            }
        }

        // Call the onFilterChange function (passed from CatalogPage)
        // This tells CatalogPage about the changes to NON-search filters
        if (onFilterChange) {
             onFilterChange(updatedFilters);
        }
    };

    // --- JSX Rendering (What the component looks like) ---
    return (
        <div className="space-y-5 p-4 bg-white rounded-lg border border-gray-200 shadow-sm"> {/* Added some padding/styling */}

            {/* 1. Show Name Input */}
            <div>
                <label htmlFor="showName" className="block text-sm font-medium text-gray-700 mb-1">Show Name</label>
                <input
                    type="text"
                    id="showName"
                    name="search" // HTML attribute, not directly used for filtering logic here
                    value={searchInputValue} // Display the value from CatalogPage's local search state
                    onChange={onSearchInputChange} // Call the specific handler from CatalogPage when typing
                    placeholder="Enter title..."
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm"
                />
            </div>

            {/* 2. Age Range Radios */}
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Age Range</label>
                <div className="space-y-1">
                    {ageRanges.map(age => (
                        <div key={age.label} className="flex items-center">
                            <input
                                id={`age-${age.label}`}
                                name="ageRange" // Used by `handleChange`
                                type="radio"
                                value={JSON.stringify(age.value)}
                                // Determine if checked based on `filters` prop from CatalogPage
                                checked={
                                    (filters.minAge === undefined && age.value.min === 0 && age.value.max === 99) ||
                                    (String(filters.minAge) === String(age.value.min) && String(filters.maxAge) === String(age.value.max))
                                }
                                onChange={handleChange} // Use the generic handler for non-search filters
                                className="h-4 w-4 text-teal-600 border-gray-300 focus:ring-teal-500"
                            />
                            <label htmlFor={`age-${age.label}`} className="ml-2 block text-sm text-gray-900">
                                {age.label}
                            </label>
                        </div>
                    ))}
                </div>
            </div>

                        {/* 3. Themes Checkboxes */}
                        <div> {/* This is the main container for the Themes filter */}
                <label className="block text-sm font-medium text-gray-700 mb-1">Themes</label>
                <div className="max-h-40 overflow-y-auto border border-gray-200 rounded p-2 space-y-1 bg-gray-50">
                    {themesLoading ? (
                        /* Skeleton Loader for Themes */
                        <div className="space-y-2 animate-pulse">
                            <div className="h-4 bg-gray-300 rounded w-3/4"></div>
                            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
                            <div className="h-4 bg-gray-300 rounded w-5/6"></div>
                        </div>
                    ) : availableThemes.length > 0 ? availableThemes.map(theme => (
                        <div key={theme} className="flex items-center">
                            <input
                                id={`theme-${theme}`}
                                name="themes" // Used by `handleChange`
                                type="checkbox"
                                value={theme}
                                // Determine if checked based on `filters` prop from CatalogPage
                                checked={filters.themes ? filters.themes.split(',').includes(theme) : false}
                                onChange={handleChange} // Use the generic handler
                                className="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500"
                            />
                            <label htmlFor={`theme-${theme}`} className="ml-2 block text-sm text-gray-900">
                                {theme}
                            </label>
                        </div>
                    )) : <p className="text-xs text-gray-500 italic">No themes available.</p>}
                 </div> {/* This closes the inner scrollable div */}
            </div> {/* This closes the main container div for the Themes filter */}


             {/* 4. Interaction Level Dropdown */}
            <div>
                <label htmlFor="interactionLevel" className="block text-sm font-medium text-gray-700 mb-1">Interaction Level</label>
                <select
                    id="interactionLevel"
                    name="interactivity" // Used by `handleChange`, corresponds to filter key
                    value={filters.interactivity || ''} // Display value based on `filters` prop
                    onChange={handleChange} // Use the generic handler
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white"
                    title="How much the show prompts viewer interaction..."
                >
                    <option value="">Any</option>
                    {interactionLevels.map(level => (
                        <option key={level} value={level}>{level}</option>
                    ))}
                </select>
            </div>

            {/* 5. Dialogue Intensity Dropdown */}
             <div>
                <label htmlFor="dialogueIntensity" className="block text-sm font-medium text-gray-700 mb-1">Dialogue Intensity</label>
                <select
                    id="dialogueIntensity"
                    name="dialogue" // Used by `handleChange`
                    value={filters.dialogue || ''} // Display value based on `filters` prop
                    onChange={handleChange} // Use the generic handler
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white"
                    title="Amount and pace of talking..."
                >
                    <option value="">Any</option>
                     {dialogueIntensities.map(level => (
                        <option key={level} value={level}>{level}</option>
                    ))}
                </select>
            </div>

             {/* 6. Scene Frequency Dropdown */}
             <div>
                <label htmlFor="sceneFrequency" className="block text-sm font-medium text-gray-700 mb-1">Scene Frequency</label>
                <select
                    id="sceneFrequency"
                    name="sceneFreq" // Used by `handleChange`
                    value={filters.sceneFreq || ''} // Display value based on `filters` prop
                    onChange={handleChange} // Use the generic handler
                     className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white"
                    title="How quickly scenes change..."
                >
                    <option value="">Any</option>
                    {sceneFrequencies.map(level => (
                        <option key={level} value={level}>{level}</option>
                    ))}
                </select>
            </div>

             {/* 7. Stimulation Score Sliders */}
             <div className="space-y-2">
                 <label className="block text-sm font-medium text-gray-700">
                     Stimulation Score Range
                 </label>
                 {/* Min Score */}
                 <div className='pl-2'>
                      <label htmlFor="stimScoreMin" className="block text-xs font-medium text-gray-700 mb-1">
                         Min: {filters.stimScoreMin || 1} {/* Display value based on `filters` prop */}
                     </label>
                     <input
                         type="range"
                         id="stimScoreMin"
                         name="stimScoreMin" // Used by `handleChange`
                         min="1" max="5" step="1"
                         value={filters.stimScoreMin || '1'} // Display value based on `filters` prop
                         onChange={handleChange} // Use the generic handler
                         className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-teal-600"
                     />
                 </div>
                  {/* Max Score */}
                 <div className='pl-2'>
                      <label htmlFor="stimScoreMax" className="block text-xs font-medium text-gray-700 mb-1">
                         Max: {filters.stimScoreMax || 5} {/* Display value based on `filters` prop */}
                     </label>
                     <input
                         type="range"
                         id="stimScoreMax"
                         name="stimScoreMax" // Used by `handleChange`
                         min="1" max="5" step="1"
                         value={filters.stimScoreMax || '5'} // Display value based on `filters` prop
                         onChange={handleChange} // Use the generic handler
                         className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-teal-600"
                     />
                 </div>
             </div>

            {/* Reset button is handled in CatalogPage, not here */}
        </div>
    );
};

// Wrap the component with React.memo for performance optimization.
// This prevents re-rendering if the props haven't changed.
const FilterPanel = React.memo(FilterPanelComponent);

export default FilterPanel; // Export the optimized version
</file>

<file path="client/src/pages/ComparePage.jsx">
// client/src/pages/ComparePage.jsx
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { getShowList, getShowsForComparison } from '../services/showService';
import ScoreVisual from '../components/shared/ScoreVisual';

// Import Chart.js components
import { Bar, Pie } from 'react-chartjs-2';
import {
    Chart as ChartJS,
    CategoryScale, LinearScale, BarElement, ArcElement, Tooltip, Legend, Title
} from 'chart.js';

// Register Chart.js components
ChartJS.register(CategoryScale, LinearScale, BarElement, ArcElement, Tooltip, Legend, Title);

const placeholderImage = "/images/placeholder-show.png";
const MAX_COMPARE = 3;

// --- Comparison Table Component (Optimized with React.memo) ---
const ComparisonTable = React.memo(({ shows }) => {
    if (!shows || shows.length === 0) return null;

    const renderThemes = (themes) => {
        if (!themes || themes.length === 0) return <span className="text-xs text-gray-400 italic">None</span>;
        const displayThemes = themes.slice(0, 3);
        const hasMore = themes.length > 3;
        return (
            <>
                {displayThemes.map((theme, index) => (
                    <span key={index} className="inline-block bg-teal-100 text-teal-800 text-xs px-2 py-0.5 rounded-full mr-1 mb-1 whitespace-nowrap">
                        {theme}
                    </span>
                ))}
                {hasMore && <span className="text-xs text-gray-400" title={`${themes.length - 3} more`}>...</span>}
            </>
        );
    };

    const DetailRow = ({ label, values, renderFunc }) => (
        <tr className="border-b border-gray-200 hover:bg-gray-50 group">
            <td className="py-2.5 px-3 text-sm font-semibold text-gray-600 text-left sticky left-0 bg-white md:bg-gray-50 group-hover:bg-gray-100 z-10 w-1/4 whitespace-nowrap">
                {label}
            </td>
            {values.map((value, index) => (
                <td key={index} className="py-2.5 px-3 text-sm text-gray-700 text-center w-1/4 min-w-[150px]"> {/* Added min-width */}
                    {renderFunc ? renderFunc(value) : (value ?? <span className="text-gray-400 italic">N/A</span>)}
                </td>
            ))}
            {Array(MAX_COMPARE - values.length).fill(null).map((_, i) => <td key={`empty-${i}`} className="py-2.5 px-3 w-1/4 min-w-[150px]"></td>)}
        </tr>
    );

    // Define data points for table rows
    const dataPoints = [
        { label: "Stimulation Score", key: 'stimulation_score', render: (val) => <ScoreVisual score={val ?? 0} /> },
        { label: "Target Age", key: 'target_age_group' },
        { label: "Interactivity", key: 'interactivity_level' },
        { label: "Dialogue Intensity", key: 'dialogue_intensity' },
        { label: "Scene Frequency", key: 'scene_frequency' },
        { label: "Sound Effects Level", key: 'sound_effects_level' },
        { label: "Music Tempo", key: 'music_tempo' },
        { label: "Total Music Level", key: 'total_music_level' },
        { label: "Animation Style", key: 'animation_style' },
        { label: "Themes", key: 'themes', render: renderThemes },
    ];

    const showTitles = shows.map(s => s?.title || 'N/A');
    const showImages = shows.map(s => s?.image_filename ? `/images/${s.image_filename}` : placeholderImage);

    return (
        <div className="mt-8 overflow-x-auto shadow-md rounded-lg border border-gray-200">
            <table className="min-w-full border-collapse bg-white">
                <thead>
                    <tr className="bg-gray-100">
                        <th className="py-3 px-3 text-sm font-semibold text-gray-700 text-left sticky left-0 bg-gray-100 z-20 w-1/4">Feature</th>
                        {showTitles.map((title, index) => (
                            <th key={index} className="py-3 px-3 text-sm font-semibold text-gray-700 text-center align-top w-1/4 min-w-[150px]"> {/* Added min-width */}
                                <img
                                    src={showImages[index]}
                                    alt={`${title} poster`}
                                    className="w-20 h-auto object-contain mx-auto mb-1 rounded shadow-sm border border-gray-200 bg-white"
                                    onError={(e) => { e.target.onerror = null; e.target.src=placeholderImage }}
                                    loading="lazy"
                                />
                                {title}
                            </th>
                        ))}
                        {Array(MAX_COMPARE - shows.length).fill(null).map((_, i) => <th key={`empty-h-${i}`} className="py-3 px-3 w-1/4 min-w-[150px]"></th>)}
                    </tr>
                </thead>
                <tbody>
                    {dataPoints.map(dp => (
                        <DetailRow
                            key={dp.label}
                            label={dp.label}
                            values={shows.map(s => s ? s[dp.key] : null)}
                            renderFunc={dp.render}
                        />
                    ))}
                </tbody>
            </table>
        </div>
    );
});


// --- Main ComparePage Component ---
const ComparePage = () => {
    const [showList, setShowList] = useState([]);
    const [listLoading, setListLoading] = useState(true);
    const [listError, setListError] = useState(null);
    const [selectedIds, setSelectedIds] = useState(() => Array(MAX_COMPARE).fill(''));
    const [comparisonData, setComparisonData] = useState([]);
    const [compareLoading, setCompareLoading] = useState(false);
    const [compareError, setCompareError] = useState(null);

    // Fetch show list for dropdowns on mount
    useEffect(() => {
        let isMounted = true;
        setListLoading(true); setListError(null);
        getShowList()
            .then(data => { if (isMounted) setShowList(Array.isArray(data) ? data : []); })
            .catch(err => { if (isMounted) setListError(err.message || "Failed to load show list."); })
            .finally(() => { if (isMounted) setListLoading(false); });
        return () => { isMounted = false; };
    }, []);

    // Fetch comparison data when selected IDs change
    useEffect(() => {
        let isMounted = true;
        const idsToCompare = selectedIds.filter(id => id && String(id).trim() !== '');
        if (idsToCompare.length > 0) {
            setCompareLoading(true); setCompareError(null);
            getShowsForComparison(idsToCompare)
                .then(data => { if (isMounted) setComparisonData(Array.isArray(data) ? data : []); })
                .catch(err => {
                     if (isMounted) {
                         setCompareError(err.message || "Failed to load comparison data.");
                         setComparisonData([]);
                     }
                 })
                .finally(() => { if (isMounted) setCompareLoading(false); });
        } else {
            setComparisonData([]); setCompareError(null); setCompareLoading(false);
        }
        return () => { isMounted = false; };
    }, [selectedIds]);

    // Handler for dropdown selection change
    const handleSelectChange = useCallback((index, event) => {
        const newSelectedId = event.target.value;
        setSelectedIds(prev => {
            const newState = [...prev];
            // Prevent selecting the same show in multiple dropdowns
             if (newSelectedId && newState.some((id, i) => id === newSelectedId && i !== index)) {
                 alert("This show is already selected in another slot."); // Simple user feedback
                 return prev; // Don't update state if already selected
             }
            newState[index] = newSelectedId;
            return newState;
        });
    }, []); // Removed selectedIds dependency as we use functional update

    // --- Prepare Chart Data using useMemo ---
    const comparisonChartData = useMemo(() => {
        if (!comparisonData || comparisonData.length === 0) {
            return { barChartData: null, pieChartDataList: [] };
        }

        // 1. Bar Chart Data (Stimulation Scores)
        const barLabels = comparisonData.map(s => s?.title || 'Unknown');
        const barScores = comparisonData.map(s => s?.stimulation_score ?? 0);
        const barColors = ['rgba(75, 192, 192, 0.7)', 'rgba(255, 159, 64, 0.7)', 'rgba(153, 102, 255, 0.7)'];
        const barBorderColors = barColors.map(c => c.replace('0.7', '1'));

        const barChartData = {
            labels: barLabels,
            datasets: [{
                label: 'Overall Stimulation Score (1-5)', data: barScores,
                backgroundColor: barColors.slice(0, comparisonData.length),
                borderColor: barBorderColors.slice(0, comparisonData.length),
                borderWidth: 1, barThickness: 50, maxBarThickness: 70,
            }]
        };

        // 2. Pie Chart Data (Individual Breakdowns)
        const factorLabels = ['Dialogue', 'Scene Freq.', 'Sound FX', 'Music'];
        const factorColors = [
            'rgba(54, 162, 235, 0.7)', 'rgba(255, 159, 64, 0.7)',
            'rgba(255, 99, 132, 0.7)', 'rgba(75, 192, 192, 0.7)'
        ];

        const pieChartDataList = comparisonData.map(show => {
            if (!show) return null;
            const scores = [
                show.dialogue_intensity_num ?? 0, show.scene_frequency_num ?? 0,
                show.sound_effects_level_num ?? 0, show.total_music_level_num ?? 0
            ];
            const total = scores.reduce((sum, s) => sum + s, 0);
            const percentages = total > 0 ? scores.map(s => (s / total) * 100) : [0, 0, 0, 0];
            return {
                title: show.title,
                data: {
                    labels: factorLabels,
                    datasets: [{
                        label: 'Factor Contribution (%)', data: percentages,
                        backgroundColor: factorColors, borderColor: '#ffffff', borderWidth: 1,
                    }]
                }
            };
        }).filter(Boolean);

        return { barChartData, pieChartDataList };

    }, [comparisonData]);

    // --- Chart Options ---
     const commonPieOptions = useMemo(() => ({
        responsive: true, maintainAspectRatio: false,
        plugins: {
            legend: { display: true, position: 'bottom', labels:{ boxWidth: 10, padding: 10, font: { size: 10 } } },
            title: { display: false },
            tooltip: { callbacks: { label: ctx => `${ctx.label}: ${ctx.parsed.toFixed(1)}%` } }
        },
    }), []);

    const barOptions = useMemo(() => ({
        responsive: true, maintainAspectRatio: false, indexAxis: 'x',
        scales: { y: { beginAtZero: true, suggestedMax: 5, ticks: { stepSize: 1 } } },
        plugins: {
            legend: { display: false }, title: { display: false },
            tooltip: { callbacks: { label: ctx => `${ctx.dataset.label}: ${ctx.parsed.y}` } }
        }
    }), []);

    // --- Render Selectors ---
    const renderSelectors = () => {
        if (listLoading) return Array.from({ length: MAX_COMPARE }).map((_, i) => <div key={i} className="h-10 bg-gray-200 rounded animate-pulse"></div>);
        if (listError) return <div className={`col-span-1 md:col-span-${MAX_COMPARE} text-red-600 p-2 text-center`}>Error loading list: {listError}</div>;
        if (showList.length === 0) return <div className={`col-span-1 md:col-span-${MAX_COMPARE} text-gray-500 p-2 text-center`}>No shows available to compare.</div>;

        return selectedIds.map((selectedId, index) => (
            <div key={index}>
                <label htmlFor={`select-show-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                    {`Show #${index + 1}`}
                </label>
                <select
                    id={`select-show-${index}`} value={selectedId ?? ''} onChange={(e) => handleSelectChange(index, e)}
                    disabled={listLoading || !!listError}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white disabled:bg-gray-100 disabled:cursor-not-allowed"
                >
                     <option value="">-- Select a Show --</option>
                     {showList.map(show => (
                         <option key={show.id} value={show.id} disabled={selectedIds.includes(String(show.id)) && selectedId !== String(show.id)}>
                             {show.title}
                         </option>
                     ))}
                 </select>
            </div>
        ));
    };

    return (
        <div className="max-w-7xl mx-auto px-4 py-8">
            <h1 className="text-3xl font-bold text-center text-teal-700 mb-8">Compare Shows</h1>

            {/* --- Show Selection --- */}
            <div className={`grid grid-cols-1 md:grid-cols-${MAX_COMPARE} gap-4 mb-8 bg-gray-50 p-4 rounded-lg border border-gray-200 shadow-sm`}>
                {renderSelectors()}
            </div>

             {/* --- Comparison Loading/Error/Display Area --- */}
            <div className="mt-6 min-h-[400px]">
                 {compareLoading && <p className="text-center text-gray-500 italic mt-10 text-lg animate-pulse">Loading comparison data...</p>}
                 {compareError && <p className="text-center text-red-600 mt-6 bg-red-100 p-4 rounded border border-red-300">{compareError}</p>}

                 {!compareLoading && !compareError && comparisonData.length === 0 && (
                     <p className="text-center text-gray-500 mt-10 italic text-lg">Select 1 to {MAX_COMPARE} shows above to see the comparison.</p>
                 )}

                 {!compareLoading && !compareError && comparisonData.length > 0 && (
                     <div className='space-y-12'>
                         {/* Comparison Table */}
                         <ComparisonTable shows={comparisonData} />

                         {/* --- Charts Section --- */}
                         <div className="space-y-10">
                             {/* Bar Chart: Overall Score Comparison */}
                             {comparisonChartData.barChartData && (
                                <div className="border border-gray-200 rounded-lg p-4 md:p-6 shadow-sm bg-white">
                                    <h2 className="text-xl font-semibold text-center text-gray-700 mb-5">Overall Stimulation Score Comparison</h2>
                                    <div className="relative h-80 max-w-2xl mx-auto"> {/* Constrain width */}
                                        <Bar data={comparisonChartData.barChartData} options={barOptions} />
                                    </div>
                                </div>
                             )}
                             {/* Pie Charts: Individual Breakdowns */}
                             {comparisonChartData.pieChartDataList.length > 0 && (
                                <div className="border border-gray-200 rounded-lg p-4 md:p-6 shadow-sm bg-white">
                                    <h2 className="text-xl font-semibold text-center text-gray-700 mb-5">Sensory Profile Breakdown Comparison</h2>
                                    <div className={`grid grid-cols-1 sm:grid-cols-${Math.min(comparisonChartData.pieChartDataList.length, 3)} gap-6 md:gap-8 items-start`}>
                                        {comparisonChartData.pieChartDataList.map((pieData, index) => (
                                             <div key={index} className="text-center flex flex-col items-center">
                                                 <h3 className="text-base font-medium text-gray-700 mb-2 truncate w-full px-2" title={pieData.title}>{pieData.title}</h3>
                                                 <div className="relative h-60 md:h-64 w-full max-w-[280px]">
                                                     <Pie data={pieData.data} options={commonPieOptions} />
                                                 </div>
                                             </div>
                                         ))}
                                    </div>
                                </div>
                             )}
                         </div>
                     </div>
                 )}
             </div>
        </div>
    );
};

export default ComparePage;
</file>

<file path="client/src/services/showService.js">
// client/src/services/showService.js
import axios from 'axios';

// The base URL for our API. Uses the Vite proxy during development.
const API_BASE_URL = '/api';

// Create an axios instance (optional, but good practice for setting defaults)
const apiClient = axios.create({
    baseURL: API_BASE_URL,
    timeout: 15000, // Increased timeout slightly (e.g., 15 seconds)
});

// --- Helper to Format Error Messages ---
const formatErrorMessage = (error, context) => {
    let message = `An unknown error occurred ${context}.`;
    // Check if the error is an Axios cancellation
    if (axios.isCancel(error)) {
        message = `Request cancelled ${context}.`;
        console.log(message); // Log cancellations differently if needed
        // Return a specific error type or message for cancellations
        return "Request cancelled.";
    } else if (error.response) {
        // Server responded with a status code outside 2xx range
        const status = error.response.status;
        const serverError = error.response.data?.error || `Server responded with status ${status}`;
        message = `${serverError} ${context}.`;
        if (status === 404 && (context.includes("ID") || context.includes("title"))) {
             message = `Resource not found ${context}.`;
        } else if (status >= 500) {
            message = `Server error (${status}) ${context}. Please try again later.`;
        } else if (status === 400) {
             message = `Invalid request ${context}. Check parameters. (${serverError})`;
        }
    } else if (error.request) {
        // Request was made but no response received (network error, server down)
        message = `Network error: Could not connect to the server ${context}.`;
    } else {
        // Something else happened in setting up the request
        message = error.message ? `${error.message} ${context}.` : message;
    }
    console.error(`Error ${context}:`, message, error);
    return message; // Return the formatted message
};

/**
 * Fetches a list of shows with filtering, sorting, and pagination.
 * Returns an object like { shows: [], totalShows: 0, ... } or throws a formatted error.
 */
export const getShows = async (filters = {}, page = 1, limit = 21, options = {}) => {
    const context = "while fetching shows";
    try {
        const cleanedFilters = { ...filters };
        Object.keys(cleanedFilters).forEach(key => (cleanedFilters[key] == null || cleanedFilters[key] === '') && delete cleanedFilters[key]);
        const params = { ...cleanedFilters, page, limit };
        console.log('Fetching shows with params:', params);

        const response = await apiClient.get('/shows', { params, signal: options.signal });

        if (response?.data && Array.isArray(response.data.shows) && typeof response.data.totalPages === 'number') {
             return response.data;
        } else {
             throw new Error("Received invalid data structure from server");
        }
    } catch (error) {
       // Don't throw cancellation errors, let the component handle it
       if (axios.isCancel(error)) {
           console.log("Show fetch cancelled.");
           // Re-throw a specific cancellation error or return a specific state if needed by UI
           throw error; // Let the caller handle cancellation if needed
       }
       const errorMessage = formatErrorMessage(error, context);
       throw new Error(errorMessage);
    }
};

/**
 * Fetches details for a single show by its ID.
 * Returns the show object or throws a formatted error.
 */
export const getShowById = async (id, options = {}) => {
     if (!id || isNaN(parseInt(id))) {
         const invalidIdError = "Invalid ID provided when fetching show.";
         console.error(invalidIdError);
         throw new Error(invalidIdError);
     }
     const context = `while fetching show ID ${id}`;
     try {
        console.log(`Fetching show by ID: ${id}`);
        const response = await apiClient.get(`/shows/${id}`, { signal: options.signal });
        if (response?.data) { return response.data; }
        else { throw new Error(`No data received for show ID ${id}.`); }
    } catch (error) {
         if (axios.isCancel(error)) { console.log(`Show ID ${id} fetch cancelled.`); throw error; }
         const errorMessage = formatErrorMessage(error, context);
         throw new Error(errorMessage);
     }
};

 /**
  * Fetches details for a single show by its exact title.
  * Returns the show object or throws a formatted error.
  */
 export const getShowByTitle = async (title, options = {}) => {
     if (!title || typeof title !== 'string' || title.trim().length === 0) {
          const invalidTitleError = "Invalid title provided when fetching show.";
          console.error(invalidTitleError, title);
          throw new Error(invalidTitleError);
     }
     const encodedTitle = encodeURIComponent(title.trim());
     const context = `while fetching show title "${title}"`;
     console.log(`Fetching show by title: ${title}, Encoded: ${encodedTitle}`);
     try {
         const response = await apiClient.get(`/shows/title/${encodedTitle}`, { signal: options.signal });
          if (response?.data) { return response.data; }
          else { throw new Error(`No data received for show title "${title}".`); }
     } catch (error) {
          if (axios.isCancel(error)) { console.log(`Show title ${title} fetch cancelled.`); throw error; }
         const errorMessage = formatErrorMessage(error, context);
         throw new Error(errorMessage);
     }
 };

 /**
  * Fetches the list of unique theme names.
  * Returns an array of strings or throws a formatted error.
  */
 export const getThemes = async (options = {}) => {
     const context = "while fetching themes";
     try {
        console.log("Fetching themes");
         const response = await apiClient.get('/themes', { signal: options.signal });
         if (Array.isArray(response?.data)) { return response.data; }
         else { throw new Error("Received invalid theme data from server."); }
     } catch (error) {
         if (axios.isCancel(error)) { console.log("Theme fetch cancelled."); throw error; }
         const errorMessage = formatErrorMessage(error, context);
         throw new Error(errorMessage);
     }
 };

 /**
  * Fetches details for multiple shows based on an array of IDs for comparison.
  * Returns an array of show objects or throws a formatted error.
  */
 export const getShowsForComparison = async (ids, options = {}) => {
    if (!Array.isArray(ids) || ids.length === 0) {
        console.warn("getShowsForComparison called with invalid IDs:", ids);
        return []; // Return empty for invalid input
    }
    const limitedIds = ids.slice(0, 3);
    if (limitedIds.length !== ids.length) console.warn(`Attempted to compare ${ids.length} shows, limiting to ${limitedIds.length}.`);
    const validIds = limitedIds.map(id => String(id).trim()).filter(id => id && !isNaN(parseInt(id)));
    if (validIds.length === 0) { console.warn("No valid numeric IDs found for comparison."); return []; }

    const idString = validIds.join(',');
    const context = `while fetching shows for comparison (IDs: ${idString})`;
    console.log(`Fetching shows for comparison with IDs: ${idString}`);
    try {
        const response = await apiClient.get('/shows/compare', { params: { ids: idString }, signal: options.signal });
         if (Array.isArray(response?.data)) { return response.data; }
         else { throw new Error("Received invalid comparison data from server."); }
    } catch (error) {
        if (axios.isCancel(error)) { console.log("Comparison fetch cancelled."); throw error; }
        const errorMessage = formatErrorMessage(error, context);
        throw new Error(errorMessage);
    }
 };

/**
 * Fetches autocomplete suggestions for show titles.
 * Returns an array of strings. Returns empty array on error, does not throw.
 */
export const getAutocompleteSuggestions = async (term, options = {}) => {
    if (!term || typeof term !== 'string' || term.trim().length < 1) return []; // Allow 1 char?
    const searchTerm = term.trim();
    const context = `while fetching suggestions for term "${searchTerm}"`;
    console.log(`Fetching suggestions for term: "${searchTerm}"`);
    try {
        const response = await apiClient.get('/suggestions', { params: { term: searchTerm }, signal: options.signal });
        if (Array.isArray(response?.data)) { return response.data; }
        else { console.warn("Received non-array data structure for suggestions:", response?.data); return []; }
    } catch (error) {
        if (axios.isCancel(error)) { console.log("Autocomplete fetch cancelled."); return []; }
        // Format and log error, but return empty array for graceful UI
        formatErrorMessage(error, context);
        return [];
    }
};

/**
 * Fetches all data needed for the homepage in a single request.
 * Returns the homepage data object or throws a formatted error.
 */
export const getHomepageData = async (options = {}) => {
    const context = "while fetching homepage data";
    console.log(">>> Service: getHomepageData called.");
    try {
        const response = await apiClient.get('/homepage-data', { signal: options.signal });
        if (response?.data && typeof response.data === 'object') { return response.data; }
        else { throw new Error("Received invalid homepage data from server."); }
    } catch (error) {
        if (axios.isCancel(error)) { console.log("Homepage data fetch cancelled."); throw error; }
        const errorMessage = formatErrorMessage(error, context);
        throw new Error(errorMessage);
    }
};

/**
 * Fetches the complete list of show IDs and titles for dropdowns.
 * Returns an array of {id, title} objects or throws a formatted error.
 */
export const getShowList = async (options = {}) => {
    const context = "while fetching show list for dropdowns";
    console.log(">>> Service: getShowList called.");
    try {
        const response = await apiClient.get('/show-list', { signal: options.signal });
        if (Array.isArray(response?.data)) { return response.data; }
        else { throw new Error("Received invalid show list data from server."); }
    } catch (error) {
        if (axios.isCancel(error)) { console.log("Show list fetch cancelled."); throw error; }
        const errorMessage = formatErrorMessage(error, context);
        throw new Error(errorMessage);
    }
};
</file>

</files>
