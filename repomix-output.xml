This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
client/.gitignore
client/eslint.config.js
client/index.html
client/package.json
client/postcss.config.js
client/public/vite.svg
client/README.md
client/src/App.jsx
client/src/components/catalog/FilterPanel.jsx
client/src/components/catalog/ShowCard.jsx
client/src/components/home/CategoryCard.jsx
client/src/components/home/FeaturedShow.jsx
client/src/components/home/ShowCategoryRow.jsx
client/src/components/Layout/footer.jsx
client/src/components/Layout/header.jsx
client/src/components/shared/ScoreVisual.jsx
client/src/hooks/useAutocomplete.js
client/src/hooks/useDebounce.js
client/src/index.css
client/src/main.jsx
client/src/pages/CatalogPage.jsx
client/src/pages/ComparePage.jsx
client/src/pages/HomePage.jsx
client/src/pages/ShowDetailPage.jsx
client/src/services/showService.js
client/tailwind.config.js
client/vite.config.js
database/import_data.js
database/reviewed_shows.json
database/schema.sql
package.json
scripts/updateImageFilenames.js
server/api/homepage.js
server/api/index.js
server/api/shows.js
server/api/suggestions.js
server/api/themes.js
server/db/connection.js
server/db/queries.js
server/server.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="client/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="client/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="client/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="client/postcss.config.js">
// client/postcss.config.js
export default {
    plugins: {
      '@tailwindcss/postcss': {}, // Use the new package name here
      autoprefixer: {},
    },
  }
</file>

<file path="client/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="client/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="client/src/components/home/CategoryCard.jsx">
// client/src/components/home/CategoryCard.jsx
import React from 'react';
import { Link } from 'react-router-dom';

// UPDATED: Accepts an IconComponent prop
const CategoryCard = ({ title, description, IconComponent, linkUrl }) => { 
  return (
    <Link
      to={linkUrl}
      // Slightly softer shadow and border
      className="block p-6 bg-white rounded-lg border border-gray-100 shadow hover:bg-gray-50 hover:shadow-md transition duration-200 text-center transform hover:-translate-y-1" 
    >
      <div className="flex justify-center mb-3 text-teal-600"> 
         {/* Render the passed icon component */}
         {IconComponent && <IconComponent size={32} />} 
      </div>
      <h5 className="mb-2 text-xl font-semibold tracking-tight text-gray-800">{title}</h5>
      <p className="font-normal text-sm text-gray-600">{description}</p>
    </Link>
  );
};

export default CategoryCard;
</file>

<file path="client/src/components/home/ShowCategoryRow.jsx">
// client/src/components/home/ShowCategoryRow.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ShowCard from '../catalog/ShowCard'; // Assuming ShowCard is used here

// Helper component to display a row of shows for a specific category
const ShowCategoryRow = ({ title, shows = [], isLoading, error, viewAllLink = null }) => {
    return (
        <section className="mb-10">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-semibold text-gray-700">{title}</h2>
                {viewAllLink && (
                    <Link
                        to={viewAllLink}
                        className="text-sm text-teal-600 hover:text-teal-800 hover:underline"
                    >
                        View All →
                    </Link>
                )}
            </div>

            {/* Display Loading State */}
            {isLoading && (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {/* Simple Skeleton Loaders */}
                    {[...Array(4)].map((_, index) => (
                         <div key={index} className="border border-gray-200 rounded-lg shadow-md bg-white p-4 animate-pulse">
                            <div className="h-40 bg-gray-300 rounded mb-3"></div>
                            <div className="h-4 bg-gray-300 rounded w-3/4 mb-2"></div>
                            <div className="h-3 bg-gray-300 rounded w-1/2 mb-3"></div>
                            <div className="h-8 bg-gray-300 rounded mt-auto"></div>
                         </div>
                    ))}
                 </div>
            )}

            {/* Display Error State */}
            {error && !isLoading && (
                <p className="text-center text-red-500 bg-red-100 p-3 rounded border border-red-300">
                    Could not load shows for this category: {error}
                </p>
            )}

            {/* Display Shows */}
            {!isLoading && !error && shows && shows.length > 0 && (
                 <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                     {/* Limit the number of shows displayed directly on homepage */}
                     {shows.slice(0, 4).map((show) => (
                         <ShowCard key={show.id} show={show} />
                     ))}
                 </div>
             )}

            {/* Display No Shows Message */}
            {!isLoading && !error && (!shows || shows.length === 0) && (
                <p className="text-center text-gray-500 italic">No shows available in this category yet.</p>
            )}
        </section>
    );
};

export default ShowCategoryRow;
</file>

<file path="client/src/components/Layout/footer.jsx">
// client/src/components/Layout/Footer.jsx
import React from 'react';
import { Link } from 'react-router-dom'; // Import Link if needed for footer links

const Footer = () => {
  const currentYear = new Date().getFullYear();
  return (
    <footer className="bg-gray-700 text-gray-300 text-center p-4 mt-8">
      <p>© {currentYear} Sensory Screen Time Guide. All rights reserved.</p>
      {/* Example of potential future links using React Router's Link */}
      {/* <p className="text-sm mt-2 space-x-3">
        <Link to="/about" className="hover:text-white">About Us</Link> |
        <Link to="/privacy" className="hover:text-white">Privacy Policy</Link>
      </p> */}
    </footer>
  );
};

export default Footer;
</file>

<file path="client/src/components/Layout/header.jsx">
// client/src/components/Layout/Header.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const Header = () => {
  return (
    <header className="bg-teal-600 text-white shadow-md sticky top-0 z-50">
      <nav className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link to="/" className="text-2xl font-bold hover:text-teal-200 transition duration-200">
          Sensory Screen Time Guide
        </Link>
        <div className="space-x-4">
          <Link to="/" className="hover:text-teal-200 transition duration-200">Home</Link>
          <Link to="/shows" className="hover:text-teal-200 transition duration-200">Browse Shows</Link>
          <Link to="/compare" className="hover:text-teal-200 transition duration-200">Compare</Link>
        </div>
      </nav>
    </header>
  );
};

export default Header;
</file>

<file path="client/src/components/shared/ScoreVisual.jsx">
// client/src/components/shared/ScoreVisual.jsx
import React from 'react';

const ScoreVisual = ({ score, maxScore = 5 }) => { // Added maxScore prop with default
    const normalizedScore = score ?? 0; // Default to 0 if score is null/undefined

    // Ensure score doesn't exceed maxScore visually
    const displayScore = Math.min(Math.max(normalizedScore, 0), maxScore);

    return (
        <div className="flex items-center space-x-1" title={`Stimulation Score: ${normalizedScore} out of ${maxScore}`}>
            {[...Array(maxScore)].map((_, i) => (
                <div
                    key={i}
                    // Use displayScore for visual filling
                    className={`h-2 w-3 rounded-sm ${i < displayScore ? 'bg-teal-500' : 'bg-gray-300'}`}
                ></div>
            ))}
            {/* Display the actual normalized score, even if it exceeds maxScore */}
            <span className="text-xs font-semibold ml-1">{normalizedScore}/{maxScore}</span>
        </div>
    );
};

export default ScoreVisual;
</file>

<file path="client/src/hooks/useAutocomplete.js">
// client/src/hooks/useAutocomplete.js
import { useState, useEffect, useCallback, useRef } from 'react';
import useDebounce from './useDebounce'; // Assuming useDebounce hook exists

/**
 * Custom Hook for Autocomplete functionality.
 *
 * @param {function} fetchSuggestionsFn - An async function that takes a search term and returns an array of suggestions.
 * @param {number} debounceDelay - Delay in ms for debouncing input.
 * @returns {object} - Contains state and handlers for autocomplete.
 */
function useAutocomplete(fetchSuggestionsFn, debounceDelay = 300) {
    const [searchTerm, setSearchTerm] = useState('');
    const [suggestions, setSuggestions] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [showSuggestions, setShowSuggestions] = useState(false);
    const containerRef = useRef(null); // Ref for the container to handle clicks outside

    const debouncedSearchTerm = useDebounce(searchTerm, debounceDelay);

    // Effect to fetch suggestions when debounced term changes
    useEffect(() => {
        let isMounted = true;
        const fetch = async () => {
            if (debouncedSearchTerm && debouncedSearchTerm.length > 1) {
                setIsLoading(true);
                try {
                    const results = await fetchSuggestionsFn(debouncedSearchTerm);
                    if (isMounted) {
                        setSuggestions(results || []);
                        setShowSuggestions(true); // Show suggestions when results are fetched
                    }
                } catch (error) {
                    console.error("Autocomplete fetch error:", error);
                    if (isMounted) {
                        setSuggestions([]);
                        setShowSuggestions(false); // Hide on error
                    }
                } finally {
                    if (isMounted) {
                        setIsLoading(false);
                    }
                }
            } else {
                // Clear suggestions if term is too short or empty
                if (isMounted) {
                    setSuggestions([]);
                    setShowSuggestions(false);
                }
            }
        };

        fetch();

        return () => { isMounted = false; }; // Cleanup on unmount or dependency change
    }, [debouncedSearchTerm, fetchSuggestionsFn]); // Re-run if term or fetch function changes

    // Effect to handle clicks outside the autocomplete container
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (containerRef.current && !containerRef.current.contains(event.target)) {
                setShowSuggestions(false); // Hide suggestions on outside click
            }
        };
        // Add event listener only when suggestions are shown
        if (showSuggestions) {
             document.addEventListener('mousedown', handleClickOutside);
        } else {
             document.removeEventListener('mousedown', handleClickOutside); // Clean up listener
        }
        // Cleanup listener on unmount
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [showSuggestions]); // Re-run when showSuggestions changes

    // Handler for input changes
    const handleInputChange = useCallback((event) => {
        setSearchTerm(event.target.value);
        // Optionally show suggestions immediately while typing, or wait for debounce effect
        // setShowSuggestions(true); // Uncomment to show list while typing (might be visually noisy)
    }, []);

    // Handler when a suggestion is clicked (or selected)
    const handleSuggestionSelect = useCallback((suggestion) => {
        setSearchTerm(suggestion); // Update input field
        setSuggestions([]); // Clear suggestions
        setShowSuggestions(false); // Hide suggestions list
        // Note: Navigation or further action should be handled by the component using the hook
    }, []);

    // Function to manually hide suggestions (e.g., on form submit)
    const hideSuggestions = useCallback(() => {
        setShowSuggestions(false);
    }, []);

     // Function to reset the autocomplete state
     const resetAutocomplete = useCallback(() => {
        setSearchTerm('');
        setSuggestions([]);
        setShowSuggestions(false);
        setIsLoading(false);
    }, []);

    return {
        // State
        inputValue: searchTerm,
        suggestions,
        isLoading,
        showSuggestions,
        // Handlers & Ref
        handleInputChange,
        handleSuggestionSelect,
        hideSuggestions,
        resetAutocomplete,
        containerRef, // Pass the ref down so the component can assign it
    };
}

export default useAutocomplete;
</file>

<file path="client/src/hooks/useDebounce.js">
// client/src/hooks/useDebounce.js
import { useState, useEffect } from 'react';

/**
 * Custom hook that debounces a value.
 * @param {any} value The value to debounce.
 * @param {number} delay The debounce delay in milliseconds.
 * @returns {any} The debounced value.
 */
function useDebounce(value, delay) {
  // State and setters for debounced value
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(
    () => {
      // Set debouncedValue to value (passed in) after the specified delay
      const handler = setTimeout(() => {
        setDebouncedValue(value);
      }, delay);

      // Return a cleanup function that will be called every time useEffect runs again.
      // This cancels the previous timeout if value changes quickly.
      return () => {
        clearTimeout(handler);
      };
    },
    // Only re-call effect if value or delay changes
    [value, delay]
  );

  return debouncedValue;
}

export default useDebounce;
</file>

<file path="client/src/index.css">
@import "tailwindcss";
</file>

<file path="client/tailwind.config.js">
// client/tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [
      // We might add plugins here later if needed
    ],
  }
</file>

<file path="client/vite.config.js">
// client/vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      // Proxy API requests starting with /api to backend server
      '/api': { // Requests starting with /api/...
        target: 'http://localhost:3001', // Your backend address
        changeOrigin: true, // Recommended
        secure: false, // Change to true if backend uses HTTPS
      }
    }
  }
})
</file>

<file path="scripts/updateImageFilenames.js">
// updateImageFilenames.js
const fs = require('fs');
const path = require('path');

// --- Configuration: Define paths RELATIVE to the project root ---
// Assumes this script is in the project root directory.
const jsonFilePath = path.join('database', 'reviewed_shows.json');
const imageDirPath = path.join('client', 'public', 'images', 'Stim list - show images');
// --- End Configuration ---

// Helper to slugify title into a base filename (without extension)
const slugify = title => {
    if (!title || typeof title !== 'string') return '';
    return title.toLowerCase()
        .replace(/[:()']/g, '') // Remove specific problematic characters
        .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric with hyphens
        .replace(/^-+|-+$/g, ''); // Trim leading/trailing hyphens
};

// --- Main Logic ---
try {
    // Ensure paths exist
    if (!fs.existsSync(jsonFilePath)) {
        throw new Error(`JSON file not found at expected path: ${jsonFilePath}`);
    }
    if (!fs.existsSync(imageDirPath)) {
        throw new Error(`Image directory not found at expected path: ${imageDirPath}`);
    }

    // Load and parse the JSON
    console.log(`Reading JSON from: ${jsonFilePath}`);
    const showsJson = fs.readFileSync(jsonFilePath, 'utf8');
    const shows = JSON.parse(showsJson);
    if (!Array.isArray(shows)) {
        throw new Error('JSON data is not an array.');
    }

    // Get all image filenames in the directory
    console.log(`Scanning images in: ${imageDirPath}`);
    const imageFiles = fs.readdirSync(imageDirPath);
    const imageFileMap = new Map(imageFiles.map(file => [file.toLowerCase(), file])); // Map lowercase names to original names

    console.log(`Found ${imageFiles.length} image files.`);

    const matched = [];
    const unmatched = [];
    let updatedCount = 0;

    // Add matching image filename to each show
    shows.forEach((show, index) => {
        if (!show || !show.title) {
            console.warn(`Skipping show at index ${index} due to missing title.`);
            return;
        }
        // Process only if image_filename is currently missing or null
        if (!show.image_filename) {
            const slug = slugify(show.title);
            if (!slug) {
                console.warn(`Could not generate slug for title: "${show.title}"`);
                unmatched.push(show.title + " (Failed to generate slug)");
                return;
            }

            // Attempt to find a matching image file (case-insensitive start, common extensions)
            let foundMatch = null;
            for (const ext of ['.jpg', '.jpeg', '.png', '.webp']) { // Add more extensions if needed
                const potentialFilename = (slug + ext).toLowerCase();
                if (imageFileMap.has(potentialFilename)) {
                    foundMatch = imageFileMap.get(potentialFilename); // Get original filename casing
                    break;
                }
            }

            if (foundMatch) {
                show.image_filename = foundMatch;
                matched.push(`${show.title} → ${foundMatch}`);
                updatedCount++;
            } else {
                unmatched.push(show.title);
            }
        }
    });

    // Save updated JSON only if changes were made
    if (updatedCount > 0) {
        console.log(`\nSaving updated JSON back to: ${jsonFilePath}`);
        fs.writeFileSync(jsonFilePath, JSON.stringify(shows, null, 2), 'utf8');
        console.log(`✅ ${updatedCount} image filenames added!`);
    } else {
        console.log("\nNo missing image filenames needed updating.");
    }

    // Reporting
    if (matched.length > 0) {
        console.log('\n🟢 Matched Shows:');
        matched.forEach(entry => console.log('  - ' + entry));
    }
    if (unmatched.length > 0) {
        console.log('\n🔴 Unmatched Shows (Could not find corresponding image):');
        unmatched.forEach(title => console.log('  - ' + title));
    }

} catch (error) {
    console.error("\n❌ An error occurred during the script execution:");
    console.error(error.message);
    // Optionally log the full stack trace for more detail
    // console.error(error);
}
</file>

<file path="server/api/homepage.js">
// server/api/homepage.js
const express = require('express');
const { runQuery, getSingleRow, getThemesForShows, attachThemesToShowList } = require('../db/queries');
const router = express.Router();

// GET /api/homepage-data - Fetch data for homepage sections
router.get('/homepage-data', async (req, res) => {
  console.log('>>> API route /homepage-data called');
  try {
    // Define Promises for each section
    const featuredShowPromise = getSingleRow(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level, animation_style
      FROM shows ORDER BY RANDOM() LIMIT 1
    `);
    const popularShowsPromise = runQuery(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level
      FROM shows ORDER BY stimulation_score DESC, title LIMIT 5
    `);
    const ratedShowsPromise = runQuery(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level
      FROM shows WHERE stimulation_score = 5 ORDER BY title LIMIT 5
    `);
    const lowStimShowsPromise = runQuery(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level
      FROM shows WHERE stimulation_score <= 2 ORDER BY stimulation_score ASC, title LIMIT 5
    `);
    const highInteractionShowsPromise = runQuery(`
      SELECT id, title, stimulation_score, target_age_group, image_filename, interactivity_level
      FROM shows WHERE interactivity_level = 'High' COLLATE NOCASE ORDER BY title LIMIT 5
    `);

    // Execute all promises concurrently
    const [
      featuredShowResult,
      popularShowsResult,
      ratedShowsResult,
      lowStimShowsResult,
      highInteractionShowsResult
    ] = await Promise.all([
      featuredShowPromise,
      popularShowsPromise,
      ratedShowsPromise,
      lowStimShowsPromise,
      highInteractionShowsPromise
    ]);

    // Combine all fetched show IDs to fetch themes
    const allShowIds = new Set();
    if (featuredShowResult) allShowIds.add(featuredShowResult.id);
    popularShowsResult.forEach((s) => allShowIds.add(s.id));
    ratedShowsResult.forEach((s) => allShowIds.add(s.id));
    lowStimShowsResult.forEach((s) => allShowIds.add(s.id));
    highInteractionShowsResult.forEach((s) => allShowIds.add(s.id));

    const themesMap = await getThemesForShows(Array.from(allShowIds));

    // Attach themes
    const featuredShow = featuredShowResult
      ? attachThemesToShowList([featuredShowResult], themesMap)[0]
      : null;
    const popularShows = attachThemesToShowList(popularShowsResult, themesMap);
    const ratedShows = attachThemesToShowList(ratedShowsResult, themesMap);
    const lowStimShows = attachThemesToShowList(lowStimShowsResult, themesMap);
    const highInteractionShows = attachThemesToShowList(highInteractionShowsResult, themesMap);

    const homepageData = {
      featuredShow,
      popularShows,
      ratedShows,
      lowStimShows,
      highInteractionShows
    };

    console.log('>>> Sending homepage data from API');
    res.json(homepageData);
  } catch (error) {
    console.error('Error fetching homepage data:', error.message);
    res.status(500).json({ error: 'Failed to fetch homepage data from database' });
  }
});

// GET /api/show-list - Get only IDs and Titles for dropdowns
router.get('/show-list', async (req, res) => {
  console.log('>>> API route /show-list called');
  const sql = `SELECT id, title FROM shows ORDER BY title COLLATE NOCASE`;
  try {
    const showList = await runQuery(sql);
    res.json(showList);
  } catch (error) {
    console.error('Error fetching show list:', error.message);
    res.status(500).json({ error: 'Failed to retrieve show list.' });
  }
});

console.log(">>> homepage.js: Exporting router object:", typeof router, router instanceof Function);

module.exports = router; // Export the router instance
</file>

<file path="server/api/index.js">
// server/api/index.js
const express = require('express');
const showsRouter = require('./shows');
const themesRouter = require('./themes');
const suggestionsRouter = require('./suggestions');
const homepageRouter = require('./homepage'); // Contains /homepage-data and /show-list now

console.log("--- Debugging API Index ---");
console.log("Type of showsRouter:", typeof showsRouter);
console.log("Type of themesRouter:", typeof themesRouter);
console.log("Type of suggestionsRouter:", typeof suggestionsRouter);
console.log("Type of homepageRouter:", typeof homepageRouter); // Check the type
console.log("Is homepageRouter a function?", homepageRouter instanceof Function); // Explicit check
console.log("--- End Debugging ---");

const router = express.Router();

// Mount the individual routers
router.use('/shows', showsRouter);         // Handles /api/shows/*
router.use('/themes', themesRouter);       // Handles /api/themes
router.use('/suggestions', suggestionsRouter); // Handles /api/suggestions
// Mount homepageRouter directly as it handles multiple specific endpoints
router.use('/', homepageRouter);           // Handles /api/homepage-data and /api/show-list

// Simple check for the base /api route
router.get('/', (req, res) => {
    res.json({ message: 'Sensory Screen Time Guide API is running!' });
});


module.exports = router; // Export the combined API router
</file>

<file path="server/api/suggestions.js">
// server/api/suggestions.js
const express = require('express');
const { runQuery } = require('../db/queries');
const router = express.Router();

// GET /api/suggestions?term=... - Autocomplete suggestions
router.get('/', async (req, res) => {
    const term = req.query.term;

    if (!term || typeof term !== 'string' || term.trim().length < 1) { // Allow 1 char for suggestions
        return res.json([]); // Return empty if term is too short or invalid
    }

    const searchTerm = term.trim() + '%'; // Add wildcard for prefix search
    // Limit suggestions for performance
    const sql = `SELECT DISTINCT title FROM shows WHERE title LIKE ? COLLATE NOCASE ORDER BY title LIMIT 10`;

    try {
        const rows = await runQuery(sql, [searchTerm]);
        const suggestions = rows.map(row => row.title);
        res.json(suggestions);
    } catch (error) {
        console.error(`Error fetching suggestions for term "${term}":`, error.message);
        // Return empty array on error for graceful frontend handling
        res.json([]);
    }
});

module.exports = router;
</file>

<file path="server/api/themes.js">
// server/api/themes.js
const express = require('express');
const { runQuery } = require('../db/queries'); // Import the database query function
const router = express.Router(); // Create an Express router instance

// Define the handler for GET requests to the root of this router (which will be /api/themes)
router.get('/', async (req, res) => {
    // SQL query to get all theme names, ordered alphabetically (case-insensitive)
    const sql = `SELECT name FROM themes ORDER BY name COLLATE NOCASE`;
    try {
        // Execute the query using our helper function
        const rows = await runQuery(sql);
        // The query returns objects like [{ name: 'Adventure' }, { name: 'Animals' }, ...],
        // so we extract just the 'name' property from each object into a simple array.
        const themeNames = rows.map(row => row.name);
        // Send the array of theme names back as the JSON response
        res.json(themeNames);
    } catch (error) {
        // Log any error that occurs during the database query
        console.error("Error fetching themes:", error.message);
        // Send a generic server error response back to the client
        res.status(500).json({ error: "Failed to retrieve themes." });
    }
});

// Export the router instance so it can be imported and used in server/api/index.js
module.exports = router;
</file>

<file path="server/db/connection.js">
// server/db/connection.js
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Construct path relative to this file's location to reach the root/database folder
const dbPath = path.resolve(__dirname, '..', '..', 'database', 'shows.db'); // Go up two levels then into database/
let db = null; // Initialize db as null

function connectDatabase(callback) {
    // Check if already connected
    if (db && db.open) {
        console.log("Database connection already established.");
        if (callback) callback(null, db); // Indicate success
        return;
    }

    console.log(`Attempting to connect to database at: ${dbPath}`);
    db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE, (err) => { // Use READWRITE for server operations if needed, or READONLY
        if (err) {
            console.error("Error connecting to the database:", err.message);
            db = null; // Ensure db is null on error
            if (callback) callback(err); // Pass error to callback
        } else {
            console.log("Successfully connected to the SQLite database.");
            db.on('error', (dbErr) => { // Add listener for future errors
                console.error('Database runtime error:', dbErr.message);
            });
            if (callback) callback(null, db); // Indicate success
        }
    });
}

function getDbConnection() {
    if (!db || !db.open) {
         // This situation should ideally be handled at startup,
         // but throw an error if accessed while disconnected.
         console.error("FATAL: Database is not connected.");
         throw new Error("Database connection is not available.");
    }
    return db;
}

function closeDatabase(callback) {
    if (db && db.open) {
        db.close((err) => {
            if (err) {
                console.error('Error closing database:', err.message);
                if (callback) callback(err);
            } else {
                console.log('Database connection closed.');
                db = null; // Reset db variable
                if (callback) callback(null);
            }
        });
    } else {
         if (callback) callback(null); // Already closed or never opened
    }
}

// Export the functions and potentially the db instance (use getDbConnection ideally)
module.exports = {
    connectDatabase,
    getDbConnection,
    closeDatabase
};
</file>

<file path="server/server.js">
// server/server.js
const express = require('express');
const path = require('path');
const cors = require('cors');
const { connectDatabase, closeDatabase } = require('./db/connection'); // Import DB connection functions
const apiRouter = require('./api'); // Import the main API router

const app = express();
const port = process.env.PORT || 3001;

// --- Connect to Database ---
connectDatabase((err) => {
    if (err) {
        console.error("Failed to connect to database on startup. Server shutting down.");
        process.exit(1); // Exit if DB connection fails initially
    }

    // --- Start Server Only After DB Connection ---
    // Middleware Setup
    app.use(cors()); // Enable CORS for all origins (adjust if needed for production)
    app.use(express.json()); // Middleware to parse JSON bodies

    // Request Logging Middleware
    app.use((req, res, next) => {
        console.log(`Server Request: ${req.method} ${req.originalUrl}`);
        next();
    });

    // --- API Routes ---
    app.use('/api', apiRouter); // Mount all API routes under /api

    // --- Static Files (If serving frontend build from backend) ---
    // Uncomment if you build the React app and want Node to serve it
    // app.use(express.static(path.join(__dirname, '..', 'client', 'dist')));
    // app.get('*', (req, res) => {
    //     if (!req.originalUrl.startsWith('/api')) {
    //         res.sendFile(path.join(__dirname, '..', 'client', 'dist', 'index.html'));
    //     } else {
    //         next(); // Important for API 404s below
    //     }
    // });

    // --- API 404 Handling (Not Found) ---
    // This middleware runs only if no API route above matched
    app.use('/api', (req, res, next) => {
        console.log(`API route not found: ${req.method} ${req.originalUrl}`);
        res.status(404).json({ error: `API endpoint not found: ${req.method} ${req.originalUrl.split('?')[0]}` });
    });

    // --- General Error Handling Middleware ---
    // Catches errors from routes or other middleware
    app.use((err, req, res, next) => {
        console.error("Unhandled application error:", err.stack);
        // Avoid sending detailed errors in production
        const statusCode = err.status || 500;
        const message = process.env.NODE_ENV === 'production' ? 'An internal server error occurred.' : err.message;
        res.status(statusCode).json({ error: message || 'Something went wrong on the server!' });
    });

    // --- Start Listening ---
    const server = app.listen(port, () => {
        console.log(`Backend server listening at http://localhost:${port}`);
    });

    // --- Graceful Shutdown ---
    const gracefulShutdown = (signal) => {
        console.log(`\n${signal} received. Closing server...`);
        server.close(() => {
            console.log('HTTP server closed.');
            closeDatabase((closeErr) => {
                if (closeErr) {
                    console.error("Error closing database during shutdown:", closeErr);
                    process.exit(1);
                } else {
                    console.log("Database connection closed. Exiting.");
                    process.exit(0);
                }
            });
        });
    };

    process.on('SIGINT', () => gracefulShutdown('SIGINT')); // CTRL+C
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // kill command

}); // End of connectDatabase callback
</file>

<file path="client/package.json">
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "chart.js": "^4.4.8",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.4.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@tailwindcss/cli": "^4.1.0",
    "@tailwindcss/postcss": "^4.1.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "gh-pages": "^6.3.0",
    "globals": "^15.15.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.0",
    "vite": "^6.2.0"
  }
}
</file>

<file path="client/src/App.jsx">
// client/src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// Import Page Components
import HomePage from './pages/HomePage';
import CatalogPage from './pages/CatalogPage';
import ShowDetailPage from './pages/ShowDetailPage';
import ComparePage from './pages/ComparePage';

// Import Layout Components
import Header from './components/Layout/Header';
import Footer from './components/Layout/Footer';

function App() { // Make sure this function definition is correct
  return ( 
    <Router>
      <div className="flex flex-col min-h-screen font-sans bg-gray-50 text-gray-800">
        <Header />
        {/* Ensure main has padding */}
        <main className="flex-grow container mx-auto px-4 py-8"> 
          <Routes>
            {/* Core Routes */}
            <Route path="/" element={<HomePage />} />
            <Route path="/shows" element={<CatalogPage />} />
            <Route path="/show/:id" element={<ShowDetailPage />} />
            <Route path="/compare" element={<ComparePage />} />

            {/* Catch-all Route */}
            <Route 
              path="*" 
              element={
                <div className="text-red-700 text-center py-10">
                  <h2 className="text-2xl font-bold mb-2">404 Page Not Found</h2>
                  <p>Sorry, the page you requested does not exist.</p>
                </div>
              } 
            />
          </Routes>
        </main>
        <Footer />
      </div>
    </Router>
  ); // End return
} // End App function

// !!! ENSURE THIS LINE IS PRESENT AND EXACTLY LIKE THIS AT THE VERY BOTTOM !!!
export default App;
</file>

<file path="client/src/components/home/FeaturedShow.jsx">
// client/src/components/home/FeaturedShow.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const placeholderImage = "/images/placeholder-show.png";

const FeaturedShow = ({ show }) => {
    if (!show) {
        // Can return null or a loading state specific to this component
        return <div className="text-center p-6 bg-gray-100 rounded-lg">Loading featured show...</div>;
    }

    // Optional change: Try loading .webp first by default
const imageUrl = show.image_filename ? `/images/${show.image_filename.replace(/\.(jpg|jpeg|png)$/i, '.webp')}` : placeholderImage;

    // Create a short description snippet (example)
    const descriptionSnippet = show.animation_style
        ? `${show.animation_style.substring(0, 100)}...` // Limit length
        : 'Learn more about this show!';

    return (
        <section className="py-12 px-4 bg-gradient-to-r from-blue-50 to-teal-50 rounded-lg shadow-md border border-gray-200">
            <h2 className="text-2xl font-semibold text-center text-gray-700 mb-6">Featured Show</h2>
            <div className="flex flex-col md:flex-row items-center gap-6 md:gap-8 max-w-4xl mx-auto">
                {/* Image */}
                <div className="md:w-1/3 flex-shrink-0">
                    <img
                        src={imageUrl}
                        alt={`${show.title} poster`}
                        className="rounded-lg shadow-lg w-full h-auto object-contain max-h-80" // Adjusted styles
                        loading="lazy" // Keep lazy loading
                        onError={(e) => {
                            // Attempt to load original filename if the current source (potentially .webp) failed
                            const originalImageUrl = show.image_filename ? `/images/${show.image_filename}` : placeholderImage;
                            if (e.target.src !== originalImageUrl) {
                                // If the current src isn't the original, try loading the original
                                console.log(`FeaturedShow: WebP failed for ${show.title}, trying original: ${originalImageUrl}`);
                                e.target.src = originalImageUrl;
                            } else {
                                // If even the original failed, or if there was no original, use placeholder
                                console.log(`FeaturedShow: Original image failed or missing for ${show.title}, using placeholder.`);
                                e.target.onerror = null; // Prevent infinite loop if placeholder also fails
                                e.target.src = placeholderImage;
                            }
                        }}
                    />
                </div>
                {/* Details */}
                <div className="md:w-2/3 text-center md:text-left">
                    <h3 className="text-3xl font-bold text-teal-800 mb-2">{show.title}</h3>
                    <p className="text-md text-gray-600 mb-3">
                        <strong>Age Range:</strong> {show.target_age_group || 'N/A'}
                    </p>
                    <p className="text-md text-gray-600 mb-4 italic">
                        {descriptionSnippet}
                    </p>
                     <div className="mb-4">
                         <strong className="text-gray-700">Themes:</strong>
                         <div className="flex flex-wrap gap-2 mt-1 justify-center md:justify-start">
                             {show.themes && show.themes.slice(0, 4).map((theme, index) => ( // Show a few themes
                                 <span key={index} className="text-xs bg-teal-100 text-teal-800 px-3 py-1 rounded-full">
                                     {theme}
                                 </span>
                             ))}
                             {show.themes && show.themes.length > 4 && (
                                  <span className="text-xs text-gray-500 px-2 py-1">...</span>
                             )}
                             {!show.themes || show.themes.length === 0 && (
                                 <span className="text-xs text-gray-500 italic">None listed</span>
                             )}
                         </div>
                     </div>
                    <Link
                        to={`/show/${show.id}`}
                        className="inline-block px-6 py-2 bg-orange-500 text-white font-semibold rounded-full shadow hover:bg-orange-600 transition duration-200"
                    >
                        Learn More about {show.title}
                    </Link>
                </div>
            </div>
        </section>
    );
};

export default FeaturedShow;
</file>

<file path="client/src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css' // Ensure your Tailwind CSS import is here


ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
</file>

<file path="database/import_data.js">
// database/import_data.js
console.log("✅ import_data.js script starting..."); // Add start log

const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

const dbPath = path.resolve(__dirname, 'shows.db');
const jsonPath = path.resolve(__dirname, 'reviewed_shows.json');
const schemaPath = path.resolve(__dirname, 'schema.sql');

// --- Helper Functions ---

function parseAgeGroup(ageString) {
    if (ageString === null || ageString === undefined) {
        // console.warn(`Input ageString is null or undefined. Setting min/max age to null.`); // Optional log
        return { min_age: null, max_age: null };
    }
    if (typeof ageString !== 'string') {
        console.warn(`Input ageString is not a string (type: ${typeof ageString}, value: ${ageString}). Setting min/max age to null.`);
        return { min_age: null, max_age: null };
    }
    const trimmedAgeString = ageString.trim();
    if (trimmedAgeString === '') {
        // console.warn(`Input ageString is an empty or whitespace-only string. Setting min/max age to null.`); // Optional log
        return { min_age: null, max_age: null };
    }
    const lowerCaseAgeString = trimmedAgeString.toLowerCase();

    if (lowerCaseAgeString === 'any' || lowerCaseAgeString === 'all ages' || lowerCaseAgeString === 'any age') {
        return { min_age: 0, max_age: 99 };
    }
    const specificCases = {
        '2+, any': { min_age: 2, max_age: 99 }, '8+': { min_age: 8, max_age: 99 },
        '0-5': { min_age: 0, max_age: 5 }, '0-3': { min_age: 0, max_age: 3 },
        '10-14': { min_age: 10, max_age: 14 }, '10-16': { min_age: 10, max_age: 16 },
        '12+': { min_age: 12, max_age: 99 }, '7-11': { min_age: 7, max_age: 11 },
        '7-12': { min_age: 7, max_age: 12 }, '8-14': { min_age: 8, max_age: 14 },
        '6-12, 12+': { min_age: 6, max_age: 99 }, '7-12, 12+': { min_age: 7, max_age: 99 }
    };
    if (specificCases[lowerCaseAgeString]) { return specificCases[lowerCaseAgeString]; }
    const plusMatch = lowerCaseAgeString.match(/^(\d+)\+$/);
    if (plusMatch) { return { min_age: parseInt(plusMatch[1], 10), max_age: 99 }; }
    const rangeMatch = lowerCaseAgeString.match(/^(\d+)\s*-\s*(\d+)$/);
    if (rangeMatch) { return { min_age: parseInt(rangeMatch[1], 10), max_age: parseInt(rangeMatch[2], 10) }; }
    const singleAgeMatch = lowerCaseAgeString.match(/^(\d+)$/);
    if (singleAgeMatch) { const age = parseInt(singleAgeMatch[1], 10); return { min_age: age, max_age: age }; }

    console.warn(`Could not parse age string: "${ageString}". Setting min/max age to null.`);
    return { min_age: null, max_age: null };
}

function mapLevelToNumber(level) {
    if (!level || typeof level !== 'string') { return null; }
    const l = level.toLowerCase().trim();
    switch (l) {
        case 'none': return 0; case 'very low': return 0;
        case 'low': return 1; case 'low-moderate': return 2;
        case 'moderate': return 3; case 'moderate-high': return 4;
        case 'high': return 5; case 'very high': return 5;
        case 'varies': return 3;
        default:
            // console.warn(`Unknown level "${level}" found, mapping to null.`); // Keep this warning optional
            return null;
    }
}

// --- Database Operation Promises ---
function connectDb(dbPath) {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, (err) => {
            if (err) { console.error('Error opening database:', err.message); reject(err); }
            else { console.log('Connected to the SQLite database for import.'); resolve(db); }
        });
    });
}

function executeSchema(db, schemaSql) {
    return new Promise((resolve, reject) => {
        db.exec(schemaSql, (err) => {
            if (err) { console.error('Error executing schema:', err.message); reject(err); }
            else { console.log('Database schema applied successfully.'); resolve(); }
        });
    });
}

function runDb(db, sql, params = []) {
    return new Promise((resolve, reject) => {
        db.run(sql, params, function(err) {
            if (err) {
                if (sql.startsWith('INSERT OR IGNORE INTO themes') && err.message.includes('UNIQUE constraint failed')) {
                    // console.warn(`Theme already exists or constraint failed: ${params[0]}`);
                    resolve({ lastID: this.lastID, changes: this.changes });
                } else if (sql.startsWith('INSERT OR IGNORE INTO show_themes') && err.message.includes('UNIQUE constraint failed')) {
                    // console.warn(`Show-Theme link already exists: ShowID ${params[0]}, ThemeID ${params[1]}`);
                    resolve({ lastID: this.lastID, changes: this.changes });
                } else if (sql.startsWith('INSERT INTO shows') && err.message.includes('UNIQUE constraint failed: shows.title')) {
                    console.warn(`Skipping duplicate show title: ${params[0]}`);
                    resolve({ lastID: 0, changes: 0 });
                } else {
                    console.error(`Error running SQL: ${sql}`, params, err.message);
                    reject(err); // Reject other errors
                }
            } else {
                resolve({ lastID: this.lastID, changes: this.changes });
            }
        });
    });
}

function getDb(db, sql, params = []) {
    return new Promise((resolve, reject) => {
        db.get(sql, params, (err, row) => {
            if (err) { console.error(`Error getting row SQL: ${sql}`, params, err.message); reject(err); }
            else { resolve(row); }
        });
    });
}

function closeDb(db) {
    return new Promise((resolve, reject) => {
        db.close((err) => {
            if (err) { console.error('Error closing database:', err.message); reject(err); }
            else { console.log('Database connection closed.'); resolve(); }
        });
    });
}

// --- Main Import Logic ---
async function importData() {
    let db;
    try {
        // Delete existing DB file
        if (fs.existsSync(dbPath)) {
            console.log('Deleting existing database file...');
            fs.unlinkSync(dbPath);
            console.log('Existing database deleted.');
        }

        // Connect and Execute Schema
        db = await connectDb(dbPath);
        const schemaSql = fs.readFileSync(schemaPath, 'utf8');
        await executeSchema(db, schemaSql); // *** THIS STEP WAS MISSING ***

        // Read and Parse JSON
        let showsData;
        try {
            const jsonData = fs.readFileSync(jsonPath, 'utf8');
            showsData = JSON.parse(jsonData);
        } catch (parseError) {
             console.error(`Fatal Error: Could not parse JSON file at ${jsonPath}`);
             console.error(parseError.message);
             throw new Error("JSON file is malformed.");
        }
        if (!Array.isArray(showsData)) { throw new Error("JSON data is not an array."); }
        console.log(`Read ${showsData.length} show entries from JSON.`);

        // Start Transaction
        await runDb(db, 'BEGIN TRANSACTION;');
        console.log('Transaction started.');

        let showInsertCount = 0, themeInsertCount = 0, linkInsertCount = 0, errorCount = 0, skippedShowCount = 0;
        const themeCache = new Map();

        // SQL statements (Using correct column names)
        const showInsertSql = `INSERT INTO shows (
            title, stimulation_score, platform, target_age_group, min_age, max_age,
            seasons, avg_episode_length, interactivity_level, animation_style,
            dialogue_intensity, sound_effects_level, music_tempo, total_music_level,
            total_sound_effect_time_level, scene_frequency, image_filename,
            dialogue_intensity_num, scene_frequency_num, sound_effects_level_num, total_music_level_num
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`; // 21 params
        const themeInsertSql = `INSERT OR IGNORE INTO themes (name) VALUES (?)`;
        const themeSelectSql = `SELECT id FROM themes WHERE name = ? COLLATE NOCASE`;
        const linkInsertSql = `INSERT OR IGNORE INTO show_themes (show_id, theme_id) VALUES (?, ?)`;

        // --- Loop Start ---
        for (const [index, show] of showsData.entries()) {
            // Validation (Using correct field names)
             if (!show || typeof show !== 'object') { skippedShowCount++; continue; }
             if (typeof show.title !== 'string' || !show.title.trim()) { skippedShowCount++; continue; }
             if (typeof show.stimulation_score !== 'number' || show.stimulation_score < 1 || show.stimulation_score > 5) {
                console.warn(`[Entry ${index}] Skipping entry "${show.title || 'MISSING TITLE'}" due to invalid stimulation_score: ${show.stimulation_score}`);
                skippedShowCount++; continue;
             }

            const title = show.title.trim();

            // Parse age (using correct field name)
            // console.log(`[Entry ${index} - "${title}"] About to parse age group. Input:`, show.target_age_group); // Optional debug log
            let ageResult = parseAgeGroup(show.target_age_group);
            // console.log(`[Entry ${index} - "${title}"] Result from parseAgeGroup:`, JSON.stringify(ageResult)); // Optional debug log
            if (ageResult === undefined) { ageResult = { min_age: null, max_age: null }; errorCount++; }
            const { min_age, max_age } = ageResult;

            // Map levels (using correct field names)
            const dialogueNum = mapLevelToNumber(show.dialogue_intensity);
            const sceneNum = mapLevelToNumber(show.scene_frequency);
            const sfxNum = mapLevelToNumber(show.sound_effects_level);
            const musicNum = mapLevelToNumber(show.total_music_level);

            // Prepare params (using correct field names and order)
            const showParams = [
                title, show.stimulation_score, show.platform, show.target_age_group, min_age, max_age,
                show.seasons, show.avg_episode_length, show.interactivity_level, show.animation_style,
                show.dialogue_intensity, show.sound_effects_level, show.music_tempo, show.total_music_level,
                show.total_sound_effect_time_level, show.scene_frequency, show.image_filename,
                dialogueNum, sceneNum, sfxNum, musicNum,
            ]; // Should match the 21 '?' in showInsertSql

             if (showParams.length !== 21) {
                 console.error(`[Entry ${index} - "${title}"] FATAL: Parameter count mismatch! Expected 21, got ${showParams.length}. Skipping.`);
                 errorCount++;
                 continue; // Skip this entry
             }


            let showId = 0;

            try {
                // Insert Show / Find Existing ID
                 const showResult = await runDb(db, showInsertSql, showParams);
                 if (showResult.changes > 0) {
                     showInsertCount++; showId = showResult.lastID;
                 } else if (showResult.lastID === 0 && showResult.changes === 0) {
                     skippedShowCount++; const existingShow = await getDb(db, 'SELECT id FROM shows WHERE title = ?', [title]);
                     if (existingShow) { showId = existingShow.id; }
                     else { console.error(`CRITICAL: Could not find existing show ID for duplicate title: "${title}"`); errorCount++; continue; }
                 } else { console.error(`Unknown state after trying to insert show: "${title}"`); errorCount++; continue; }

                 // Handle Themes
                 if (showId > 0) {
                     const themes = Array.isArray(show.themes) ? show.themes : [];
                     for (const themeName of themes) {
                         if (typeof themeName !== 'string' || !themeName.trim()) continue;
                         const trimmedTheme = themeName.trim(); let themeId; const lowerTheme = trimmedTheme.toLowerCase();
                         if (themeCache.has(lowerTheme)) { themeId = themeCache.get(lowerTheme); }
                         else {
                             await runDb(db, themeInsertSql, [trimmedTheme]); const themeRow = await getDb(db, themeSelectSql, [trimmedTheme]);
                             if (themeRow) { themeId = themeRow.id; if (!themeCache.has(lowerTheme)) { themeInsertCount++; themeCache.set(lowerTheme, themeId); } }
                             else { console.error(`[Show "${title}"] Failed to find or insert theme: "${trimmedTheme}"`); errorCount++; continue; }
                         }
                         if (themeId) {
                             const linkResult = await runDb(db, linkInsertSql, [showId, themeId]);
                             if (linkResult && typeof linkResult.changes === 'number' && linkResult.changes > 0) { // Safe check
                                 linkInsertCount++;
                             }
                         }
                     }
                 }

            } catch (err) { // Safer Error Logging
                 console.error(`\n--- Error processing entry index ${index}, title "${title}" ---`);
                 console.error("Raw error caught:", err);
                 const errorMessage = err instanceof Error ? err.message : String(err);
                 console.error("Processed error message:", errorMessage);
                 console.error("--- End Error Log ---");
                 errorCount++;
            }
        } // --- End loop ---

        // Commit Transaction
        await runDb(db, 'COMMIT;');
        console.log('Transaction committed.');

        // Final Summary
        console.log('\n--- Import Summary ---');
        console.log(`Successfully inserted ${showInsertCount} NEW shows.`); // Updated wording
        console.log(`Processed approximately ${themeInsertCount} unique themes (new or existing).`);
        console.log(`Successfully created ${linkInsertCount} new show-theme links.`);
        if (skippedShowCount > 0) console.log(`Skipped ${skippedShowCount} entries (invalid data or duplicate titles).`);
        if (errorCount > 0) console.log(`Encountered ${errorCount} errors during processing (check logs above).`);
        console.log('----------------------\n');

    } catch (error) { // Main catch block
        console.error('A critical error occurred during the import process:', error.message);
        if (db && db.open) {
            try { console.log('Attempting to rollback transaction...'); await runDb(db, 'ROLLBACK;'); console.log('Transaction rolled back.'); }
            catch (rollbackErr) { console.error('Failed to rollback transaction:', rollbackErr); }
        }
    } finally { // Finally block
        if (db && db.open) { await closeDb(db); }
        console.log("✅ import_data.js script finished."); // Add end log
    }
}

// Run the import
importData();
</file>

<file path="database/schema.sql">
-- database/schema.sql

-- Drop tables in reverse order of dependency to avoid errors
DROP TABLE IF EXISTS show_themes;
DROP TABLE IF EXISTS themes;
DROP TABLE IF EXISTS shows;

-- Create the main shows table
CREATE TABLE shows (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL UNIQUE,
    stimulation_score INTEGER CHECK(stimulation_score BETWEEN 1 AND 5),
    platform TEXT,
    target_age_group TEXT,
    min_age INTEGER,
    max_age INTEGER,
    seasons TEXT,
    avg_episode_length TEXT,
    interactivity_level TEXT,
    animation_style TEXT,
    dialogue_intensity TEXT,
    sound_effects_level TEXT,
    music_tempo TEXT,
    total_music_level TEXT,
    total_sound_effect_time_level TEXT,
    scene_frequency TEXT,
    image_filename TEXT,
    dialogue_intensity_num INTEGER CHECK(dialogue_intensity_num IS NULL OR dialogue_intensity_num BETWEEN 0 AND 5),
    scene_frequency_num INTEGER CHECK(scene_frequency_num IS NULL OR scene_frequency_num BETWEEN 0 AND 5),
    sound_effects_level_num INTEGER CHECK(sound_effects_level_num IS NULL OR sound_effects_level_num BETWEEN 0 AND 5),
    total_music_level_num INTEGER CHECK(total_music_level_num IS NULL OR total_music_level_num BETWEEN 0 AND 5)
);

-- Create a separate table for unique themes
CREATE TABLE themes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE COLLATE NOCASE
);

-- Create a junction table to link shows and themes (Many-to-Many)
CREATE TABLE show_themes (
    show_id INTEGER NOT NULL,
    theme_id INTEGER NOT NULL,
    PRIMARY KEY (show_id, theme_id),
    FOREIGN KEY (show_id) REFERENCES shows (id) ON DELETE CASCADE,
    FOREIGN KEY (theme_id) REFERENCES themes (id) ON DELETE CASCADE
);

-- --- Indexes for Faster Queries ---

-- Existing Indexes
CREATE INDEX idx_shows_min_age ON shows (min_age);
CREATE INDEX idx_shows_max_age ON shows (max_age);
CREATE INDEX idx_shows_stimulation_score ON shows (stimulation_score);
CREATE INDEX idx_themes_name ON themes (name);
CREATE INDEX idx_show_themes_show_id ON show_themes (show_id);
CREATE INDEX idx_show_themes_theme_id ON show_themes (theme_id);

-- Index for sorting/searching by title (helps exact match, partial for prefix, NOT '%search%')
-- Note: Adding COLLATE NOCASE might help case-insensitive lookups if needed,
-- but the queries already use COLLATE NOCASE where appropriate.
CREATE INDEX idx_shows_title ON shows (title); -- Added explicit index for title

-- *** NEW Indexes for Common Filter Fields ***
CREATE INDEX idx_shows_interactivity ON shows (interactivity_level COLLATE NOCASE);
CREATE INDEX idx_shows_dialogue ON shows (dialogue_intensity COLLATE NOCASE);
CREATE INDEX idx_shows_scene_freq ON shows (scene_frequency COLLATE NOCASE);

-- Optional indexes for numeric scores if heavily used for filtering/sorting
-- CREATE INDEX idx_shows_dialogue_num ON shows (dialogue_intensity_num);
-- CREATE INDEX idx_shows_scene_freq_num ON shows (scene_frequency_num);
-- etc. (Let's hold off on these unless proven necessary)
</file>

<file path="server/db/queries.js">
// server/db/queries.js
const { getDbConnection } = require('./connection'); // Import the function to get DB connection

// Runs a query expected to return multiple rows (SELECT)
function runQuery(sql, params = []) {
    return new Promise((resolve, reject) => {
        try {
            const db = getDbConnection(); // Get the active DB connection
            db.all(sql, params, (err, rows) => {
                if (err) {
                    console.error(`Error running query: ${sql}`, params, err.message);
                    reject(new Error('Database query error')); // Original error logged above
                } else {
                    resolve(rows); // Resolve with array of rows
                }
            });
        } catch (connectionError) {
             reject(connectionError); // Propagate connection errors
        }
    });
}

// Runs a query expected to return a single row (SELECT with LIMIT 1)
function getSingleRow(sql, params = []) {
    return new Promise((resolve, reject) => {
         try {
            const db = getDbConnection();
            db.get(sql, params, (err, row) => {
                if (err) {
                    console.error(`Error getting single row: ${sql}`, params, err.message);
                    reject(new Error('Database query error')); // Original error logged above
                } else {
                    resolve(row); // row is undefined if not found
                }
            });
         } catch (connectionError) {
             reject(connectionError);
         }
    });
}

// Runs a query for INSERT, UPDATE, DELETE
function runAction(sql, params = []) {
     return new Promise((resolve, reject) => {
         try {
             const db = getDbConnection();
             // Use function() to access `this` for lastID, changes
             db.run(sql, params, function(err) {
                 if (err) {
                     console.error(`Error running action query: ${sql}`, params, err.message);
                     reject(new Error('Database action error')); // Original error logged above
                 } else {
                     // Resolve with info about the action
                     resolve({ lastID: this.lastID, changes: this.changes });
                 }
             });
         } catch (connectionError) {
             reject(connectionError);
         }
     });
 }

// Helper to get themes for a list of show IDs
async function getThemesForShows(showIds) {
    if (!showIds || showIds.length === 0) {
        return {}; // Return empty object if no IDs
    }
    const placeholders = showIds.map(() => '?').join(',');
    const themeSql = `
        SELECT st.show_id, t.name
        FROM show_themes st
        JOIN themes t ON st.theme_id = t.id
        WHERE st.show_id IN (${placeholders})
        ORDER BY st.show_id;
    `;
    try {
        const themeRows = await runQuery(themeSql, showIds); // Use runQuery now
        const themesByShowId = {};
        themeRows.forEach(row => {
            if (!themesByShowId[row.show_id]) {
                themesByShowId[row.show_id] = [];
            }
            themesByShowId[row.show_id].push(row.name);
        });
        return themesByShowId;
    } catch (error) {
        console.error("Error fetching themes for multiple shows:", error.message);
        // Re-throw or handle more gracefully depending on need
        throw new Error('Failed to fetch themes for shows'); // Original error logged above
    }
}

// Helper to attach themes to shows
function attachThemesToShowList(shows, themesMap) {
     return shows.map(show => ({
        ...show,
        themes: themesMap[show.id] || [] // Add themes array, default to empty
    }));
}

// Export all query functions
module.exports = {
    runQuery,
    getSingleRow,
    runAction, // Export the action runner too if needed later
    getThemesForShows,
    attachThemesToShowList
};
</file>

<file path="client/src/components/catalog/ShowCard.jsx">
// client/src/components/catalog/ShowCard.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ScoreVisual from '../shared/ScoreVisual';

const placeholderImage = "/images/placeholder-show.png";

// Define the component function as before
const ShowCardComponent = ({ show }) => {
    // console.log(`Rendering ShowCard for ID: ${show?.id}`);

    // Gracefully handle invalid show prop before destructuring
    if (!show || typeof show !== 'object' || !show.id) {
        console.error("ShowCard received invalid show prop:", show);
        return <div className="border border-red-300 p-2 text-red-600 text-xs">Invalid Show Data</div>;
    }

    // *** ADD THIS DESTRUCTURING ASSIGNMENT ***
    // Extract needed properties from the 'show' object, providing default values
    const {
        id,
        title = "Unknown Title", // Default if title is missing
        target_age_group = "N/A", // Default if target_age_group is missing
        themes = [], // Default to empty array if themes is missing or not an array
        stimulation_score = 0, // Default if stimulation_score is missing
        image_filename = null // Default if image_filename is missing
    } = show;
    // *** END DESTRUCTURING ASSIGNMENT ***

    // Now 'title', 'id', etc., are defined variables we can use

    // Use the extracted image_filename variable
    const imageUrl = image_filename ? `/images/${image_filename.replace(/\.(jpg|jpeg|png)$/i, '.webp')}` : placeholderImage;
    // Ensure themes is an array before slicing (already handled by default in destructuring)
    const displayedThemes = themes.slice(0, 3); // Max 3 themes displayed on card

    return (
        <div className="border border-gray-200 rounded-lg shadow-md bg-white overflow-hidden flex flex-col transition duration-200 hover:shadow-lg">
            {/* Image */}
            <div className="w-full h-40 bg-gray-200 flex items-center justify-center">
                <img
                    src={imageUrl}
                    alt={`${title} poster`} // Now 'title' is defined
                    className="w-full h-full object-cover"
                    onError={(e) => {
                         // Use extracted image_filename here too
                         const originalImageUrl = image_filename ? `/images/${image_filename}` : placeholderImage;
                         if (e.target.src !== originalImageUrl) {
                            e.target.src = originalImageUrl;
                         } else {
                            e.target.onerror = null;
                            e.target.src = placeholderImage;
                         }
                    }}
                    loading="lazy"
                />
            </div>
            {/* Details */}
            <div className="p-4 flex flex-col flex-grow">
                 {/* Use extracted variables */}
                 <h3 className="text-lg font-semibold mb-1 text-gray-800 truncate" title={title}>{title}</h3>
                 <p className="text-sm text-gray-500 mb-2">Age: {target_age_group}</p>
                 <div className="mb-3 flex flex-wrap gap-1 min-h-[20px]">
                    {displayedThemes.length > 0 ? displayedThemes.map((theme, index) => (
                        <span key={index} className="text-xs bg-teal-100 text-teal-800 px-2 py-0.5 rounded-full">
                            {theme}
                        </span>
                    )) : (
                        <span className="text-xs text-gray-400 italic">No themes listed</span>
                    )}
                    {/* Check original themes length before showing ellipsis */}
                    {Array.isArray(show.themes) && show.themes.length > 3 && (
                        <span className="text-xs text-gray-400 px-2 py-0.5">...</span>
                    )}
                </div>
                 <div className="mb-4">
                     <ScoreVisual score={stimulation_score} />
                 </div>

                {/* Learn More Button */}
                <div className="mt-auto">
                    {/* Use extracted id */}
                    <Link
                        to={`/show/${id}`}
                        className="block w-full text-center px-4 py-2 bg-teal-600 text-white rounded hover:bg-teal-700 transition duration-200 text-sm"
                    >
                        Learn More
                    </Link>
                </div>
            </div>
        </div>
    );
};

// Wrap the component with React.memo (keep this)
const ShowCard = React.memo(ShowCardComponent);

export default ShowCard; // Export the memoized version
</file>

<file path="client/src/pages/CatalogPage.jsx">
// client/src/pages/CatalogPage.jsx
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useSearchParams } from 'react-router-dom';
import FilterPanel from '../components/catalog/FilterPanel';
import ShowCard from '../components/catalog/ShowCard';
import { getShows } from '../services/showService';
import useDebounce from '../hooks/useDebounce';

const DEBOUNCE_DELAY = 500; // Delay in milliseconds (e.g., 500ms = half a second)

const CatalogPage = () => {
  const [shows, setShows] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [totalPages, setTotalPages] = useState(0);
  const [searchParams, setSearchParams] = useSearchParams();

  // --- State for the IMMEDIATE search input value ---
  const [localSearchTerm, setLocalSearchTerm] = useState(searchParams.get('search') || '');

  // --- Debounce the local search term ---
  const debouncedSearchTerm = useDebounce(localSearchTerm, DEBOUNCE_DELAY);

  // --- Derive Filters and Page from URL ---
  const activeFilters = useMemo(() => {
    const filters = {};
    searchParams.forEach((value, key) => {
      if (key !== 'page' && key !== 'limit') {
        filters[key] = value;
      }
    });
    return filters;
  }, [searchParams]);

  const currentPage = useMemo(() => {
    const pageParam = searchParams.get('page');
    const page = parseInt(pageParam, 10);
    return !isNaN(page) && page > 0 ? page : 1;
  }, [searchParams]);

  // --- Effect to update URL when DEBOUNCED search term changes ---
  useEffect(() => {
    const currentParams = new URLSearchParams(searchParams);
    const currentSearchInUrl = currentParams.get('search') || '';

    if (debouncedSearchTerm !== currentSearchInUrl) {
      if (debouncedSearchTerm) {
        currentParams.set('search', debouncedSearchTerm);
      } else {
        currentParams.delete('search');
      }
      currentParams.set('page', '1');
      setIsLoading(true);
      setSearchParams(currentParams, { replace: true });
    }
  }, [debouncedSearchTerm, searchParams, setSearchParams]);

  // --- Fetching Logic (Depends on URL params including debounced search) ---
  useEffect(() => {
    let isMounted = true;

    const fetchFilters = {};
    searchParams.forEach((value, key) => {
      if (key !== 'page' && key !== 'limit') {
        fetchFilters[key] = value;
      }
    });

    const fetchShows = async () => {
      if (isMounted) setError(null);
      try {
        const data = await getShows(fetchFilters, currentPage);
        if (isMounted) {
          if (data && Array.isArray(data.shows) && typeof data.totalPages === 'number') {
            setShows(data.shows);
            setTotalPages(data.totalPages);
            // Validation logic for page number can go here if needed
          } else {
            setError('Invalid data received from server.');
          }
        }
      } catch (err) {
        if (isMounted) setError('Failed to fetch shows.');
      } finally {
        if (isMounted) setIsLoading(false);
      }
    };

    setIsLoading(true);
    fetchShows();

    return () => {
      isMounted = false;
    };
  }, [searchParams, currentPage]);

  // --- Filter Handlers ---
  const handleFilterChange = useCallback(
    (newFilters) => {
      const cleanFilters = { ...newFilters };
      Object.keys(cleanFilters).forEach((key) => {
        if (key === 'search') {
          if (localSearchTerm) cleanFilters[key] = localSearchTerm;
          else delete cleanFilters[key];
        } else if (
          cleanFilters[key] === null ||
          cleanFilters[key] === undefined ||
          cleanFilters[key] === ''
        ) {
          delete cleanFilters[key];
        }
      });

      cleanFilters.page = '1';
      setIsLoading(true);
      setSearchParams(cleanFilters, { replace: true });
    },
    [setSearchParams, localSearchTerm]
  );

  // --- Handler specifically for the Search Input change ---
  const handleSearchInputChange = useCallback((event) => {
    setLocalSearchTerm(event.target.value);
  }, []);

  const handleResetFilters = useCallback(() => {
    setLocalSearchTerm('');
    setIsLoading(true);
    setSearchParams({ page: '1' }, { replace: true });
  }, [setSearchParams]);

  // --- Pagination Handlers ---
  const handlePageChange = useCallback(
    (newPage) => {
      if (newPage < 1 || newPage > totalPages || isLoading || newPage === currentPage) return;
      const params = new URLSearchParams(searchParams);
      params.set('page', newPage.toString());
      setIsLoading(true);
      setSearchParams(params, { replace: true });
    },
    [searchParams, setSearchParams, totalPages, isLoading, currentPage]
  );

  const handleNextPage = useCallback(() => handlePageChange(currentPage + 1), [handlePageChange, currentPage]);
  const handlePrevPage = useCallback(() => handlePageChange(currentPage - 1), [handlePageChange, currentPage]);

  // --- JSX Rendering ---
  return (
    <div className="flex flex-col md:flex-row gap-6 md:gap-8">
      <aside className="w-full md:w-1/4 lg:w-1/5">
        <h2 className="text-xl font-semibold mb-4 text-gray-700">Filters</h2>
        <FilterPanel
          filters={activeFilters}
          onFilterChange={handleFilterChange}
          searchInputValue={localSearchTerm}
          onSearchInputChange={handleSearchInputChange}
        />
        <button onClick={handleResetFilters} className="mt-4 px-4 py-2 bg-gray-100 rounded">
          Reset All Filters
        </button>
      </aside>
      <section className="w-full md:w-3/4 lg:w-4/5">
        <h1 className="text-3xl font-bold text-teal-700 mb-6">Browse Shows</h1>
        <div className="min-h-[60vh]">
          {isLoading && <p>Loading shows...</p>}
          {error && <p className="text-red-600">{error}</p>}
          {!isLoading && !error && shows.length === 0 && <p>No shows found.</p>}
          <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {shows.map((show) => (
              <ShowCard key={show.id} show={show} />
            ))}
          </div>
          {!isLoading && totalPages > 1 && (
            <div className="flex justify-center mt-6 space-x-4">
              <button
                onClick={handlePrevPage}
                disabled={currentPage === 1}
                className="px-3 py-1 border rounded disabled:opacity-50"
              >
                Previous
              </button>
              <span>
                Page {currentPage} of {totalPages}
              </span>
              <button
                onClick={handleNextPage}
                disabled={currentPage === totalPages}
                className="px-3 py-1 border rounded disabled:opacity-50"
              >
                Next
              </button>
            </div>
          )}
        </div>
      </section>
    </div>
  );
};

export default CatalogPage;
</file>

<file path="client/src/pages/HomePage.jsx">
// client/src/pages/HomePage.jsx
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
// Import API service function
import { getAutocompleteSuggestions, getHomepageData } from '../services/showService.js';
// Import child components
import FeaturedShow from '../components/home/FeaturedShow.jsx';
import CategoryCard from '../components/home/CategoryCard.jsx';
import ShowCategoryRow from '../components/home/ShowCategoryRow.jsx';
// Import Custom Hook
import useAutocomplete from '../hooks/useAutocomplete.js'; // *** IMPORT HOOK ***
// Other imports
import { FaChartBar, /* ... other icons ... */ FaHandsHelping } from 'react-icons/fa';
import axios from 'axios';

// --- Category Data ---
const categories = [ /* ... as before ... */ ];

// --- Main HomePage Component ---
const HomePage = () => {
    const navigate = useNavigate();

    // *** Use the Autocomplete Hook ***
    const {
        inputValue: searchTerm, // Rename inputValue to searchTerm for clarity here
        suggestions,
        isLoading: isAutocompleteLoading, // Rename to avoid conflict with page loading
        showSuggestions,
        handleInputChange: handleSearchChange, // Rename handler
        handleSuggestionSelect,
        hideSuggestions,
        resetAutocomplete,
        containerRef: autocompleteContainerRef // Rename ref
    } = useAutocomplete(getAutocompleteSuggestions, 300); // Pass the fetch function

    // --- State for Page Content Loading ---
    const [homepageData, setHomepageData] = useState(null);
    const [isPageLoading, setIsPageLoading] = useState(true); // Renamed loading state
    const [pageError, setPageError] = useState(null); // Renamed error state
    const [isNavigating, setIsNavigating] = useState(false); // For suggestion click loading

    // --- Fetching Logic for Homepage Data ---
    useEffect(() => {
        // ... (Homepage data fetching logic remains exactly the same as before, using AbortController) ...
        // ... Make sure to use setIsPageLoading and setPageError here ...
        const controller = new AbortController(); /* ... */
        const fetchHomepageContent = async () => {
            setIsPageLoading(true); setPageError(null); setHomepageData(null);
            try {
                const data = await getHomepageData(); /* pass signal if service adapted */
                setHomepageData(data);
            } catch (err) {
                 if (axios.isCancel(err) || err.name === 'AbortError') { /* ... */ }
                 else { setPageError(err.message || "Failed to load content."); }
            } finally {
                 if (!controller.signal.aborted) setIsPageLoading(false);
            }
        };
        fetchHomepageContent();
        return () => controller.abort();
    }, []);

    // --- Handlers specific to HomePage ---
    const handleSearchSubmit = (event) => {
        event.preventDefault();
        if (!searchTerm.trim()) return;
        hideSuggestions(); // Hide suggestions using hook's handler
        navigate(`/shows?search=${encodeURIComponent(searchTerm.trim())}`);
    };

    // Handle click action AFTER suggestion is selected by the hook
    const handleSuggestionClickAction = (selectedSuggestion) => {
        // The hook already updated the searchTerm state via handleSuggestionSelect
        setIsNavigating(true);
        try {
            // Navigate to search results page after selecting a suggestion
             navigate(`/shows?search=${encodeURIComponent(selectedSuggestion)}`);
        } catch(err) {
             console.error("Error navigating from suggestion:", err);
             navigate(`/shows?search=${encodeURIComponent(selectedSuggestion)}`); // Fallback
        } finally {
            setIsNavigating(false);
        }
    };


    // --- JSX Output ---
    return (
        <div className="space-y-12">
            {/* Hero/Search Section */}
            <section className="text-center py-12 bg-gradient-to-r from-teal-50 to-blue-50 rounded-lg shadow-sm border border-gray-100">
                {/* ... (h1, p tags) ... */}
                {/* Search Form - Assign the ref from the hook */}
                <form onSubmit={handleSearchSubmit} className="max-w-lg mx-auto relative" ref={autocompleteContainerRef}>
                    <input
                        type="search"
                        placeholder="Search for show titles..."
                        value={searchTerm} // Use value from hook
                        onChange={handleSearchChange} // Use handler from hook
                        className="w-full px-4 py-2 border border-gray-300 rounded-full shadow-sm focus:ring-2 focus:ring-teal-500 focus:outline-none"
                    />
                    <button type="submit" className="absolute right-0 top-0 mt-1 mr-1 px-4 py-1.5 bg-teal-600 text-white rounded-full hover:bg-teal-700">
                        Search
                    </button>
                    {/* Autocomplete Suggestions - Use state from hook */}
                    {showSuggestions && suggestions.length > 0 && (
                        <ul className="absolute left-0 right-0 mt-1 bg-white border border-gray-300 rounded-md shadow-lg z-10 text-left max-h-60 overflow-y-auto">
                            {(isAutocompleteLoading ? // Show loading within list if needed
                                <li className="px-4 py-2 text-gray-500 italic">Loading...</li>
                                : suggestions.map((suggestion, index) => (
                                    <li
                                        key={index}
                                        className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                                        // Use onMouseDown to trigger before blur potentially hides list
                                        onMouseDown={() => {
                                            handleSuggestionSelect(suggestion); // Let hook update state
                                            handleSuggestionClickAction(suggestion); // Perform navigation
                                        }}
                                    >
                                        {suggestion}
                                    </li>
                                ))
                            )}
                        </ul>
                    )}
                     {isNavigating && <p className="text-sm text-gray-500 mt-2">Loading...</p>}
                </form>
            </section>

            {/* Page Loading/Error State */}
            {isPageLoading && <div className="text-center p-6 bg-gray-100 rounded-lg">Loading homepage content...</div>}
            {pageError && <div className="text-center p-4 bg-red-100 text-red-700 rounded border border-red-300">Error: {pageError}</div>}


             {/* Featured Show Section - use page loading state */}
             {!isPageLoading && !pageError && homepageData?.featuredShow && (
                 <FeaturedShow show={homepageData.featuredShow} />
             )}
             {!isPageLoading && !pageError && !homepageData?.featuredShow && (
                  <div className="text-center p-6 bg-gray-100 rounded-lg">No featured show available.</div>
             )}

            {/* Category Links Section */}
            <section>
                {/* ... (CategoryCards map) ... */}
            </section>

            {/* Show Rows using ShowCategoryRow - use page loading state */}
             {!isPageLoading && !pageError && homepageData && (
                 <>
                     <ShowCategoryRow title="Popular Shows" shows={homepageData.popularShows} /* ... */ />
                     <ShowCategoryRow title="Highly Rated (Stim Score)" shows={homepageData.ratedShows} /* ... */ />
                     <ShowCategoryRow title="Lower Stimulation" shows={homepageData.lowStimShows} /* ... */ />
                     <ShowCategoryRow title="Higher Interaction" shows={homepageData.highInteractionShows} /* ... */ />
                 </>
             )}

        </div>
    );
};

export default HomePage;
</file>

<file path="client/src/pages/ShowDetailPage.jsx">
// client/src/pages/ShowDetailPage.jsx
import React, { useState, useEffect, useMemo } from 'react'; // Added useMemo
import { useParams, Link } from 'react-router-dom';
import { getShowById } from '../services/showService';
import { Pie } from 'react-chartjs-2';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title);

const placeholderImage = "/images/sstc.jpg";

const ShowDetailPage = () => {
    const { id } = useParams();
    const [show, setShow] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    // Removed chart data state - will use memoized variables directly

    console.log("Rendering ShowDetailPage (Memo Fix Attempt). isLoading:", isLoading, "Error:", error);

    // --- Fetch Show Data ---
    useEffect(() => {
        console.log("ShowDetailPage (Memo Fix Attempt) Effect Running for ID:", id);
        if (!id) {
            setIsLoading(false);
            setError("No Show ID provided.");
            return;
        }
        setIsLoading(true);
        setError(null);
        setShow(null); // Reset show data

        getShowById(id)
            .then(fetchedShowData => {
                console.log("Fetched Show Detail Data:", fetchedShowData);
                // ** Only set show data and loading state here **
                setShow(fetchedShowData || null); // Set to null if fetch returns nothing
                setIsLoading(false);
            })
            .catch(err => {
                console.error("ShowDetailPage (Memo Fix Attempt) fetch error:", err);
                setError(err.message || `Failed to load show with ID ${id}.`);
                setShow(null);
                setIsLoading(false);
            });

        return () => {
            console.log("ShowDetailPage (Memo Fix Attempt) Effect Cleanup for ID:", id);
        };
    }, [id]); // Depend only on ID

    // --- Prepare Chart Data using useMemo ---
    const pieChartData = useMemo(() => {
        if (!show) return null; // Return null if show data isn't loaded yet
        console.log("Memoizing Pie Chart Data"); // Log memo calculation

        const dialogueScore = show.dialogue_intensity_num ?? 0;
        const sceneFreqScore = show.scene_frequency_num ?? 0;
        const soundFxScore = show.sound_effects_level_num ?? 0;
        const musicScore = show.total_music_level_num ?? 0;
        const totalScoreSum = dialogueScore + sceneFreqScore + soundFxScore + musicScore;
        let piePercentages = [0, 0, 0, 0];
        if (totalScoreSum > 0) {
            piePercentages = [
                (dialogueScore / totalScoreSum) * 100,
                (sceneFreqScore / totalScoreSum) * 100,
                (soundFxScore / totalScoreSum) * 100,
                (musicScore / totalScoreSum) * 100,
            ];
        }
        return {
            labels: ['Dialogue', 'Scene Freq.', 'Sound FX', 'Music'],
            datasets: [{
                label: 'Approx. Contribution by Factor Score',
                data: piePercentages,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)',
                    'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)'
                ],
                borderColor: '#ffffff', borderWidth: 1,
            }]
        };
    }, [show]); // Recalculate only when show data changes

    const barChartData = useMemo(() => {
        if (!show) return null; // Return null if show data isn't loaded yet
        console.log("Memoizing Bar Chart Data"); // Log memo calculation

        return {
            labels: ['Dialogue', 'Scene Freq.', 'Sound FX', 'Music'],
            datasets: [{
                label: show.title || 'This Show',
                data: [
                    show.dialogue_intensity_num ?? 0, show.scene_frequency_num ?? 0,
                    show.sound_effects_level_num ?? 0, show.total_music_level_num ?? 0
                ],
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderColor: 'rgba(54, 162, 235, 1)', borderWidth: 1,
            }]
        };
    }, [show]); // Recalculate only when show data changes


    // --- Chart Options (remain the same) ---
    const chartOptions = {
        responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'top' }, title: { display: false } },
    };
    const barChartOptions = {
        responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'top' }, title: { display: false } }, scales: { y: { beginAtZero: true, suggestedMax: 5, ticks: { stepSize: 1 } } }
    };


    // --- Render Logic ---
    if (isLoading) {
        return <p className="text-center text-lg text-gray-600 py-10">Loading show details...</p>;
    }
    if (error) {
        return <p className="text-center text-red-600 bg-red-100 p-4 rounded border border-red-300">{error}</p>;
    }
    if (!show) {
         return <p className="text-center text-gray-500 py-10">Show data not available.</p>;
    }

    // Determine image URL
    const imageUrl = show.image_filename ? `/images/${show.image_filename}` : placeholderImage;

    // Helper function (remains the same)
    const getInteractionExplanation = (level) => {
        switch (level?.toLowerCase()) {
            case 'high': return "This show frequently asks questions or prompts viewers to participate (like Blue's Clues or Dora).";
            case 'moderate': return "This show occasionally encourages participation or has interactive segments.";
            case 'low-moderate': return "This show has limited direct interaction, perhaps some songs or simple call-outs.";
            case 'low': return "This show is primarily passive viewing with little to no direct viewer interaction.";
            default: return "Interaction level information not available.";
        }
    };


    // --- JSX Output with Charts using memoized data ---
    return (
        <div className="max-w-4xl mx-auto bg-white p-6 md:p-8 rounded-lg shadow-lg">
            {/* Header Section */}
            <div className="flex flex-col md:flex-row gap-6 mb-8 border-b pb-6">
                <div className="md:w-1/3 flex-shrink-0">
                     <img
                        src={imageUrl}
                        alt={`${show.title} primary image`}
                        className="rounded-lg shadow-md w-full object-contain mb-3 bg-gray-100"
                        onError={(e) => { e.target.onerror = null; e.target.src=placeholderImage }}
                        loading="lazy"
                     />
                </div>
                <div className="md:w-2/3">
                     <h1 className="text-3xl md:text-4xl font-bold text-teal-800 mb-2">{show.title}</h1>
                    <p className="text-lg text-gray-600 mb-3">
                        <strong>Age Range:</strong> {show.target_age_group}
                    </p>
                    <div className="mb-4">
                        <strong className="text-gray-700">Themes:</strong>
                        <div className="flex flex-wrap gap-2 mt-1">
                            {show.themes && show.themes.length > 0 ? show.themes.map((theme, index) => (
                                <span key={index} className="text-sm bg-teal-100 text-teal-800 px-3 py-1 rounded-full">
                                    {theme}
                                </span>
                            )) : <span className="text-sm text-gray-500 italic">None listed</span>}
                        </div>
                    </div>
                     <p className="text-md text-gray-600">
                         <strong>Platform:</strong> {show.platform || 'N/A'}
                     </p>
                      <p className="text-md text-gray-600">
                         <strong>Avg. Episode Length:</strong> {show.avg_episode_length || 'N/A'}
                     </p>
                     {show.seasons && <p className="text-md text-gray-600"><strong>Seasons:</strong> {show.seasons}</p>}
                </div>
            </div>

            {/* Visual Summaries Section - WITH CHARTS */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                {/* Pie Chart Section */}
                <div className="border p-4 rounded-lg shadow-sm">
                     <h2 className="text-xl font-semibold text-center mb-4 text-teal-700">Stimulation Breakdown</h2>
                     <div className="relative h-64 md:h-80">
                         {/* Use memoized data */}
                         {pieChartData ? (
                             <Pie data={pieChartData} options={chartOptions} />
                         ) : (
                             <p className="text-center text-gray-400 italic mt-10">Loading chart...</p>
                         )}
                     </div>
                </div>

                {/* Bar Chart Section */}
                 <div className="border p-4 rounded-lg shadow-sm">
                     <h2 className="text-xl font-semibold text-center mb-4 text-teal-700">Sensory Factor Levels</h2>
                     <div className="relative h-64 md:h-80">
                         {/* Use memoized data */}
                         {barChartData ? (
                             <Bar data={barChartData} options={barChartOptions} />
                         ) : (
                             <p className="text-center text-gray-400 italic mt-10">Loading chart...</p>
                         )}
                     </div>
                </div>
            </div>

             {/* Interaction Level & Narrative Summary */}
             <div className="space-y-6">
                 <div className="border p-4 rounded-lg shadow-sm bg-teal-50">
                     <h2 className="text-xl font-semibold mb-2 text-teal-700">Interaction Level: {show.interactivity_level || 'N/A'}</h2>
                     <p className="text-gray-700">{getInteractionExplanation(show.interactivity_level)}</p>
                 </div>
                 <div className="border p-4 rounded-lg shadow-sm">
                     <h2 className="text-xl font-semibold mb-2 text-gray-700">Summary & Sensory Notes</h2>
                     <p className="text-gray-600 italic">(Detailed narrative summary...)</p>
                     <p className='mt-2 text-sm text-gray-600'><strong>Animation Style:</strong> {show.animation_style || 'N/A'}</p>
                 </div>
             </div>

            {/* Back Button */}
            <div className="mt-8 text-center">
                <Link to="/shows" className="inline-block px-6 py-2 border border-teal-600 text-teal-600 rounded hover:bg-teal-50 transition duration-200">
                    ← Back to Catalog
                </Link>
            </div>
        </div>
    );
};

export default ShowDetailPage;
</file>

<file path="database/reviewed_shows.json">
[
  {
    "title": "A for Adley",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Family Relationships",
      "Family Values",
      "Conflict Resolution",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action Family Videos",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "a-for-adley.jpg"
  },
  {
    "title": "Ada Twist, Scientist",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "STEM",
      "Critical Thinking",
      "Curiosity",
      "Problem Solving",
      "Teamwork",
      "Perseverance",
      "Science"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "ada-twist-scientist.jpg"
  },
  {
    "title": "Adventure Agents",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "6-12, 12+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Environmental Awareness",
      "Cause and Effect",
      "Life Lessons",
      "Outdoor Exploration",
      "Nature",
      "Natural World",
      "Exploration",
      "Motor Skills",
      "Animals",
      "Farm Life",
      "Emotional Intelligence",
      "Problem Solving",
      "Critical Thinking",
      "Teamwork",
      "Curiosity",
      "Adventure",
      "Discovery",
      "Safety",
      "Nature Sounds",
      "Healthy Eating",
      "Confidence Building",
      "Mature Themes",
      "Wild Animal Captures and Cooking"
    ],
    "interactivity_level": "High",
    "animation_style": "Live Action Outdoors Survival Adventure",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "adventure-agents.jpg"
  },
  {
    "title": "Adventure Time (2010-2018)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "10-14",
    "seasons": "10 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Friendship",
      "Entertainment",
      "Fantasy Elements",
      "Adventure",
      "Mild Mature Themes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional hand-drawn 2D animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "adv-time.jpg"
  },
  {
    "title": "Akili and Me",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Early Childhood experiences",
      "Cultures & Traditions",
      "Cultural & Social",
      "Life Lessons",
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Motor Skills",
      "Music",
      "Repetitive Learning",
      "Language Learning",
      "Exercise",
      "Colours",
      "Shapes",
      "sing-a-long",
      "Social-Emotional",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "akili-and-me.jpg"
  },
  {
    "title": "Alma's Way",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Cause and Effect",
      "Social-Emotional",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "almas-way.jpg"
  },
  {
    "title": "Alphablocks",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Preschool-Basics",
      "Literacy",
      "Phonics",
      "Language Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with colorful and stylized block characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "alpha-blocks.jpg"
  },
  {
    "title": "Amakandu",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Engineering Concepts",
      "Creativity & Imagination",
      "Sensory Exploration",
      "Mindfulness",
      "Nature",
      "Relaxation",
      "Captivating Visuals",
      "Nature Sounds",
      "ASMR"
    ],
    "interactivity_level": "Low",
    "animation_style": "Real Props No Animations",
    "dialogue_intensity": "None",
    "sound_effects_level": "High",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "amakandu.jpg"
  },
  {
    "title": "Andy's Dinosaur Adventures",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Dinosaurs",
      "Paleontology",
      "Adventure",
      "Science",
      "Natural History",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Combination of live-action and CGI animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "andys-dinosaur-adventure.jpg"
  },
  {
    "title": "Angelina Ballerina (2008-2010)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural Appreciation",
      "Creativity & Imagination",
      "Perseverance",
      "Friendship",
      "Problem Solving",
      "Ballet",
      "Motor Skills"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "angelina-ballerina.jpg"
  },
  {
    "title": "Art Kids TV",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "5-12",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Arts & Crafts",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Origami",
      "Painting",
      "Drawing",
      "Motor Skills",
      "Literacy",
      "Numeracy",
      "Shapes",
      "Colours"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "art-kids-tv.jpg"
  },
  {
    "title": "Arthur",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "25 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Family Values",
      "Relatable Situations",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Traditional hand-drawn",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "arthur.jpg"
  },
  {
    "title": "Avatar: The Last Airbender",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-14",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Teamwork",
      "Morality",
      "Emotional Intelligence",
      "Entertainment",
      "Fantasy Elements",
      "Martial Arts",
      "Friendship",
      "Responsibility",
      "Perseverance",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D animation inspired by anime styles.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "avatar-last-airbender.jpg"
  },
  {
    "title": "Baba blast",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Dinosaurs",
      "Paleontology",
      "Natural History",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Exploration",
      "Entertainment"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "baba-blast.jpg"
  },
  {
    "title": "Babar",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Responsibility",
      "Problem Solving",
      "Leadership",
      "Emotional Intelligence",
      "Perseverance",
      "Family Values",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "babar.jpg"
  },
  {
    "title": "Babblarna",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "1 Season",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Language Learning",
      "Repetitive Learning",
      "Social-Emotional",
      "Phonics"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Very Low",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "babblarna.jpg"
  },
  {
    "title": "Badanamu",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "1-5",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Preschool-Basics",
      "sing-a-long",
      "Numeracy",
      "Literacy",
      "Motor Skills",
      "Cognitive Development",
      "Language Learning",
      "Phonics",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "badanamu.jpg"
  },
  {
    "title": "Bananas in Pyjamas (2011-2013)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Social-Emotional",
      "sing-a-long",
      "Repetitive Learning"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation introduces brighter colors and more dynamic visuals but the animation remains straightforward to prevent overstimulation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "bananas-in-pyjamas.jpg"
  },
  {
    "title": "Barbapapa (1973-2003)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Environmental Awareness",
      "Creativity & Imagination",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "traditional hand-drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "barbapapa.jpg"
  },
  {
    "title": "Barney & Friends",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "13 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Dance",
      "Social-Emotional",
      "Friendship",
      "Numeracy",
      "Literacy",
      "Music",
      "Teamwork",
      "Shapes",
      "Emotional Intelligence",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "Live action with costumed characters",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "barney-and-friends.jpg"
  },
  {
    "title": "Be Cool, Scooby-Doo! (2015–2018)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "Cartoonish 2D animation style",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "be-cool-scooby-doo.jpg"
  },
  {
    "title": "Bear in the Big Blue House",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Routine",
      "Problem Solving",
      "Emotional Intelligence",
      "Social Development",
      "Relatable Situations",
      "sing-a-long",
      "Bedtime Routines"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action costumed puppetry with detailed sets.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "bear-in-the-big-blue-house.jpg"
  },
  {
    "title": "Beep and Mort",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence",
      "Adventure",
      "Teamwork",
      "Perseverance",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with colorful characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "beep-and-mort.jpg"
  },
  {
    "title": "Ben & Holly's Little Kingdom (2009-2013)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "ben-and-hollys-little-kingdom.jpg"
  },
  {
    "title": "Between the Lions",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "11 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Literacy",
      "Phonics",
      "Language Learning",
      "Reading Comprehension",
      "Music",
      "Humor"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action puppetry, 2D animation, and CGI effects. Bright but balanced colors, with emphasis on text and literacy elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "between-the-lions.jpg"
  },
  {
    "title": "Bill Nye the Science Guy",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-14",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Cause and Effect",
      "Safety",
      "Discovery",
      "Science",
      "Critical Thinking",
      "Experimentation",
      "Curiosity",
      "Natural World",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action with fast-paced editing, animations, and special effects.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "bill-nye-the-science-guy.jpg"
  },
  {
    "title": "Bing",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-4",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social Development",
      "Emotional Intelligence",
      "Problem Solving"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "bing.jpg"
  },
  {
    "title": "Blippi",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Early Childhood experiences",
      "Creativity & Imagination",
      "Curiosity",
      "Animals",
      "Natural World",
      "Exploration",
      "sing-a-long",
      "Dance",
      "Vocabulary",
      "Adventure",
      "Silly Comedy",
      "Colours",
      "Shapes",
      "Nature",
      "Hyper-Activity"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Real-World Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "blippi.jpg"
  },
  {
    "title": "Blue's Clues (1996-2007)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Emotional Intelligence",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Live action, Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Very Low",
    "image_filename": "blues-clues.jpg"
  },
  {
    "title": "Blue's Clues & You! (2019)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Emotional Intelligence",
      "Problem Solving",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "Live action, 3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Very Low",
    "image_filename": "blues-clues-and-you.jpg"
  },
  {
    "title": "Bluey 2018-present",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Family Values",
      "Family Relationships"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "bluey.jpg"
  },
  {
    "title": "Bob the Builder (1997-2015)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "21 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Repetitive Learning",
      "Construction"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Stop-Motion animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "bob-the-builder.jpg"
  },
  {
    "title": "Bob the Builder (2015-2018)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Repetitive Learning",
      "Construction"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "bob-the-builder-2015.jpg"
  },
  {
    "title": "Boba the Show (2021-present)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Early Childhood experiences",
      "Social-Emotional",
      "Friendship",
      "Emotional Intelligence",
      "Social Development",
      "sing-a-long",
      "Dance",
      "Humor",
      "Motor Skills"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with realistic textures and environments.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "boba.jpg"
  },
  {
    "title": "Bounce Patrol",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Literacy",
      "Numeracy",
      "Colours",
      "Animals",
      "Social-Emotional",
      "sing-a-long",
      "Dance",
      "Phonics",
      "Vocabulary",
      "Exercise"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "bounce-patrol.jpg"
  },
  {
    "title": "Brain Candy TV",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Spacetime and the Cosmos",
      "Preschool-Basics",
      "Elementary-Basics",
      "STEM",
      "Early Childhood experiences",
      "Engineering Concepts",
      "Science",
      "Language Learning",
      "Phonics",
      "Vocabulary",
      "Cognitive Development",
      "Curiosity",
      "Natural History",
      "Colours",
      "Literacy"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with Bright Colors and Realistic Models",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "brain-candy-tv.jpg"
  },
  {
    "title": "Bubble Guppies",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Math",
      "Literacy",
      "Science",
      "Social-Emotional",
      "Teamwork",
      "sing-a-long",
      "Problem Solving",
      "Numeracy",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "bubble-guppies.jpg"
  },
  {
    "title": "Builder Brothers' Dream Factory",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Engineering Concepts",
      "Teamwork",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with detailed environments.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "builder-brothers-dream-factory.jpg"
  },
  {
    "title": "Caillou (1997-2010)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "8 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Relatable Situations",
      "Patience",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Friendship",
      "Frequent Whining",
      "Tantrums",
      "Lack of Consequences"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional hand-drawn 2D animation. DIgital later in the seasons",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "caillou.jpg"
  },
  {
    "title": "Caitie's Classroom (SuperSimplePlay)",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "1-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Early Childhood experiences",
      "STEM",
      "Elementary-Basics",
      "Cultural & Social",
      "sing-a-long",
      "Dance",
      "Music",
      "Social-Emotional",
      "Literacy",
      "Numeracy",
      "Social Development",
      "Emotional Intelligence",
      "Motor Skills"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Puppetry and Props",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "caitie_s-classroom-(superssimpleplay).jpg"
  },
  {
    "title": "Canticos (2016-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "1-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Language Learning",
      "Literacy",
      "sing-a-long",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 2D animation with a simple, storybook-inspired art style. The characters are designed with soft, rounded features and bright, pastel colors, reflecting the show's musical and educational focus. The animation often incorporates interactive elements, encouraging audience participation.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "canticos-(2016-present).jpg"
  },
  {
    "title": "Captain Planet and the Planeteers (1990-1996)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Environmental Awareness",
      "Teamwork",
      "Ecosystems",
      "Responsibility",
      "Social Development",
      "Entertainment",
      "Mild Peril"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D Animation with Bold Designs",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "captain-planet-and-the-planeteers-(1990-1996).jpg"
  },
  {
    "title": "Care Bears: Unlock the Magic (2019-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Learning from Mistakes",
      "Emotional Intelligence",
      "Social-Emotional",
      "Social Development",
      "Friendship"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a modern, vibrant design. Color Palette: Bright and pastel colors with high saturation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "care-bears-unlock-the-magi-(2019-present).jpg"
  },
  {
    "title": "Casper Babypants",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "1-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Music",
      "sing-a-long",
      "Vocabulary",
      "Dance",
      "Relaxation",
      "Repetitive Learning",
      "Language Learning",
      "Literacy",
      "Numeracy",
      "Phonics",
      "Routine",
      "Bedtime Routines",
      "Motor Skills",
      "Sensory Exploration",
      "Cognitive Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Simple Animations or Live-Action with Gentle Imagery",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "casper-babypants.jpg"
  },
  {
    "title": "Charlie's Colorform City",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Preschool-Basics",
      "Shapes",
      "Colours",
      "Critical Thinking",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "charlies-colorform-city.jpg"
  },
  {
    "title": "Chip and Potato",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Overcoming Fears",
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Family Values",
      "Emotional Intelligence",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with soft, rounded designs. Color Palette: Warm and pastel colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "chip-and-potato.jpg"
  },
  {
    "title": "City of friends",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Community Service",
      "Teamwork",
      "Responsibility",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "city-of-friends.jpg"
  },
  {
    "title": "CITY VEHICLES",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Creativity & Imagination",
      "Engineering Concepts",
      "Mechanics",
      "Problem Solving",
      "Teamwork",
      "Music",
      "Entertainment"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation with Bright Colors and Realistic Models",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "city-vehicles.jpg"
  },
  {
    "title": "Clifford the Big Red Dog (2000)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Emotional Intelligence",
      "Social Development",
      "Problem Solving",
      "Friendship",
      "Community"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "clifford-the-big-red-dog-(2000).jpg"
  },
  {
    "title": "Clifford the Big Red Dog (2019)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Emotional Intelligence",
      "Friendship",
      "Problem Solving",
      "Social Development",
      "Community"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "clifford-the-big-red-dog-(2019).jpg"
  },
  {
    "title": "Cloudbabies",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Environmental Awareness",
      "Social-Emotional",
      "Responsibility",
      "Teamwork",
      "Social Development",
      "Routine",
      "Bedtime Routines",
      "Natural World",
      "Natural Science",
      "Relaxation",
      "Nature",
      "sing-a-long"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "cloudbabies.jpg"
  },
  {
    "title": "CoasterFan2105",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Engineering Concepts",
      "Cultural Appreciation",
      "Locomotive History",
      "History",
      "Hobbies",
      "Entertainment",
      "Travel Geography",
      "Curiosity",
      "Machinery",
      "Trains"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "High-Definition Live-Action Footage",
    "dialogue_intensity": "Low",
    "sound_effects_level": "High",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "coasterfan2105.jpg"
  },
  {
    "title": "Cocomelon",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "10 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Shapes",
      "Routine",
      "Social-Emotional",
      "Cognitive Development",
      "Language Learning",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with extremely bright and vivid colors.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "cocomelon.jpg"
  },
  {
    "title": "Codename: Kids Next Door",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Teamwork",
      "Problem Solving",
      "Courage",
      "Mischievous Behaviour",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with stylized character designs. Color Palette: Bright and varied colors with bold outlines.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "codename-kids-next-door.jpg"
  },
  {
    "title": "Colourblocks",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Colours",
      "Shapes",
      "Art",
      "Motor Skills",
      "Colour Combinations"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "colourblocks.jpg"
  },
  {
    "title": "Cosmic kids yoga",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Life Lessons",
      "Positive Engaging Screen-Time",
      "Mindfulness",
      "Exercise",
      "Yoga",
      "Emotional Intelligence",
      "Routine",
      "Sensory Exploration",
      "Relaxation",
      "sing-a-long",
      "Positive Mindset"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Colorful Green Screen Animations",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "cosmic-kids-yoga.jpg"
  },
  {
    "title": "Courage the Cowardly Dog (1999-2002)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "10-14",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Overcoming Fears",
      "Problem Solving",
      "Entertainment",
      "Humor",
      "Courage",
      "Perseverance",
      "Dark Themes",
      "Surreal Imagery",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with surreal and sometimes dark visuals. Color Palette: Varied colors with contrasting dark and bright tones.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Varies",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "courage-the-cowardly-dog-(1999-2002).jpg"
  },
  {
    "title": "Cowboy Jack",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Positive Role Models",
      "Life Lessons",
      "Exploration",
      "Relatable Situations",
      "Vocabulary",
      "Social Development",
      "Social-Emotional",
      "Curiosity",
      "History",
      "Adventure",
      "Discovery",
      "Travel Geography"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Real-World Exploration",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "cowboy-jack.jpg"
  },
  {
    "title": "Curious George (2006-present)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "15 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Motor Skills",
      "Discovery",
      "Science",
      "Curiosity",
      "Exploration"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital hand-drawn 2D artwork animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "curious-george-(2006-present).jpg"
  },
  {
    "title": "Cyberchase (2002-present)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "15 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Problem Solving",
      "Critical Thinking",
      "Math",
      "Science",
      "Entertainment"
    ],
    "interactivity_level": "High",
    "animation_style": "traditional 2D hand-drawn animation. Digital in later series.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "cyberchase-2002-present).jpg"
  },
  {
    "title": "Daniel Tiger's Neighbourhood",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Communication & Expression",
      "Life Lessons",
      "Social-Emotional",
      "Emotional Intelligence",
      "Problem Solving",
      "Social Development",
      "Relatable Situations",
      "Friendship",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "daniel-tigers-neighbourhood.jpg"
  },
  {
    "title": "Danny Go!",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Physical Fitness",
      "Cultural Appreciation",
      "Creativity & Imagination",
      "Preschool-Basics",
      "sing-a-long",
      "Phonics",
      "Entertainment",
      "Interactive Game Elements",
      "Dance",
      "Repetitive Learning",
      "Music",
      "Exercise"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Interactive Elements",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "danny-go!.jpg"
  },
  {
    "title": "Davey and Goliath",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cause and Effect",
      "Life Lessons",
      "Morality",
      "Family Values",
      "Religion",
      "Responsibility",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-Motion Animation using clay figures",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "davey-and-goliath.jpg"
  },
  {
    "title": "De Zoete Zusjes",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "4-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Family Values",
      "Family Relationships",
      "Relatable Situations",
      "Problem Solving",
      "Vocabulary",
      "Dutch Language"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action with Puppetry and Props",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "de-zoete-zusjes.jpg"
  },
  {
    "title": "DG Bible Songs",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Religious Teachings",
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Spiritual Development",
      "Biblical Stories",
      "Religion",
      "sing-a-long",
      "Family Values",
      "Music",
      "Christian Values",
      "Faith",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "high-quality animation and music",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "dg-bible-songs.jpg"
  },
  {
    "title": "Diego",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Environmental Awareness",
      "Animal Behaviour",
      "Wildlife Conservation",
      "Language Learning",
      "Problem Solving",
      "Natural World"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "diego.jpg"
  },
  {
    "title": "Digimon: Digital Monsters",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-14",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Teamwork",
      "Friendship",
      "Perseverance",
      "Entertainment",
      "Adventure",
      "Fantasy Elements",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional 2D Anime-style Animation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "digimon-digital-monsters.jpg"
  },
  {
    "title": "Dino Dana",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-9",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Paleontology",
      "Science",
      "Curiosity",
      "Problem Solving",
      "Critical Thinking",
      "Natural History",
      "Ecosystems"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with CGI Dinosaurs. Color Palette: Natural colors with realistic environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "dino-dana.jpg"
  },
  {
    "title": "Dino Ranch",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Teamwork",
      "Responsibility",
      "Problem Solving",
      "Adventure",
      "Dinosaurs"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "dino-ranch.jpg"
  },
  {
    "title": "Dinosaur train",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Friendship",
      "Paleontology",
      "Natural History",
      "Dinosaurs",
      "Natural World",
      "Exploration",
      "Science"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "dinosaur-train.jpg"
  },
  {
    "title": "Dinotrux",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Teamwork",
      "Entertainment",
      "Problem Solving",
      "Engineering Concepts",
      "Dinosaurs",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed characters and environments. Color Palette: Bright and vivid colors with metallic textures.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "dinotrux.jpg"
  },
  {
    "title": "Doc McStuffins",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Health & Well-being",
      "Social-Emotional",
      "Problem Solving",
      "Emotional Intelligence",
      "Medical Care",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with soft, rounded designs. Color Palette: Bright and cheerful colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "doc-mcstuffins.jpg"
  },
  {
    "title": "Doggyland",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Dance",
      "sing-a-long",
      "Cognitive Development",
      "Literacy",
      "Numeracy",
      "Colours",
      "Shapes",
      "Animals",
      "Social-Emotional",
      "Repetitive Learning",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "3D Animation with Bright Colors and Anthropomorphic Dogs",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "doggyland.jpg"
  },
  {
    "title": "Dora the Explorer (2000-2014)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "2-6",
    "seasons": "8 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Language Learning",
      "Problem Solving",
      "Geography",
      "Teamwork",
      "Cognitive Development",
      "Adventure"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "dora-the-explorer-(2000-2014).jpg"
  },
  {
    "title": "Dragon Ball",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "10-16",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Positive Role Models",
      "Entertainment",
      "Adventure",
      "Martial Arts",
      "Fantasy Elements",
      "Morality",
      "Mild Violent themes",
      "Mild Fantasy Violence",
      "Mild Peril"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Hand-drawn animation (Anime style).",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "dragon-ball.jpg"
  },
  {
    "title": "Dragon Tales",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Emotional Intelligence",
      "Teamwork",
      "Social Development",
      "Social-Emotional",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with soft designs. Color Palette: Pastel colors with whimsical settings.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "dragon-tales.jpg"
  },
  {
    "title": "Duck & Goose",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Problem Solving",
      "Friendship",
      "Social-Emotional",
      "Teamwork",
      "Emotional Intelligence",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "duck-and-goose.jpg"
  },
  {
    "title": "Ed Edd n Eddy",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cause and Effect",
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Humor",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional 2D Animation with exaggerated designs. Color Palette: Bright colors with bold outlines.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "ed-edd-n-eddy.jpg"
  },
  {
    "title": "Elena of Avalor",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "5-9",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Positive Role Models",
      "Leadership",
      "Responsibility",
      "Emotional Intelligence",
      "Morality"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed designs. Color Palette: Bright and vibrant colors with cultural motifs.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "elena-of-avalor.jpg"
  },
  {
    "title": "Elmo's World",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "14 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Preschool-Basics",
      "Motor Skills",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Numeracy",
      "Literacy",
      "Colours",
      "Shapes"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "elmos-world.jpg"
  },
  {
    "title": "English Tree",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Repetitive Learning",
      "Literacy",
      "Phonics",
      "Vocabulary",
      "Music",
      "Numeracy",
      "Colours",
      "Shapes",
      "Cognitive Development",
      "Language Learning",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "2D and 3D Animation with Bright Colors and Simple Characters",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "english-tree.jpg"
  },
  {
    "title": "Ernst, Bobbie en de rest",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Humor",
      "Social Development",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Dutch children's show, Live-Action with comedic elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "ernst-bobbie-en-de-rest.jpg"
  },
  {
    "title": "Fireman Sam (1987)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "15 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "Community Service",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Stop-Motion animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "fireman-sam-(1987).jpg"
  },
  {
    "title": "Fireman Sam (2008)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "Community Service",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "fireman-sam-(2008).jpg"
  },
  {
    "title": "Franklin (1997-2004)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Hand-drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "franklin-(1997-2004).jpg"
  },
  {
    "title": "Franklin and Friends (2011)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Teamwork",
      "Relatable Situations",
      "Problem Solving"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename":   "franklin-and-friends-(2011).jpg"
  },
  {
    "title": "Frog and Toad",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence",
      "Nature",
      "Relatable Situations",
      "Patience"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a hand-drawn aesthetic.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "frog-and-toad.jpg"
  },
  {
    "title": "Gabby's Dollhouse",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "10 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action and 3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "gabbys-dollhouse.jpg"
  },
  {
    "title": "Gecko’s Garage",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Engineering Concepts",
      "Mechanics",
      "Teamwork",
      "Shapes",
      "Colours"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "geckos-garage.jpg"
  },
  {
    "title": "Genevieve playhouse",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Teaching with Toys",
      "Preschool-Basics",
      "Colours",
      "Numeracy",
      "Literacy",
      "Multilingual Learning",
      "Entertainment",
      "Humor",
      "Vocabulary"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action Toy Demonstrations with Bright Colors",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "genevieve-playhouse.jpg"
  },
  {
    "title": "Get Rolling with Otis",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Perseverance",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "get-rolling-with-otis.jpg"
  },
  {
    "title": "Gigantosaurus",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Adventure",
      "Problem Solving",
      "Teamwork",
      "Dinosaurs",
      "Entertainment"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "gigantosaurus-may.jpg"
  },
  {
    "title": "GirlsTtoyZZ",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Teaching with Toys",
      "Early Childhood experiences",
      "Sensory Exploration",
      "Entertainment",
      "Toy Review"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "girlsttoyzz.jpg"
  },
  {
    "title": "Go Go! Cory Carson",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "7 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Relatable Situations",
      "Emotional Intelligence",
      "Vehicle Themes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "go-go-cory-carson.jpg"
  },
  {
    "title": "Go, Dog. Go!",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Critical Thinking",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with stylized character designs based on the original book illustrations. Color Palette: Bright and vivid colors with a focus on primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "go-dog-go!.jpg"
  },
  {
    "title": "Gracie's Corner",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural Appreciation",
      "Cultural & Social",
      "Learning through Songs",
      "Early Childhood experiences",
      "Literacy",
      "Numeracy",
      "Social-Emotional",
      "sing-a-long",
      "Dance",
      "Music",
      "Healthy Eating",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "2D animation with bright, colorful visuals and rhythmic, energetic choreography.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "gracies-corner.jpg"
  },
  {
    "title": "Grizzy and the Lemmings (2016-present)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Communication & Expression",
      "Entertainment",
      "Problem Solving",
      "Humor",
      "Slapstick Comedy",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Very Low",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "grizzy-and-the-lemmings-(2016-present).jpg"
  },
  {
    "title": "Guess How Much I Love You",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Emotional Intelligence",
      "Friendship",
      "Family Values",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "guess-how-much-i-love-you.jpeg"
  },
  {
    "title": "Gullah, Gullah Island",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Life Lessons",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Social Development",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with musical elements. Color Palette: Bright and vibrant colors reflecting the cultural setting.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "gullah-gullah-island.jpg"
  },
  {
    "title": "Gumby: The Movie",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Stop-Motion Animation using clay figures (claymation). Color Palette: Varied colors with a mix of bright and muted tones. Unique aesthetic uncommon in the present day.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Varies",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "gumby-the-movie.jpg"
  },
  {
    "title": "Handyman Hal",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Life Lessons",
      "Engineering Concepts",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Vehicle Themes",
      "STEM",
      "Farm Life",
      "Agriculture",
      "Mechanics",
      "Curiosity",
      "Entertainment",
      "Humor",
      "Safety"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Primarily live-action with occasional animated elements to highlight tools or processes.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "handyman-hal.jpg"
  },
  {
    "title": "He-Man and the Masters of the Universe",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Positive Role Models",
      "Entertainment",
      "Responsibility",
      "Morality",
      "Adventure",
      "Fantasy Elements",
      "Mild Violent themes",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with action-oriented designs. Color Palette: Bright and vivid colors with bold contrasts.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "he-man-and-the-masters-of-the-universe.jpeg"
  },
  {
    "title": "Helper Cars",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Teamwork",
      "Colours",
      "Shapes",
      "Problem Solving",
      "Vehicle Recognition",
      "Entertainment",
      "Mechanics"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation with Bright Colors and Friendly Vehicle Characters",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "helper-cars.jpg"
  },
  {
    "title": "Hero Elementary",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Superhero Themes",
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Curiosity",
      "Critical Thinking",
      "Science"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "hero-elementary.jpeg"
  },
  {
    "title": "Hey Bear Sensory",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "0-3",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Sensory Exploration",
      "Colours",
      "Motor Skills",
      "Music"
    ],
    "interactivity_level": "Low",
    "animation_style": "High-Contrast 3D Animation with Bright Colors and Simple Shapes",
    "dialogue_intensity": "None",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "hey-bear-sensory.jpg"
  },
  {
    "title": "Hey Duggee",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Merit Reward systems",
      "Teamwork",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with simple, geometric shapes and bold outlines. Bright and bold colors with clear contrasts.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "hey-duggee.jpg"
  },
  {
    "title": "Horrid Henry",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Cause and Effect",
      "Morality",
      "Humor",
      "Entertainment",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "horrid-henry.jpg"
  },
  {
    "title": "Hudson’s Playground",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Cultures & Traditions",
      "Life Lessons",
      "Farm Life",
      "Machinery",
      "Agriculture",
      "Outdoor Exploration",
      "Problem Solving",
      "Family Relationships",
      "Curiosity"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-Action Family Videos",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "hudsons-playground.jpg"
  },
  {
    "title": "If You Give a Mouse a Cookie(2015-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Cause and Effect",
      "Creativity & Imagination",
      "Problem Solving",
      "Curiosity",
      "Critical Thinking",
      "Cognitive Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "if-you-give-a-mouse-a-cookie(2015-present).jpg"
  },
  {
    "title": "In the Night Garden (07-09)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Sensory Exploration",
      "Repetitive Learning",
      "Motor Skills",
      "Cognitive Development"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-action costume performances combined with CGI-enhanced environments",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "in-the-night-garden-(07-09).jpg"
  },
  {
    "title": "It's a Big Big World",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Science",
      "Friendship",
      "Nature",
      "Ecosystems",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with CGI backgrounds.Color Palette: Soft, natural colors with earthy tones.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "its-a-big-big-world.jpeg"
  },
  {
    "title": "Johnson & Friends",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live action with costumed characters",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "johnson-and-friends.jpg"
  },
  {
    "title": "JoJo & Gran Gran",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultures & Traditions",
      "Family Relationships",
      "Family Values",
      "Relatable Situations",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a hand-drawn aesthetic.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename":   "jojo-and-gran-gran.jpg"
  },
  {
    "title": "Juf Roos",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Learning through Songs",
      "Dutch Language",
      "Language Learning",
      "sing-a-long",
      "Dance",
      "Literacy",
      "Music"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action with Colorful Costumes and Simple Sets",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "juf-roos.jpeg"
  },
  {
    "title": "JunyTony - Songs and Stories",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Learning from Mistakes",
      "Learning through Songs",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Literacy",
      "Numeracy",
      "sing-a-long",
      "Dance",
      "Phonics",
      "Vocabulary",
      "Music",
      "Routine",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Animation with Vibrant Colors and Cute Characters",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "junytony-songs-and-stories.jpg"
  },
  {
    "title": "KarazahChannel",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Cultural & Social",
      "Language Learning",
      "Arabic Language Learning",
      "Literacy",
      "sing-a-long",
      "Reading Comprehension",
      "Music",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "Mix of 3D CGI animations for the characters and settings",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "karazahchannel.jpg"
  },
  {
    "title": "Katuri tv",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Nature",
      "Family Relationships",
      "Animals",
      "Nature Sounds",
      "Problem Solving",
      "Social Development",
      "Entertainment",
      "Humor",
      "Social-Emotional"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "katuri-tv.jpg"
  },
  {
    "title": "Kazwa and Bilal",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Cultural & Social",
      "Curiosity",
      "Social-Emotional",
      "Relatable Situations",
      "Religion",
      "Morality"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "kazwa-and-bilal.jpeg"
  },
  {
    "title": "Kid-E-Cats",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Family Relationships",
      "Family Values",
      "Social-Emotional",
      "Social Development",
      "Relatable Situations"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "kid-e-cats.jpeg"
  },
  {
    "title": "Kids 2 kids",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "5-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Learn Through Play",
      "Creativity & Imagination",
      "Social-Emotional",
      "Humor",
      "Outdoor Exploration",
      "DIY Projects",
      "Curiosity",
      "Silly Comedy"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-Action Family Videos",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "kids-to-kids.jpg"
  },
  {
    "title": "Kipper(1997-2000)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Friendship"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional hand-drawn 2D animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low",
    "image_filename": "kipper(1997-2000).jpg"
  },
  {
    "title": "Kiri and Lou",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Nature",
      "Emotional Intelligence",
      "Mindfulness"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-motion animation using clay and paper cutouts",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "kiri-and-lou.jpg"
  },
  {
    "title": "Laurie Berkner",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Physical Fitness",
      "Early Childhood experiences",
      "Music",
      "sing-a-long",
      "Social-Emotional",
      "Literacy",
      "Entertainment",
      "Dance"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-Action with Colorful Green Screen Animations",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "laurie-berkner.jpg"
  },
  {
    "title": "Lazytown",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Physical Fitness",
      "Positive Role Models",
      "Healthy Eating",
      "Teamwork",
      "Problem Solving",
      "Exercise",
      "Motor Skills",
      "sing-a-long",
      "Dance",
      "Perseverance"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "lazytown.jpg"
  },
  {
    "title": "Leo the Truck",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Vehicle Themes",
      "Colours",
      "Shapes",
      "Vehicle Recognition",
      "Mechanics",
      "Curiosity"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "leo-the-truck.jpg"
  },
  {
    "title": "Leo the wildlife ranger",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Wildlife Exploration",
      "Wildlife Conservation",
      "Animals",
      "Animal Behaviour",
      "Curiosity",
      "Problem Solving",
      "Nature",
      "Natural World",
      "Responsibility"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation with detailed depictions of animals and environments.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "leo-the-wild-live-ranger.jpg"
  },
  {
    "title": "Les' Copaque Production - Upin & Ipin",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "4-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural & Social",
      "Learning from Mistakes",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Morality",
      "Responsibility",
      "Relatable Situations",
      "Family Relationships",
      "Family Values",
      "Social-Emotional",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with vibrant colors and detailed environments reflecting Malaysian village life.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "les-copaque-production-upin-and-ipin.jpg"
  },
  {
    "title": "LifeKids (Blinky’s Bible adventures)",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Religious Teachings",
      "Cultures & Traditions",
      "Cultural & Social",
      "Cause and Effect",
      "Life Lessons",
      "Spiritual Development",
      "Religion",
      "Family Relationships",
      "Relatable Situations",
      "Social-Emotional",
      "Morality",
      "sing-a-long",
      "Repetitive Learning",
      "Dance"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename":   "lifekids-(blinkys-bible-adventures).jpg"
  },
  {
    "title": "Listener Kids",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Cultures & Traditions",
      "Cultural & Social",
      "Spiritual Development",
      "Faith",
      "Biblical Stories",
      "Religion",
      "Christian Values",
      "Morality",
      "sing-a-long",
      "Social Development",
      "Positive Mindset"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action and animated elements, featuring colorful visuals and friendly characters.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "listener-kids.jpeg"
  },
  {
    "title": "Little Angel",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "1 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Routine",
      "Social-Emotional",
      "sing-a-long",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "little-angel.jpg"
  },
  {
    "title": "Little Bear",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Family Relationships",
      "Social Development",
      "Emotional Intelligence",
      "Family Values"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Hand-Drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "little-bear.jpg"
  },
  {
    "title": "Little Einsteins (2005-2009)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Music",
      "Art",
      "Problem Solving",
      "Cognitive Development",
      "Teamwork",
      "History"
    ],
    "interactivity_level": "High",
    "animation_style": "digital 2D animation. CGI for the Rocket ship and certain elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "little-einsteins-(2005-2009).jpg"
  },
  {
    "title": "Llama Llama (2018-2019)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Family Values",
      "Problem Solving",
      "Relatable Situations",
      "Social Development",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "llama-llama-(2018-2019).jpg"
  },
  {
    "title": "Lucas the spider(2021)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Overcoming Fears",
      "Emotional Intelligence",
      "Relatable Situations",
      "Creativity & Imagination",
      "Recurring Antagonist"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "lucas-the-spider(2021).jpg"
  },
  {
    "title": "Lyla in the loop",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "STEM",
      "Problem Solving",
      "Motor Skills",
      "Curiosity",
      "Critical Thinking",
      "Relatable Situations"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "lyla-in-the-loop.jpg"
  },
  {
    "title": "Maddie's Do You Know?",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Curiosity",
      "Science",
      "Technology",
      "Exploration",
      "Engineering Concepts",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "maddies-do-you-know.jpeg"
  },
  {
    "title": "Maggie and the Ferocious Beast",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with simple, childlike designs. Color Palette: Bright and pastel colors with minimal backgrounds.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "maggie-and-the-ferocious-beast.jpg"
  },
  {
    "title": "maizenofficial",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "7-12, 12+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Arts & Crafts",
      "Creativity & Imagination",
      "Building and Design",
      "Entertainment",
      "Humor",
      "Problem Solving",
      "Critical Thinking",
      "MineCraft",
      "Interactive Game Elements"
    ],
    "interactivity_level": "Low",
    "animation_style": "Real In Game Video Footage",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "maizenofficial.jpg"
  },
  {
    "title": "Marcus Level",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-11",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Fantasy Elements",
      "Problem Solving",
      "Perseverance",
      "Adventure",
      "Teamwork",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "marcus-level.jpeg"
  },
  {
    "title": "Masha and the Bear",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "5 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Patience",
      "Humor",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation with high-quality, detailed visuals",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "masha-and-the-bear.jpg"
  },
  {
    "title": "Mickey Mouse Clubhouse",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Early Childhood experiences",
      "Preschool-Basics",
      "Numeracy",
      "Teamwork",
      "Shapes",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "mickey-mouse-clubhouse.jpeg"
  },
  {
    "title": "Miffy and friends",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Early Childhood experiences",
      "Social-Emotional",
      "Social Development",
      "Teamwork",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Stop-Motion Animation with Simple Designs, Emphasizes clear shapes and actions easily understood by young viewers.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "miffy-and-friends.jpeg"
  },
  {
    "title": "Milo",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural & Social",
      "Career Exploration",
      "Teamwork",
      "Problem Solving",
      "Responsibility",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "milo.jpg"
  },
  {
    "title": "Minno - Bible Stories for Kids",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Religious Teachings",
      "Positive Role Models",
      "Spiritual Development",
      "Cultures & Traditions",
      "Cultural & Social",
      "Biblical Stories",
      "Faith",
      "Religion",
      "Christian Values",
      "Morality",
      "Positive Mindset"
    ],
    "interactivity_level": "High",
    "animation_style": "Varies across series, primarily 2D and 3D animations with colorful visuals and relatable character designs.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "minno-bible-stories-for-kids.jpg"
  },
  {
    "title": "Minuscule",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Environmental Awareness",
      "Storytelling without Dialogue",
      "Creativity & Imagination",
      "Insect Behaviour",
      "Nature",
      "Nature Sounds",
      "Entertainment",
      "Humor",
      "Relaxation",
      "Music",
      "Natural World",
      "ASMR",
      "Silly Comedy",
      "Ecosystems",
      "Slice of Life",
      "Light Hearted"
    ],
    "interactivity_level": "Low",
    "animation_style": "Combination of CGI and Real-Life Backdrops",
    "dialogue_intensity": "None",
    "sound_effects_level": "High",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "minuscule.jpg"
  },
  {
    "title": "Mira, Royal Detective",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Positive Role Models",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Problem Solving",
      "Critical Thinking",
      "Mystery",
      "Adventure",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with Vibrant Colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "mira-royal-detective.jpg"
  },
  {
    "title": "Miss Katie Sings",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Communication & Expression",
      "Cultural & Social",
      "Learning through Songs",
      "Music",
      "sing-a-long",
      "Positive Mindset",
      "Social-Emotional",
      "Courage",
      "Mindfulness",
      "Diversity",
      "Political Leanings"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action Performances with Simple Props and Backgrounds",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low",
    "image_filename": "miss-katie-sings.jpg"
  },
  {
    "title": "Miss Moni",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Preschool-Basics",
      "Early Childhood experiences",
      "Literacy",
      "Numeracy",
      "Vocabulary",
      "Music",
      "Language Learning",
      "Phonics",
      "sing-a-long",
      "Cognitive Development",
      "Auslan (Sign Language)"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action and 2D Animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Varies",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "miss-moni.jpg"
  },
  {
    "title": "Miss Rachel",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "1-4",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Phonics",
      "Language Learning",
      "Speech Development",
      "sing-a-long",
      "Cognitive Development",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "Primarily live-action with Miss Rachel interacting directly with the audience. Some Puppet and 2D Animation use",
    "dialogue_intensity": "High",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "miss-rachel.jpg"
  },
  {
    "title": "Mister Maker",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "Creativity & Imagination",
      "Arts & Crafts",
      "Curiosity",
      "Motor Skills",
      "Art",
      "Colours"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with colorful crafts and animated segments. Color Palette: Bright and varied colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "mister-maker.jpg"
  },
  {
    "title": "Mister Rogers' Neighbourhood",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "31 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Elementary-Basics",
      "Life Lessons",
      "Social-Emotional",
      "Social Development",
      "Literacy",
      "Emotional Intelligence",
      "Relatable Situations",
      "Relaxation",
      "Community Service",
      "Problem Solving",
      "Critical Thinking",
      "Family Values",
      "sing-a-long",
      "Morality",
      "Friendship",
      "Creativity & Imagination"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with puppet segments. Color Palette: Soft, natural colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "mister-rogers-neighbourhood.jpg"
  },
  {
    "title": "Molly of Denali",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Problem Solving",
      "Adventure",
      "Exploration",
      "Nature",
      "Natural World",
      "Mystery"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with cultural representation. Color Palette: Bright colors reflecting Alaskan landscapes.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "molly-of-denali.jpeg"
  },
  {
    "title": "Moominvalley",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Friendship",
      "Fantasy Elements",
      "Emotional Intelligence",
      "Relaxation"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "moominvalley.jpeg"
  },
  {
    "title": "Moon and Me",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Early Childhood experiences",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-Motion Animation with soft toys. Color Palette: Soft, soothing colors.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "moon-and-me.jpg"
  },
  {
    "title": "Mother goose club",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Creativity & Imagination",
      "Literacy",
      "Numeracy",
      "Language Learning",
      "Speech Development",
      "sing-a-long",
      "Dance",
      "Music",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Colorful Costumes and Simple Sets",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "mother-goose-club.jpg"
  },
  {
    "title": "Mr Bean Cartoon",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Entertainment",
      "Problem Solving",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Digital Animation with exaggerated expressions. Color Palette: Bright colors with bold contrasts.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "mr-bean-cartoon.jpeg"
  },
  {
    "title": "Mr. Monkey, Monkey Mechanic",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "STEM",
      "Mechanics",
      "Problem Solving",
      "Engineering Concepts"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "mr-monkey-monkey-mechanic.jpg"
  },
  {
    "title": "MyGov Sign Language for Kids-ASL",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "0-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Memory Exercises",
      "American Sign Language",
      "Communication & Expression",
      "Deaf Community",
      "Visual Demonstrations",
      "Language Learning",
      "Cognitive Development",
      "Motor Skills",
      "Literacy"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action demonstrations combined with animated segments to illustrate signs and concepts effectively.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "mygosignlanguageforkids-asl.jpg"
  },
  {
    "title": "Nanalan",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Creativity & Imagination",
      "Preschool-Basics",
      "Communication & Expression",
      "Vocabulary",
      "Social-Emotional",
      "Social Development",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Puppet-based animation with simple sets and characters, creating a unique and engaging visual experience",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "nanalan.jpeg"
  },
  {
    "title": "Nick Cope's Popcast",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Communication & Expression",
      "Creativity & Imagination",
      "Social-Emotional",
      "Emotional Intelligence",
      "sing-a-long",
      "Dance",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "nick-copes-popcast.jpg"
  },
  {
    "title": "Ninja Kids",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "5-12",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Superhero Themes",
      "Creativity & Imagination",
      "Positive Role Models",
      "Physical Fitness",
      "Exercise",
      "Adventure",
      "Entertainment",
      "Skit Comedy",
      "Choreographed Action Scenes",
      "Outdoor Exploration",
      "Courage",
      "Confidence Building",
      "Martial Arts",
      "Mild Violent themes",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action videos with dynamic editing and occasional special effects to enhance the viewing experience.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "ninja-kids.jpg"
  },
  {
    "title": "Ninjago",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Complex & Emotional Themes",
      "Teamwork",
      "Perseverance",
      "Courage",
      "Problem Solving",
      "Morality",
      "Entertainment",
      "Mild Fantasy Violence",
      "Mild Violent themes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "ninjago.jpg"
  },
  {
    "title": "Noddy Original Series (1998)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Social Development"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Stop-Motion with simple models. Color Palette: Bright but soft colors.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "noddy-original-series-(1998).jpeg"
  },
  {
    "title": "Noddy, Toyland Detective (2016)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Social Development"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "noddy-toyland-detective-(2016).jpeg"
  },
  {
    "title": "Noodle & Pals",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Social-Emotional",
      "Language Learning",
      "Cognitive Development",
      "Music",
      "Literacy",
      "Numeracy"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "noodle-and-pals.jpg"
  },
  {
    "title": "Noodle and Bun",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Storytelling without Dialogue",
      "Creativity & Imagination",
      "Humor",
      "Silly Comedy",
      "Captivating Visuals",
      "Friendship",
      "Animals"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogue_intensity": "None",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "noodle-and-bun.jpg"
  },
  {
    "title": "Numberblocks (2017-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "7 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Elementary-Basics",
      "Numeracy",
      "Problem Solving",
      "Math",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "numberblocks-(2017-present).jpg"
  },
  {
    "title": "Odd Squad",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Math",
      "Numeracy",
      "Teamwork",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action and CGI animation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "odd-squad.jpg"
  },
  {
    "title": "Oggy and the Cockroaches",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "7 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Entertainment",
      "Slapstick Comedy",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with exaggerated and dynamic character movements.",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "oggy-and-the-cockroaches.jpg"
  },
  {
    "title": "Olivia",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a unique visual style resembling charcoal drawings with splashes of color.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "olivia.jpg"
  },
  {
    "title": "Omar and hana",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultural & Social",
      "Cultures & Traditions",
      "Religion",
      "Family Values",
      "Morality",
      "Emotional Intelligence",
      "sing-a-long",
      "Relatable Situations",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "omar-and-hana.jpg"
  },
  {
    "title": "One Piece",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "12+",
    "seasons": "1500+ Episodes",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Creativity & Imagination",
      "Complex & Emotional Themes",
      "Teamwork",
      "Perseverance",
      "Morality",
      "Entertainment",
      "Humor",
      "Slapstick Comedy",
      "Emotional Intelligence",
      "Friendship",
      "Social-Emotional",
      "Adventure",
      "Mild Violent themes",
      "Mild Fantasy Violence",
      "Mild Peril",
      "Mild Mature Themes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D Animation with a distinctive anime style, featuring exaggerated expressions, dynamic action sequences, and detailed environments.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "one-piece.jpg"
  },
  {
    "title": "Oswald",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Social-Emotional",
      "Social Development",
      "Critical Thinking",
      "Conflict Resolution",
      "Emotional Intelligence",
      "Relatable Situations",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "oswald.jpg"
  },
  {
    "title": "Out of the Box",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Arts & Crafts",
      "Music",
      "Motor Skills",
      "Social-Emotional",
      "Colours",
      "Shapes",
      "Art"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "out-of-the-box.jpeg"
  },
  {
    "title": "Pajanimals",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Overcoming Fears",
      "Bedtime Routines",
      "Social-Emotional",
      "Relaxation",
      "Family Relationships",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with colorful characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "Pajanimals.jpg"
  },
  {
    "title": "Paw patrol",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "11 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Community Service",
      "Teamwork",
      "Problem Solving",
      "Courage"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "paw-patrol.jpeg"
  },
  {
    "title": "Peg+Cat",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Math",
      "Problem Solving",
      "Critical Thinking",
      "Adventure",
      "Perseverance"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a hand-drawn, sketch-like aesthetic.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "peg-cat.jpeg"
  },
  {
    "title": "Peppa pig (2004-present)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "8 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Friendship",
      "Routine",
      "Social Development",
      "Relatable Situations",
      "Tantrums",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "peppa-pig-(2004-present).jpg"
  },
  {
    "title": "Pete The Cat",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Music",
      "Emotional Intelligence",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital animation with a hand-drawn look",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "pete-the-cat-3272.jpg"
  },
  {
    "title": "Peter Rabbit(2012-2016)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Adventure",
      "Problem Solving",
      "Nature",
      "Teamwork",
      "Courage"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "peter-rabbit(2012-2016).jpg"
  },
  {
    "title": "Phineas and Ferb",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Problem Solving",
      "Curiosity",
      "Adventure",
      "Humor",
      "Family Relationships",
      "Entertainment",
      "Engineering Concepts",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Digital Animation with stylized, geometric designs. Bright and vivid colors with detailed backgrounds.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "phineas-and-ferb.jpeg"
  },
  {
    "title": "Pingu",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "6 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Emotional Intelligence",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional Stop-Motion (claymation)",
    "dialogue_intensity": "None",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "pingu.jpeg"
  },
  {
    "title": "Pinkalicious & Peterrific",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Art",
      "Music",
      "Problem Solving",
      "Teamwork",
      "Motor Skills"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "pinkalicious-and-peterrific.jpg"
  },
  {
    "title": "Pip and Posy",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cause and Effect",
      "Friendship",
      "Social-Emotional",
      "Problem Solving",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Relatable Situations",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "pip-and-posy.jpeg"
  },
  {
    "title": "Pipi Mā",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Te reo Māori language development",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Māori immersion preschool",
      "Cultural & Social",
      "Numeracy",
      "Literacy",
      "Traditional Narratives",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Animation with Cultural Themes and Soft Colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "pipi-mā.jpg"
  },
  {
    "title": "PJ Masks",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Superhero Themes",
      "Creativity & Imagination",
      "Entertainment",
      "Morality",
      "Social Development",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "pj-masks.jpeg"
  },
  {
    "title": "Planet earth",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "8+",
    "seasons": "1 Season",
    "avg_episode_length": "Very Long (>30m)",
    "themes": [
      "Environmental Awareness",
      "Natural World",
      "Nature",
      "Natural History",
      "Wildlife Exploration",
      "Science",
      "Realistic Depictions of Nature"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-action nature documentary with high-definition footage. Natural colors showcasing diverse ecosystems.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "planet-earth.jpeg"
  },
  {
    "title": "Play School",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "59 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Shapes",
      "Colours",
      "Social-Emotional",
      "Problem Solving",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "play-school.jpeg"
  },
  {
    "title": "Pocoyo",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-4",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Cultural & Social",
      "Language Learning",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Curiosity",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "pocoyo.jpeg"
  },
  {
    "title": "Pokemon",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "25 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Overcoming Fears",
      "Friendship",
      "Teamwork",
      "Wildlife Exploration",
      "Entertainment",
      "Humor",
      "Exploration",
      "Perseverance",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "traditional and Digital hand-drawn 2D animation. Anime style",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "pokemon.jpg"
  },
  {
    "title": "Postman Pat (1981–2008)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "9 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Community Service",
      "Problem Solving",
      "Responsibility",
      "Teamwork",
      "Entertainment"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional Stop-Motion animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "postman-pat-(1981–2008).jpg"
  },
  {
    "title": "Postman Pat: Special Delivery Service (2008–2017)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Community Service",
      "Problem Solving",
      "Responsibility",
      "Teamwork",
      "Entertainment"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "postman-pat-special-delivery-service.jpg"
  },
  {
    "title": "Puffin Rock",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Environmental Awareness",
      "Nature",
      "Wildlife Exploration",
      "Family Relationships",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "puffin-rock.jpg"
  },
  {
    "title": "Puppy Dog Pals",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Adventure",
      "Problem Solving",
      "Teamwork",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "puppy-dog-pals.jpeg"
  },
  {
    "title": "Raa Raa the Noisy Lion",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Communication & Expression",
      "Social-Emotional",
      "Social Development",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "raa-raa-the-noisy-lion.jpg"
  },
  {
    "title": "Rainbow Ruby",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Career Exploration",
      "Curiosity",
      "Emotional Intelligence",
      "Fantasy Elements",
      "Problem Solving",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "rainbow-ruby.jpg"
  },
  {
    "title": "Rapunzel's Tangled Adventure",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Life Lessons",
      "Overcoming Fears",
      "Adventure",
      "Courage",
      "Friendship",
      "Emotional Intelligence",
      "Problem Solving",
      "Perseverance",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate",
    "image_filename": "rapunzels-tangled-adventure.jpg"
  },
  {
    "title": "RC Action Channel",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Engineering Concepts",
      "Vehicle Themes",
      "Vehicle Recognition",
      "Machinery",
      "Relaxation",
      "Entertainment",
      "Hobbies",
      "Mechanics"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-action footage of RC vehicles in operation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "rc-action-channel.jpeg"
  },
  {
    "title": "Reading rainbow",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "5-9",
    "seasons": "16 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Cultural Appreciation",
      "Life Lessons",
      "Positive Role Models",
      "Creativity & Imagination",
      "Social-Emotional",
      "Literacy",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "reading-rainbow.jpg"
  },
  {
    "title": "Ready, Steady, Wiggle!",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Physical Fitness",
      "Elementary-Basics",
      "sing-a-long",
      "Dance",
      "Music",
      "Friendship",
      "Motor Skills",
      "Repetitive Learning",
      "Entertainment",
      "Numeracy",
      "Literacy",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "ready-steady-wiggle.jpg"
  },
  {
    "title": "Reef School",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Environmental Awareness",
      "Ecosystems",
      "Marine Biology",
      "Curiosity",
      "Social Development",
      "Emotional Intelligence",
      "Wildlife Conservation",
      "Natural World",
      "Teamwork"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "reef-school.jpg"
  },
  {
    "title": "Rhyme Time Town",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Language Learning",
      "Literacy",
      "sing-a-long",
      "Cognitive Development",
      "Social-Emotional",
      "Repetitive Learning",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with extremely bright and vivid colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "rhyme-time-town.jpg"
  },
  {
    "title": "Robocar Poli",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural & Social",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Adventure",
      "Community Service",
      "Social Development",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "robocar-poli.jpg"
  },
  {
    "title": "Rolie Polie Olie",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Critical Thinking"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "rolie-polie-olie.jpg"
  },
  {
    "title": "Rosie & Jim",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "8 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Repetitive Learning",
      "Language Learning",
      "sing-a-long",
      "Problem Solving",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with colorful characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "rosie-and-jim.jpg"
  },
  {
    "title": "Rosie's Rules",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Social-Emotional",
      "Problem Solving",
      "Family Relationships",
      "Responsibility",
      "Teamwork",
      "Social Development",
      "Family Values",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "rosies-rules.jpg"
  },
  {
    "title": "Rugrats",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "9 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social Development",
      "Social-Emotional",
      "Relatable Situations",
      "Emotional Intelligence",
      "Problem Solving",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with a distinctive, sketchy style. Muted and earthy tones, reflecting a somewhat realistic environment.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "rugrats.jpg"
  },
  {
    "title": "Rugrats (2021 Reboot)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social Development",
      "Social-Emotional",
      "Relatable Situations",
      "Emotional Intelligence",
      "Problem Solving",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "rugrats-(2021-reboot).jpg"
  },
  {
    "title": "Ryan's World",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "0-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Science",
      "Creativity & Imagination",
      "Learn Through Play",
      "STEM",
      "Geography",
      "Numeracy",
      "Unboxing Videos",
      "Entertainment",
      "Humor",
      "Silly Comedy",
      "Family Relationships",
      "Family Values",
      "Teamwork",
      "Toy Review"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action with Bright Colors, High Energy, and Occasional Animations",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "ryans-world.jpeg"
  },
  {
    "title": "Sagwa, the Chinese Siamese Cat",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Cultural & Social",
      "Friendship",
      "Problem Solving",
      "Family Values"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D animation with a hand-drawn look.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "sagwa-the-chinese-siamese-cat.jpeg"
  },
  {
    "title": "Sarah and Duck",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Relatable Situations",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital animation with a hand-drawn look",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "sarah-and-duck.jpeg"
  },
  {
    "title": "Scooby-Doo, Where Are You! (1969–1970)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "traditional hand-drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Low",
    "image_filename": "scooby-doo-(1969-1970).jpg"
  },
  {
    "title": "Sea of love",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Teamwork",
      "Marine Biology",
      "Wildlife Conservation",
      "Friendship",
      "Natural World",
      "Responsibility",
      "Social-Emotional",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "sea-of-love.jpg"
  },
  {
    "title": "Sesame Street (1969-present)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "54 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Cultural & Social",
      "STEM",
      "Elementary-Basics",
      "Cultures & Traditions",
      "Social Development",
      "Routine",
      "Motor Skills",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "Various Art Styles",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "sesame-street-(1969-present).jpeg"
  },
  {
    "title": "Shaun the Sheep",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "6 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Teamwork"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional Stop-Motion (claymation) digital enhancements may be used for post-production",
    "dialogue_intensity": "None",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "shaun-the-sheep.jpg"
  },
  {
    "title": "Sid the Science Kid",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Critical Thinking",
      "Problem Solving",
      "Science",
      "Motor Skills",
      "Relatable Situations",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with Motion Capture",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "sid-the-science-kid.jpg"
  },
  {
    "title": "Silly Miss Lily (Paisley's Corner)",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Positive Engaging Screen-Time",
      "Preschool-Basics",
      "Numeracy",
      "Colours",
      "Shapes",
      "Social-Emotional",
      "sing-a-long",
      "Literacy"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Props",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "silly-miss-lily(paisleys-corner).jpg"
  },
  {
    "title": "Simon",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "8 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Friendship",
      "Family Relationships",
      "Emotional Intelligence",
      "Social-Emotional",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate-High",
    "image_filename": "simon.jpeg"
  },
  {
    "title": "Something Special: Hello Mr Tumble",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-6",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Early Childhood experiences",
      "Social-Emotional",
      "Emotional Intelligence",
      "Language Learning",
      "Makaton Sign Language",
      "Learning Disabilities"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "something-special-hello-mr-tumble.jpeg"
  },
  {
    "title": "Sonic the Hedgehog",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Perseverance",
      "Entertainment",
      "Humor",
      "Courage",
      "Adventure",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "sonic-the-hedgehog.jpg"
  },
  {
    "title": "Spanish with liz",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "0-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Learning through Songs",
      "Spanish Language",
      "Language Learning",
      "Music",
      "Vocabulary",
      "Phonics",
      "Emotional Intelligence",
      "Routine",
      "Healthy Eating"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Educational Props and Colorful Backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "spanish-with-liz.jpg"
  },
  {
    "title": "Spidey and his amazing friends (2021-present)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Positive Role Models",
      "Teamwork",
      "Responsibility",
      "Entertainment",
      "Mischievous Behaviour",
      "Mild Peril"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Very High",
    "image_filename": "spidey-and-his-amazing-friends-(2021-present).jpg"
  },
  {
    "title": "Spirit Riding Free",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "8 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Responsibility",
      "Perseverance",
      "Adventure",
      "Horses",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "spirit-riding-free.jpg"
  },
  {
    "title": "SpongeBob SquarePants",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-12",
    "seasons": "15 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Friendship",
      "Problem Solving",
      "Entertainment",
      "Surreal Imagery",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D animation with expressive and exaggerated character designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "spongebob-squarepants.jpg"
  },
  {
    "title": "Star Wars: Young Jedi Adventures",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cause and Effect",
      "Cultures & Traditions",
      "Positive Role Models",
      "Entertainment",
      "Courage",
      "Adventure",
      "Conflict Resolution",
      "Friendship",
      "Teamwork",
      "Responsibility",
      "Fantasy Elements",
      "Morality",
      "Mild Intense Scenes",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "star-wars-young-jedi-adventures.jpeg"
  },
  {
    "title": "Stella and Sam",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Exploration",
      "Emotional Intelligence",
      "Curiosity",
      "Family Relationships",
      "Social-Emotional",
      "Social Development",
      "Natural World"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "stella-and-sam.jpg"
  },
  {
    "title": "Steve and Maggie",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Every Day Concepts",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Language Learning",
      "Vocabulary",
      "Phonics",
      "Repetitive Learning",
      "Literacy",
      "Social Development",
      "Social-Emotional",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Puppet Interaction and Simple Animations",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "steve-and-maggie.jpg"
  },
  {
    "title": "Stick man",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Family Values",
      "Perseverance",
      "Family Relationships",
      "Courage",
      "Social-Emotional",
      "Mild Peril"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "stick-man.jpg"
  },
  {
    "title": "Stillwater (2020-present)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Mindfulness",
      "Emotional Intelligence",
      "Problem Solving",
      "Social-Emotional",
      "Conflict Resolution"
    ],
    "interactivity_level": "High",
    "animation_style": "Mix of 3D CGI animations for the characters and settings",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate-High",
    "image_filename": "stillwater-(2020-present).jpg"
  },
  {
    "title": "Story Time Book: Read-Along",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "1 Season",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Literacy",
      "Language Learning",
      "Reading Comprehension",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "Illustrations or Minimal Animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "story-time-book-read-along.jpg"
  },
  {
    "title": "Storybots",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Literacy",
      "Reading Comprehension",
      "Problem Solving",
      "Curiosity",
      "Social Development",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of 2D and 3D Animation with Mixed Media",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "storybots.jpg"
  },
  {
    "title": "Super Monsters",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Creativity & Imagination",
      "Social-Emotional",
      "Friendship",
      "Emotional Intelligence",
      "Self Discipline",
      "Problem Solving",
      "Social Development",
      "Entertainment"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "super-monsters.jpeg"
  },
  {
    "title": "SUPER SIMPLE SONG",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Storytelling without Dialogue",
      "Literacy",
      "Numeracy",
      "Shapes",
      "Colours",
      "sing-a-long",
      "Social Development",
      "Social-Emotional",
      "Dance",
      "Motor Skills",
      "Language Learning",
      "Cognitive Development",
      "Music",
      "Vocabulary"
    ],
    "interactivity_level": "High",
    "animation_style": "2D and 3D Animation with Bright Colors and Simple Characters",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "super-simple-song.jpeg"
  },
  {
    "title": "Super Why!",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Numeracy",
      "Literacy",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright colors and clear designs. Bright and vivid colors focused on storybook settings.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "super-why.jpeg"
  },
  {
    "title": "Superbook",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Cause and Effect",
      "Positive Role Models",
      "Religion",
      "Morality",
      "History",
      "Literacy",
      "Courage",
      "Repetitive Learning"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "superbook.jpg"
  },
  {
    "title": "Super Kitties",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Superhero Themes",
      "Teamwork",
      "Problem Solving",
      "Responsibility",
      "Adventure",
      "Entertainment",
      "Friendship"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "superkitties.jpg"
  },
  {
    "title": "Superworm",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Nature",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with detailed textures and natural settings. Earthy tones with vivid highlights.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "superworm.jpg"
  },
  {
    "title": "Takaro Tribe",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Religion",
      "Literacy",
      "History",
      "Music",
      "Routine",
      "Repetitive Learning",
      "Social-Emotional",
      "Language Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "takaro-tribe.jpg"
  },
  {
    "title": "Tangled: Before Ever After",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Very Long (>30m)",
    "themes": [
      "Overcoming Fears",
      "Adventure",
      "Friendship",
      "Courage",
      "Social Development",
      "Perseverance",
      "Fantasy Elements",
      "Responsibility",
      "Nature",
      "Mild Peril",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "tangled-before-ever-after.jpeg"
  },
  {
    "title": "Tayo the Little Bus",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Vehicle Recognition",
      "Social Development",
      "Teamwork",
      "Problem Solving",
      "Community Service",
      "Responsibility",
      "Entertainment",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "tayo-the-little-bus.jpg"
  },
  {
    "title": "Team Umizoomi",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Math",
      "Problem Solving",
      "Critical Thinking",
      "Teamwork",
      "Numeracy",
      "Shapes"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "team-umizoomi.jpg"
  },
  {
    "title": "Teen Titans Go!",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "9 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Superhero Themes",
      "Humor",
      "Teamwork",
      "Friendship",
      "Adventure",
      "Entertainment",
      "Surreal Imagery",
      "Mild Mature Themes"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "teen-titans-go.jpeg"
  },
  {
    "title": "Teletubbies (2015-2018)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Repetitive Learning",
      "Sensory Exploration",
      "Routine",
      "Bedtime Routines"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live action costumed. some digital elements",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "High",
    "image_filename":   "teletubbies-(2015-2018).jpg"
  },
  {
    "title": "Teletubbies (1997-2001)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Repetitive Learning",
      "Sensory Exploration",
      "Routine",
      "Bedtime Routines"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live action costumed. some digital elements",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "teletubbies-(1997-2001).jpg"
  },
  {
    "title": "The Adventures of Abney & Teal",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Social-Emotional",
      "Nature"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-motion animation with hand-crafted models.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "the-adventures-of-abney-and-teal.jpeg"
  },
  {
    "title": "The Adventures of Paddington (2019)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural & Social",
      "Emotional Intelligence",
      "Problem Solving",
      "Family Values",
      "Social Development",
      "Family Relationships"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-adventures-of-paddington-(2019).jpg"
  },
  {
    "title": "The Adventures of Paddington Bear Original Series (1997–2000)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Friendship",
      "Emotional Intelligence",
      "Social-Emotional",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with a unique style combining stop-motion elements.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "the-adventures-of-paddington-bear-original-series-(1997–2000).jpg"
  },
  {
    "title": "The Adventures of Teddy Ruxpin",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Friendship",
      "Adventure",
      "Problem Solving",
      "Morality",
      "Fantasy Elements",
      "Perseverance",
      "Courage",
      "Social-Emotional",
      "Mild Peril"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-adventures-of-teddy-ruxpin.jpg"
  },
  {
    "title": "The adventures of the gummi bears",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Overcoming Fears",
      "Adventure",
      "Friendship",
      "Fantasy Elements",
      "Problem Solving",
      "Courage",
      "Perseverance",
      "Mild Violent themes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D Anime-style Animation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "the-adventures-of-the-gummi-bears.jpg"
  },
  {
    "title": "The Backyardigans",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Communication & Expression",
      "Creativity & Imagination",
      "Teamwork",
      "Music",
      "Problem Solving",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "the-backyardigans.jpg"
  },
  {
    "title": "The Bear Construction",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Engineering Concepts",
      "Storytelling without Dialogue",
      "Construction",
      "Teamwork",
      "Problem Solving",
      "Machinery",
      "Vehicle Recognition",
      "Entertainment",
      "Curiosity",
      "ASMR"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation with detailed depictions of construction sites and machinery",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-bear-construction.jpg"
  },
  {
    "title": "The Bernstein Bears",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Relatable Situations",
      "Social Development",
      "Social-Emotional",
      "Family Relationships",
      "Family Values",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D animation with a hand-drawn look.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-bernstein-bears.jpg"
  },
  {
    "title": "The Big Comfy Couch",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-6",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Overcoming Fears",
      "Social-Emotional",
      "Problem Solving",
      "Motor Skills",
      "Numeracy",
      "Literacy",
      "Exercise"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action costumed puppetry with detailed sets.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-big-comfy-couch.jpg"
  },
  {
    "title": "The Busy World of Richard Scarry",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Learning from Mistakes",
      "Cultural & Social",
      "Problem Solving",
      "Social-Emotional",
      "Community Service",
      "Relatable Situations",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-busy-world-of-richard-scarry.jpg"
  },
  {
    "title": "The Care Bears (1985-1988)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Learning from Mistakes",
      "Emotional Intelligence",
      "Social-Emotional",
      "Social Development",
      "Friendship"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D animation with soft character designs. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "the-care-bears-(1985-1988).jpg"
  },
  {
    "title": "The Cat in the Hat",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Science",
      "Nature",
      "Exploration",
      "Problem Solving",
      "Geography",
      "Ecosystems",
      "Curiosity",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "the-cat-in-the-hat.jpg"
  },
  {
    "title": "The Clangers (BBC)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Spacetime and the Cosmos",
      "Creativity & Imagination",
      "Problem Solving",
      "Social-Emotional",
      "Social Development",
      "Exploration",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional Stop-Motion animation with live-action model sets",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename":     "the-clangers-(bbc).jpeg"
  },
  {
    "title": "The Crocodile Hunter (1996-2007):",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "8+",
    "seasons": "8 Seasons",
    "avg_episode_length": "Very Long (>30m)",
    "themes": [
      "Environmental Awareness",
      "Overcoming Fears",
      "Positive Role Models",
      "Wildlife Exploration",
      "Wildlife Conservation",
      "Nature",
      "Natural World",
      "Animals",
      "Animal Behaviour",
      "Curiosity",
      "Ecosystems",
      "Intense Animal Interaction"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action documentary featuring wildlife. Color Palette: Natural colors showcasing diverse environments.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-crocodile-hunter-(1996-2007).jpg"
  },
  {
    "title": "The Enchanted World of Brambly Hedge",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Natural World",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Curiosity",
      "Mindfulness",
      "Nature"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-motion animation with hand-crafted models.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-enchanted-world-of-brambly-hedge.jpg"
  },
  {
    "title": "The Epic Tales of Captain Underpants (2018-present)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Friendship",
      "Problem Solving",
      "Entertainment",
      "Mischievous Behaviour",
      "Toilet Humour"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D animation with a comic-book aesthetic",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-epic-tales-of-captain-underpants-(2018-present).jpeg"
  },
  {
    "title": "The fixies",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "STEM",
      "Problem Solving",
      "Curiosity",
      "Teamwork",
      "Science",
      "Motor Skills",
      "Critical Thinking",
      "Technology",
      "Engineering Concepts"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-fixies.jpeg"
  },
  {
    "title": "The Land Before Time (2016)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Perseverance",
      "Adventure",
      "Entertainment",
      "Dinosaurs",
      "Mild Peril",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-land-before-time-(2016).jpg"
  },
  {
    "title": "The Land of Boggs",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "12+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural & Social",
      "Life Lessons",
      "Creativity & Imagination",
      "Learning from Mistakes",
      "Complex Emotional Themes",
      "Entertainment",
      "Humor",
      "Silly Comedy",
      "Skit Comedy",
      "Slice of Life",
      "Light Hearted",
      "Social-Emotional",
      "Relatable Situations",
      "Surreal Imagery",
      "Mature Themes"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D animation with simple, colorful designs and expressive characters.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-land-of-boggs.jpeg"
  },
  {
    "title": "The Lion Guard",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Natural World",
      "Wildlife Conservation",
      "Wildlife Exploration",
      "Courage",
      "Responsibility"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-lion-guard.jpg"
  },
  {
    "title": "The Little Mermaid 1992 series",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Adventure",
      "Friendship",
      "Courage",
      "Marine Biology",
      "Entertainment",
      "Teamwork",
      "Mild Peril"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with Bold Designs",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-little-mermaid-1992-series.jpg"
  },
  {
    "title": "The Magic School Bus Rides Again",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "STEM",
      "Exploration",
      "Critical Thinking",
      "Discovery",
      "Curiosity",
      "Nature",
      "Science"
    ],
    "interactivity_level": "High",
    "animation_style": "Traditional hand-drawn 2D animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "the-magic-school-bus-rides-again.jpg"
  },
  {
    "title": "The Magic School Bus (1994-1997)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "STEM",
      "Nature",
      "Science",
      "Engineering Concepts",
      "Curiosity",
      "Experimentation"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Traditional hand-drawn",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-magic-school-bus-(1994-1997).jpg"
  },
  {
    "title": "The Mik Maks",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Preschool-Basics",
      "Elementary-Basics",
      "sing-a-long",
      "Dance",
      "Instruments",
      "Music",
      "Motor Skills",
      "Exercise",
      "Phonics",
      "Vocabulary",
      "Entertainment",
      "Silly Comedy",
      "Family Values",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action Performances with Colorful Costumes and Sets. Some 2D animations",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-mik-maks.jpg"
  },
  {
    "title": "The New Adventures of Winnie the Pooh",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Social Development",
      "Emotional Intelligence",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional Hand-Drawn 2D animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "the-new-adventures-of-winnie-the-pooh.jpg"
  },
  {
    "title": "The Octonauts",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Problem Solving",
      "Ecosystems",
      "Curiosity",
      "Natural World",
      "Marine Biology",
      "Teamwork"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-octonauts.jpg"
  },
  {
    "title": "The Oddbods Show",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Friendship",
      "Entertainment",
      "Social-Emotional",
      "Slapstick Comedy",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "the-oddbods-show.jpg"
  },
  {
    "title": "The Snoopy Show",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultural & Social",
      "Creativity & Imagination",
      "Entertainment",
      "Social Development",
      "Friendship"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-snoopy-show.jpg"
  },
  {
    "title": "The Stinky & Dirty Show (2016-2019)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Teamwork",
      "Perseverance",
      "Engineering Concepts",
      "Critical Thinking"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-stinky-and-dirty-show-(2016-2019).jpg"
  },
  {
    "title": "The Wiggles",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Physical Fitness",
      "Preschool-Basics",
      "Music",
      "Dance",
      "sing-a-long",
      "Motor Skills",
      "Social-Emotional",
      "Entertainment"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "the-wiggles.jpg"
  },
  {
    "title": "Theodore Tugboat",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Adventure",
      "Responsibility",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "theodore-tugboat.jpeg"
  },
  {
    "title": "Thomas & Friends (1984-2008)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "25 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional Stop-Motion animation with live-action model sets",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "thomas-and-friends-(1984-2008).jpg"
  },
  {
    "title": "Thomas & Friends: All Engines Go (2021)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Responsibility",
      "Problem Solving"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "thomas-and-friends-all-engines-go-(2021).jpg"
  },
  {
    "title": "Time for school",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Arts & Crafts",
      "Preschool-Basics",
      "Elementary-Basics",
      "Relatable Situations",
      "Social Development",
      "Social-Emotional",
      "Routine",
      "Motor Skills"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "High",
    "image_filename": "time-for-school.jpeg"
  },
  {
    "title": "Tinga Tinga Tales",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "4-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural Appreciation",
      "Cultural & Social",
      "Learning from Mistakes",
      "African folk tales",
      "Cultures & Traditions",
      "Animals",
      "Curiosity",
      "Nature Sounds",
      "Traditional Narratives",
      "Geography",
      "Animal Behaviour",
      "Social-Emotional",
      "Morality",
      "Friendship",
      "Responsibility",
      "Humor",
      "Entertainment",
      "Light Hearted"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Animation Inspired by Tinga Tinga African Art",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "tinga-tinga-tales.jpg"
  },
  {
    "title": "Tom & Jerry",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-12",
    "seasons": "1 Season",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Slapstick Comedy",
      "Rivalry",
      "Entertainment",
      "Music",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Digital Animation with exaggerated and dynamic character movements.",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "tom-and-jerry.jpeg"
  },
  {
    "title": "Topsy and Tim",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Social-Emotional",
      "Relatable Situations",
      "Family Relationships",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "High",
    "image_filename": "topsy-and-tim.jpeg"
  },
  {
    "title": "Tots TV",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultures & Traditions",
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Literacy",
      "Curiosity",
      "Language Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with puppet segments. Color Palette: Soft, natural colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "tots-tv.jpg"
  },
  {
    "title": "Tractor Ted",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Agriculture",
      "Machinery",
      "Farm Life",
      "Animals",
      "Nature",
      "Animal Behaviour"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action and 2D Animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "tractor-ted.jpg"
  },
  {
    "title": "Trash truck",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "trash-truck.jpeg"
  },
  {
    "title": "Tumble leaf",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Nature",
      "Motor Skills",
      "Critical Thinking",
      "Exploration",
      "Natural World",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 3D Stop-Motion",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "tumble-leaf.jpg"
  },
  {
    "title": "Tweedy & Fluff",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Life-Lessons",
      "Exploring Emotions",
      "Communication and Expression",
      "Stop-Motion",
      "Slice of Life",
      "Friendship",
      "Pet Ownership",
      "Empathy",
      "Gentle Humour",
      "Problem-Solving",
      "Relatable-Situations"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional stop-frame animation techniques, meticulously capturing each movement of the handcrafted puppets frame by frame to create fluid and engaging motion.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low",
    "image_filename": "tweedy-and-fluff.jpg"
  },
  {
    "title": "Ultimate Spiderman",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Morality",
      "Responsibility",
      "Courage",
      "Problem Solving",
      "Entertainment",
      "Humor",
      "Mild Violent themes",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate",
    "image_filename": "ultimate-spiderman.jpeg"
  },
  {
    "title": "VeggieTales",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Religion",
      "Responsibility",
      "Family Values",
      "History",
      "Literacy",
      "Social Development",
      "Community Service",
      "Biblical Teachings"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Very High",
    "image_filename": "veggietales.jpg"
  },
  {
    "title": "VeggieTales in the House (2014-2016)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Religion",
      "Responsibility",
      "Family Values",
      "History",
      "Literacy",
      "Social Development",
      "Community Service",
      "Biblical Teachings"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "veggietales-in-the-house.jpg"
  },
  {
    "title": "Vlad and Nikki",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learn Through Play",
      "Creativity & Imagination",
      "Problem Solving",
      "Adventure",
      "Family Relationships",
      "Multilingual Learning",
      "Humor",
      "Entertainment",
      "Hyper-Activity"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-action videos featuring Vlad and Niki, often enhanced with special effects and animations to create engaging and fantastical elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "vlad-and-nikki.jpg"
  },
  {
    "title": "Vooks",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Literacy",
      "Reading Comprehension",
      "Vocabulary",
      "Language Learning",
      "Phonics",
      "Cognitive Development",
      "Music",
      "Speech Development",
      "Read-Along"
    ],
    "interactivity_level": "High",
    "animation_style": "Animated adaptations of children's books, featuring subtle animations that complement the original illustrations, accompanied by professional narration and sound effects.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "Vooks.jpg"
  },
  {
    "title": "Wacky Races",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Adventure",
      "Humor",
      "Entertainment",
      "Perseverance",
      "Slapstick Comedy",
      "Mechanics",
      "Engineering Concepts",
      "Lack of Consequences",
      "Mild Intense Scenes",
      "Mild Violent themes"
    ],
    "interactivity_level": "Low",
    "animation_style": "Cartoonish 2D animation style",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate",
    "image_filename": "wacky-races.jpeg"
  },
  {
    "title": "Wallykazam",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Motor Skills",
      "Problem Solving",
      "Language Learning",
      "Literacy",
      "Fantasy Elements",
      "Reading Comprehension",
      "Phonics"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Very High",
    "image_filename": "wallykazam.jpg"
  },
  {
    "title": "What's New, Scooby-Doo? (2002–2006)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "whats-new-scooby-doo.jpeg"
  },
  {
    "title": "Wishenpoof",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Social Development",
      "Morality",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "wishenpoof.jpeg"
  },
  {
    "title": "Woolly and Tig",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Overcoming Fears",
      "Social-Emotional",
      "Relatable Situations",
      "Courage",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Combination of live-action and CGI animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "wolly-and-tig.jpg"
  },
  {
    "title": "Work It Out Wombats",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Problem Solving",
      "Teamwork",
      "Critical Thinking",
      "Social-Emotional",
      "Relatable Situations"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "work-it-out-wombats.jpg"
  },
  {
    "title": "Xavier Riddle and the Secret Museum",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Life Lessons",
      "History",
      "Morality",
      "Problem Solving",
      "Curiosity",
      "Courage",
      "Adventure"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "Xavier Riddle and the Secret Museum.jpg"
  },
  {
    "title": "Zaky & friends",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Life Lessons",
      "Cultures & Traditions",
      "Learning through Songs",
      "Cultural Appreciation",
      "Spiritual Development",
      "Quranic stories",
      "Religion",
      "Literacy",
      "Numeracy",
      "Social Development",
      "Social-Emotional",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "zaky-and-friends.jpg"
  },
  {
    "title": "Zoboomafoo (1999-2001)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Wildlife Exploration",
      "Animals",
      "Curiosity",
      "Nature",
      "Wildlife Conservation"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action, puppetry, and animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "zoboomafoo.jpg"
  }
]
</file>

<file path="package.json">
{
  "name": "sensory-friendly-shows",
  "version": "1.0.0",
  
  "main": "server/server.js",
  "scripts": {
    
    "start": "node server/server.js",
    "dev": "nodemon server/server.js",
    "test": "echo \"Error: no test specified\" && exit 1",
    
    "import-data": "node database/import_data.js",
    
    "update-images": "node scripts/updateImageFilenames.js"
  },
  
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^5.1.0", 
    "sqlite3": "^5.1.7"
    
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}
</file>

<file path="server/api/shows.js">
// server/api/shows.js
const express = require('express');
const { runQuery, getSingleRow, getThemesForShows, attachThemesToShowList } = require('../db/queries'); // Import query helpers

const router = express.Router();

// GET /api/shows - List shows with filtering, sorting, pagination
router.get('/', async (req, res) => {
    // --- Extract and Validate Query Parameters ---
    const {
        search, themes, minAge, maxAge, stimScoreMin, stimScoreMax,
        interactivity, dialogue, sceneFreq,
        sortBy = 'title', // Default sort column
        sortOrder = 'asc', // Default sort order
        page = 1, limit = 21
    } = req.query;

    // Ensure page and limit are integers and calculate offset
    const pageNum = parseInt(page, 10) || 1;
    const limitNum = parseInt(limit, 10) || 21;
    const offset = (pageNum - 1) * limitNum;

    const validSortOrders = ['asc', 'desc'];
    const order = validSortOrders.includes(sortOrder.toLowerCase()) ? sortOrder.toLowerCase() : 'asc';
    // Whitelist valid sort columns to prevent SQL injection via sortBy parameter
    const validSortColumns = ['title', 'stimulation_score', 'min_age', 'max_age']; // Add more as needed (e.g., numeric scores)
    const sortColumn = validSortColumns.includes(sortBy.toLowerCase()) ? sortBy.toLowerCase() : 'title';

    // --- Build SQL Query Dynamically ---
    // Base query selects distinct shows to avoid duplicates when joining themes
    // Select specific columns needed for the catalog card display + ID
    let query = `SELECT DISTINCT s.id, s.title, s.stimulation_score, s.target_age_group, s.image_filename, s.interactivity_level FROM shows s`;
    // Base query for counting total matching shows for pagination
    let countQuery = `SELECT COUNT(DISTINCT s.id) as total FROM shows s`;
    let joins = ''; // To store necessary JOIN clauses
    let conditions = []; // To store WHERE conditions
    let queryParams = []; // To store parameters for the main query (prevents SQL injection)
    let countParams = []; // To store parameters for the count query

    // -- Handle Theme Filtering --
    if (themes) {
        const themeList = themes.split(',').map(t => t.trim()).filter(t => t);
        if (themeList.length > 0) {
            // Join necessary tables if filtering by theme
            joins += ` JOIN show_themes st ON s.id = st.show_id JOIN themes t ON st.theme_id = t.id`;
            // Create placeholders (?,?,?) for theme names
            const themePlaceholders = themeList.map(() => '?').join(',');
            // Add condition to check theme names (case-insensitive)
            conditions.push(`t.name IN (${themePlaceholders}) COLLATE NOCASE`);
            queryParams.push(...themeList); // Add themes to params
            // Adjust count query base to include joins when filtering by themes
            countQuery = `
                SELECT COUNT(DISTINCT s.id) as total FROM shows s
                JOIN show_themes st ON s.id = st.show_id
                JOIN themes t ON st.theme_id = t.id`; // Rebuild count query base with joins
        }
    }

    // -- Handle Text Search --
    if (search) {
        // LIKE %search% is less efficient but flexible. Consider FTS for large datasets.
        conditions.push(`s.title LIKE ? COLLATE NOCASE`); // Case-insensitive search
        queryParams.push(`%${search}%`);
    }

    // -- Handle Age Range Filter --
    // This checks for overlaps: filter range overlaps show range
    if (minAge !== undefined && maxAge !== undefined) {
         const minAgeNum = parseInt(minAge, 10);
         const maxAgeNum = parseInt(maxAge, 10);
         // Only apply if both are valid numbers
         if (!isNaN(minAgeNum) && !isNaN(maxAgeNum)) {
             conditions.push(`(
                (s.max_age >= ? AND s.min_age <= ?) OR -- Show range overlaps filter range
                (s.min_age IS NULL OR s.max_age IS NULL)  -- Always include shows with undefined age
             )`);
             // Params: minAgeFilter, maxAgeFilter
             queryParams.push(minAgeNum, maxAgeNum);
         }
    }

    // -- Handle Stimulation Score Range --
    if (stimScoreMin !== undefined) {
        const scoreMin = parseInt(stimScoreMin, 10);
        if (!isNaN(scoreMin)) {
             conditions.push(`s.stimulation_score >= ?`);
             queryParams.push(scoreMin);
        }
    }
    if (stimScoreMax !== undefined) {
         const scoreMax = parseInt(stimScoreMax, 10);
         if (!isNaN(scoreMax)) {
             conditions.push(`s.stimulation_score <= ?`);
             queryParams.push(scoreMax);
         }
    }

    // -- Handle Other Text Filters (Exact Match, Case-Insensitive) --
    if (interactivity) { conditions.push(`s.interactivity_level = ? COLLATE NOCASE`); queryParams.push(interactivity); }
    if (dialogue) { conditions.push(`s.dialogue_intensity = ? COLLATE NOCASE`); queryParams.push(dialogue); }
    if (sceneFreq) { conditions.push(`s.scene_frequency = ? COLLATE NOCASE`); queryParams.push(sceneFreq); }

    // --- Combine Query Parts ---
    // Add joins (important to add before WHERE)
    query += joins;
    countQuery += (countQuery.includes('JOIN') ? '' : joins); // Add joins to count if not already present

    // Add WHERE clause if conditions exist
    if (conditions.length > 0) {
        const whereClause = ` WHERE ${conditions.join(' AND ')}`;
        query += whereClause;
        countQuery += whereClause;
        // Parameters for count query are the same as the main query up to this point
        countParams = [...queryParams];
    }

    // --- Add Sorting and Pagination to main query ---
    query += ` ORDER BY s.${sortColumn} ${order}, s.title ASC LIMIT ? OFFSET ?`;
    queryParams.push(limitNum, offset); // Add limit and offset to main query params

    try {
        // --- Execute Queries Concurrently ---
        if (queryParams.length > 2 || countParams.length > 0) { // Log if more than just limit/offset or if count has params
            console.log(`Executing Show Query: ${query}`);
            console.log(`Show Query Params:`, queryParams);
            console.log(`Executing Count Query: ${countQuery}`);
            console.log(`Count Query Params:`, countParams);
       }
       
        const [totalResult, showsResult] = await Promise.all([
            getSingleRow(countQuery, countParams), // Fetch total count
            runQuery(query, queryParams) // Fetch shows for the current page
        ]);

        // --- Process Results ---
        const totalShows = totalResult?.total || 0;
        const totalPages = Math.ceil(totalShows / limitNum);

        // Fetch and attach themes for the retrieved shows
        const showIds = showsResult.map(s => s.id);
        const themesMap = await getThemesForShows(showIds);
        const showsWithThemes = attachThemesToShowList(showsResult, themesMap);

        // --- Send Response ---
        res.json({
            shows: showsWithThemes,
            totalShows,
            totalPages,
            currentPage: pageNum,
            limit: limitNum
        });
    } catch (error) {
        console.error(`Error in GET ${req.originalUrl} (ID: ${id}):`, error.message);
        // console.error(error.stack); // Uncomment for full stack trace
        // Determine status code based on error type
        const statusCode = error.message.includes("not found") ? 404 : 500;
        const userMessage = statusCode === 404 ? `Show with ID ${id} not found.` : "Failed to retrieve show from database.";
        res.status(statusCode).json({ error: userMessage });
     }
});

// GET /api/shows/title/:title - Get show by exact title
router.get('/title/:title', async (req, res) => {
    const title = decodeURIComponent(req.params.title); // Decode title from URL
    const sql = `SELECT * FROM shows WHERE title = ? COLLATE NOCASE`; // Case-insensitive search
    try {
        const show = await getSingleRow(sql, [title]);
        if (show) {
             const themesMap = await getThemesForShows([show.id]);
             const showWithThemes = attachThemesToShowList([show], themesMap)[0];
             res.json(showWithThemes);
        } else {
            res.status(404).json({ error: `Show with title "${title}" not found.` });
        }
    }catch (error) {
        console.error(`Error in GET ${req.originalUrl} (IDs: ${ids?.join(',') || 'N/A'}):`, error.message);
        // console.error(error.stack); // Uncomment for full stack trace
        res.status(500).json({ error: "Failed to retrieve shows for comparison." }); // Keep generic user message
    }
});

// GET /api/shows/compare?ids=1,2,3 - Get multiple shows for comparison
router.get('/compare', async (req, res) => {
    const idString = req.query.ids;
    if (!idString) {
        return res.status(400).json({ error: "Missing 'ids' query parameter." });
    }
    // Validate IDs are numbers and sanitize
    const ids = idString.split(',')
                       .map(id => parseInt(id.trim(), 10))
                       .filter(id => !isNaN(id) && id > 0);

    if (ids.length === 0) {
        return res.status(400).json({ error: "No valid IDs provided." });
    }
    if (ids.length > 3) {
         return res.status(400).json({ error: "Cannot compare more than 3 shows." });
    }

    const placeholders = ids.map(() => '?').join(',');
    // Select all columns needed for comparison display
    const sql = `SELECT * FROM shows WHERE id IN (${placeholders})`;

    try {
        const shows = await runQuery(sql, ids);
         if (shows.length === 0) {
            // Return empty array if no shows found matching IDs, not necessarily an error
            return res.json([]);
         }

        // Fetch and attach themes
        const themesMap = await getThemesForShows(ids);
        const showsWithThemes = attachThemesToShowList(shows, themesMap);

        // Ensure order matches input IDs
        const sortedShows = ids.map(id => showsWithThemes.find(s => s.id === id)).filter(Boolean); // Filter out potential undefined if an ID wasn't found

        res.json(sortedShows); // Send back the shows found
    } catch (error) {
        console.error(`Error fetching shows for comparison (IDs: ${ids.join(',')}):`, error.message);
        res.status(500).json({ error: "Failed to retrieve shows for comparison." });
    }
});

// GET /api/shows/:id - Get single show by ID (MUST be last specific route in this file)
router.get('/:id', async (req, res) => {
    const id = parseInt(req.params.id, 10);
    if (isNaN(id) || id <= 0) { // Added check for positive ID
        return res.status(400).json({ error: "Invalid show ID provided." });
    }
    // Select all columns needed for the detail page
    const sql = `SELECT * FROM shows WHERE id = ?`;
    try {
        const show = await getSingleRow(sql, [id]);
        if (show) {
             const themesMap = await getThemesForShows([show.id]);
             const showWithThemes = attachThemesToShowList([show], themesMap)[0];
             res.json(showWithThemes);
        } else {
            res.status(404).json({ error: `Show with ID ${id} not found.` });
        }
    } catch (error) {
        console.error(`Error fetching show ID ${id}:`, error.message);
        res.status(500).json({ error: "Failed to retrieve show from database." });
    }
});

module.exports = router; // Export the router
</file>

<file path="client/src/components/catalog/FilterPanel.jsx">
// client/src/components/catalog/FilterPanel.jsx
import React, { useState, useEffect } from 'react'; // Standard React imports
import { getThemes } from '../../services/showService'; // To fetch the list of themes

// --- Constants defined OUTSIDE the component (Makes them reusable and keeps component clean) ---
const ageRanges = [
    { label: 'Any Age', value: { min: 0, max: 99 } },
    { label: 'Toddler (0-2)', value: { min: 0, max: 2 } },
    { label: 'Preschool (3-5)', value: { min: 3, max: 5 } },
    { label: 'Early Elem. (6-8)', value: { min: 6, max: 8 } },
    { label: 'Late Elem. (9-12)', value: { min: 9, max: 12 } },
    { label: 'Teen (13+)', value: { min: 13, max: 99 } },
];
const interactionLevels = ['High', 'Moderate', 'Low-Moderate', 'Low'];
const dialogueIntensities = ['High', 'Moderate-High', 'Moderate', 'Low-Moderate', 'Low', 'Very Low', 'None'];
const sceneFrequencies = ['Very High', 'High', 'Moderate', 'Low', 'Very Low'];

// --- Component Definition ---
// We define the component's logic here.
// It receives properties (props) from its parent (CatalogPage):
// - filters: The current filter values (except search) derived from the URL
// - onFilterChange: A function to call when a NON-search filter changes
// - searchInputValue: The current text typed into the search box
// - onSearchInputChange: A function to call specifically when the search box text changes
const FilterPanelComponent = ({ filters = {}, onFilterChange, searchInputValue, onSearchInputChange }) => {
    // console.log("Rendering FilterPanel. Filters:", filters, "SearchVal:", searchInputValue); // For debugging if needed

    // State for loading themes list
    const [availableThemes, setAvailableThemes] = useState([]);
    const [themesLoading, setThemesLoading] = useState(true);

    // Effect to fetch themes when the component first loads
    useEffect(() => {
        const fetchThemes = async () => {
            try {
                setThemesLoading(true);
                const themesData = await getThemes();
                setAvailableThemes(themesData || []);
            } catch (error) {
                console.error("Error fetching themes for filter:", error);
                // Optionally show an error message to the user here
            } finally {
                setThemesLoading(false);
            }
        };
        fetchThemes();
    }, []); // Empty array means this runs only once on mount

    // --- Event Handler for NON-Search Filters ---
    // This function runs when you change things like Age Range, Themes checkboxes, dropdowns, sliders
    const handleChange = (event) => {
        const { name, value, type, checked } = event.target;

        // Make a copy of the current filters (passed in via props)
        // Exclude 'search' as it's handled separately by onSearchInputChange
        const currentNonSearchFilters = { ...filters };
        delete currentNonSearchFilters.search;

        let updatedFilters = { ...currentNonSearchFilters }; // Start with non-search filters

        // --- Handle Theme Checkboxes ---
        if (type === 'checkbox' && name === 'themes') {
            const currentThemes = filters.themes ? filters.themes.split(',').filter(t => t) : [];
            if (checked) {
                updatedFilters.themes = [...currentThemes, value].join(',');
            } else {
                updatedFilters.themes = currentThemes.filter(theme => theme !== value).join(',');
            }
            // If no themes are selected, remove the 'themes' filter key entirely
            if (!updatedFilters.themes) delete updatedFilters.themes;

        // --- Handle Age Range Radio Buttons ---
        } else if (name === 'ageRange') {
             try {
                // The value is a JSON string like '{"min":3,"max":5}', parse it
                const ageValue = JSON.parse(value);
                // Ensure ageValue is an object with min/max before proceeding
                if (ageValue && typeof ageValue.min === 'number' && typeof ageValue.max === 'number') {
                    if (ageValue.min === 0 && ageValue.max === 99) { // "Any Age" selected
                        // Remove age filters if "Any Age" is chosen
                        delete updatedFilters.minAge;
                        delete updatedFilters.maxAge;
                    } else {
                        // Set specific min/max age filters
                        updatedFilters.minAge = ageValue.min;
                        updatedFilters.maxAge = ageValue.max;
                    }
                } else {
                     console.warn("Invalid age range value received:", value);
                }
             } catch(e) {
                console.error("Error parsing age range value:", value, e);
             }

        // --- Handle Stimulation Score Range Sliders ---
        } else if (name === 'stimScoreMin' || name === 'stimScoreMax') {
            const newValue = parseInt(value, 10);
            // Only update if the parsed value is a valid number
            if (!isNaN(newValue)) {
                 updatedFilters[name] = newValue;

                 // Ensure min score is always less than or equal to max score
                 const currentMin = parseInt(updatedFilters.stimScoreMin || filters.stimScoreMin || '1', 10);
                 const currentMax = parseInt(updatedFilters.stimScoreMax || filters.stimScoreMax || '5', 10);

                 if (name === 'stimScoreMin' && newValue > currentMax) {
                     // If new min is greater than current max, set max to the new min
                     updatedFilters.stimScoreMax = newValue;
                 } else if (name === 'stimScoreMax' && newValue < currentMin) {
                      // If new max is less than current min, set min to the new max
                     updatedFilters.stimScoreMin = newValue;
                 }
             }
        // --- Handle Other Select Dropdowns (Interactivity, Dialogue, Scene Frequency) ---
        } else {
            // If the selected value is empty (e.g., the "-- Any --" option), remove the filter key
            if (value === '') {
                 delete updatedFilters[name];
            } else {
                // Otherwise, set the filter key to the selected value
                updatedFilters[name] = value;
            }
        }

        // Call the onFilterChange function (passed from CatalogPage)
        // This tells CatalogPage about the changes to NON-search filters
        if (onFilterChange) {
             onFilterChange(updatedFilters);
        }
    };

    // --- JSX Rendering (What the component looks like) ---
    return (
        <div className="space-y-5 p-4 bg-white rounded-lg border border-gray-200 shadow-sm"> {/* Added some padding/styling */}

            {/* 1. Show Name Input */}
            <div>
                <label htmlFor="showName" className="block text-sm font-medium text-gray-700 mb-1">Show Name</label>
                <input
                    type="text"
                    id="showName"
                    name="search" // HTML attribute, not directly used for filtering logic here
                    value={searchInputValue} // Display the value from CatalogPage's local search state
                    onChange={onSearchInputChange} // Call the specific handler from CatalogPage when typing
                    placeholder="Enter title..."
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm"
                />
            </div>

            {/* 2. Age Range Radios */}
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Age Range</label>
                <div className="space-y-1">
                    {ageRanges.map(age => (
                        <div key={age.label} className="flex items-center">
                            <input
                                id={`age-${age.label}`}
                                name="ageRange" // Used by `handleChange`
                                type="radio"
                                value={JSON.stringify(age.value)}
                                // Determine if checked based on `filters` prop from CatalogPage
                                checked={
                                    (filters.minAge === undefined && age.value.min === 0 && age.value.max === 99) ||
                                    (String(filters.minAge) === String(age.value.min) && String(filters.maxAge) === String(age.value.max))
                                }
                                onChange={handleChange} // Use the generic handler for non-search filters
                                className="h-4 w-4 text-teal-600 border-gray-300 focus:ring-teal-500"
                            />
                            <label htmlFor={`age-${age.label}`} className="ml-2 block text-sm text-gray-900">
                                {age.label}
                            </label>
                        </div>
                    ))}
                </div>
            </div>

                        {/* 3. Themes Checkboxes */}
                        <div> {/* This is the main container for the Themes filter */}
                <label className="block text-sm font-medium text-gray-700 mb-1">Themes</label>
                <div className="max-h-40 overflow-y-auto border border-gray-200 rounded p-2 space-y-1 bg-gray-50">
                    {themesLoading ? (
                        /* Skeleton Loader for Themes */
                        <div className="space-y-2 animate-pulse">
                            <div className="h-4 bg-gray-300 rounded w-3/4"></div>
                            <div className="h-4 bg-gray-300 rounded w-1/2"></div>
                            <div className="h-4 bg-gray-300 rounded w-5/6"></div>
                        </div>
                    ) : availableThemes.length > 0 ? availableThemes.map(theme => (
                        <div key={theme} className="flex items-center">
                            <input
                                id={`theme-${theme}`}
                                name="themes" // Used by `handleChange`
                                type="checkbox"
                                value={theme}
                                // Determine if checked based on `filters` prop from CatalogPage
                                checked={filters.themes ? filters.themes.split(',').includes(theme) : false}
                                onChange={handleChange} // Use the generic handler
                                className="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500"
                            />
                            <label htmlFor={`theme-${theme}`} className="ml-2 block text-sm text-gray-900">
                                {theme}
                            </label>
                        </div>
                    )) : <p className="text-xs text-gray-500 italic">No themes available.</p>}
                 </div> {/* This closes the inner scrollable div */}
            </div> {/* This closes the main container div for the Themes filter */}


             {/* 4. Interaction Level Dropdown */}
            <div>
                <label htmlFor="interactionLevel" className="block text-sm font-medium text-gray-700 mb-1">Interaction Level</label>
                <select
                    id="interactionLevel"
                    name="interactivity" // Used by `handleChange`, corresponds to filter key
                    value={filters.interactivity || ''} // Display value based on `filters` prop
                    onChange={handleChange} // Use the generic handler
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white"
                    title="How much the show prompts viewer interaction..."
                >
                    <option value="">Any</option>
                    {interactionLevels.map(level => (
                        <option key={level} value={level}>{level}</option>
                    ))}
                </select>
            </div>

            {/* 5. Dialogue Intensity Dropdown */}
             <div>
                <label htmlFor="dialogueIntensity" className="block text-sm font-medium text-gray-700 mb-1">Dialogue Intensity</label>
                <select
                    id="dialogueIntensity"
                    name="dialogue" // Used by `handleChange`
                    value={filters.dialogue || ''} // Display value based on `filters` prop
                    onChange={handleChange} // Use the generic handler
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white"
                    title="Amount and pace of talking..."
                >
                    <option value="">Any</option>
                     {dialogueIntensities.map(level => (
                        <option key={level} value={level}>{level}</option>
                    ))}
                </select>
            </div>

             {/* 6. Scene Frequency Dropdown */}
             <div>
                <label htmlFor="sceneFrequency" className="block text-sm font-medium text-gray-700 mb-1">Scene Frequency</label>
                <select
                    id="sceneFrequency"
                    name="sceneFreq" // Used by `handleChange`
                    value={filters.sceneFreq || ''} // Display value based on `filters` prop
                    onChange={handleChange} // Use the generic handler
                     className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white"
                    title="How quickly scenes change..."
                >
                    <option value="">Any</option>
                    {sceneFrequencies.map(level => (
                        <option key={level} value={level}>{level}</option>
                    ))}
                </select>
            </div>

             {/* 7. Stimulation Score Sliders */}
             <div className="space-y-2">
                 <label className="block text-sm font-medium text-gray-700">
                     Stimulation Score Range
                 </label>
                 {/* Min Score */}
                 <div className='pl-2'>
                      <label htmlFor="stimScoreMin" className="block text-xs font-medium text-gray-700 mb-1">
                         Min: {filters.stimScoreMin || 1} {/* Display value based on `filters` prop */}
                     </label>
                     <input
                         type="range"
                         id="stimScoreMin"
                         name="stimScoreMin" // Used by `handleChange`
                         min="1" max="5" step="1"
                         value={filters.stimScoreMin || '1'} // Display value based on `filters` prop
                         onChange={handleChange} // Use the generic handler
                         className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-teal-600"
                     />
                 </div>
                  {/* Max Score */}
                 <div className='pl-2'>
                      <label htmlFor="stimScoreMax" className="block text-xs font-medium text-gray-700 mb-1">
                         Max: {filters.stimScoreMax || 5} {/* Display value based on `filters` prop */}
                     </label>
                     <input
                         type="range"
                         id="stimScoreMax"
                         name="stimScoreMax" // Used by `handleChange`
                         min="1" max="5" step="1"
                         value={filters.stimScoreMax || '5'} // Display value based on `filters` prop
                         onChange={handleChange} // Use the generic handler
                         className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-teal-600"
                     />
                 </div>
             </div>

            {/* Reset button is handled in CatalogPage, not here */}
        </div>
    );
};

// Wrap the component with React.memo for performance optimization.
// This prevents re-rendering if the props haven't changed.
const FilterPanel = React.memo(FilterPanelComponent);

export default FilterPanel; // Export the optimized version
</file>

<file path="client/src/pages/ComparePage.jsx">
// client/src/pages/ComparePage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { getShowList, getShowsForComparison } from '../services/showService';
import ScoreVisual from '../components/shared/ScoreVisual';

const placeholderImage = "/images/placeholder-show.png";

// --- Comparison Display Component ---
// This component takes the array of fetched shows and displays them side-by-side.
const ComparisonDisplayComponent = ({ shows }) => {
    // If no shows are passed (e.g., initially or after deselecting all), show a message.
    if (!shows || shows.length === 0) {
        return <p className="text-center text-gray-500 mt-6 italic">Select up to 3 shows above to compare them.</p>;
    }

    // Helper to display a list of themes
    const renderThemes = (themes) => {
        if (!themes || themes.length === 0) {
            return <span className="text-xs text-gray-400 italic">None</span>;
        }
        return themes.slice(0, 5).map((theme, index) => ( // Show max 5 themes
            <span key={index} className="inline-block bg-teal-100 text-teal-800 text-xs px-2 py-0.5 rounded-full mr-1 mb-1">
                {theme}
            </span>
        )).concat(themes.length > 5 ? [<span key="ellipsis" className="text-xs text-gray-400">...</span>] : []);
    };

    // Helper to render a detail row consistently
    const DetailRow = ({ label, values }) => (
        <tr className="border-b border-gray-200 hover:bg-gray-50">
            <td className="py-2 px-3 text-sm font-semibold text-gray-600 text-left sticky left-0 bg-gray-50 md:bg-transparent">{label}</td>
            {values.map((value, index) => (
                <td key={index} className="py-2 px-3 text-sm text-gray-700 text-center">
                    {/* Handle specific rendering like ScoreVisual or themes here if needed */}
                    {label === "Stimulation Score" ? <ScoreVisual score={value ?? 0} /> :
                     label === "Themes" ? renderThemes(value) :
                     (value ?? <span className="text-gray-400 italic">N/A</span>)}
                </td>
            ))}
            {/* Add empty cells if fewer than 3 shows are selected */}
            {Array(3 - values.length).fill(null).map((_, i) => <td key={`empty-${i}`} className="py-2 px-3"></td>)}
        </tr>
    );

    // Prepare data for rows
    const showTitles = shows.map(s => s?.title || 'N/A');
    const showImages = shows.map(s => s?.image_filename ? `/images/${s.image_filename}` : placeholderImage);
    const showScores = shows.map(s => s?.stimulation_score);
    const showAgeGroups = shows.map(s => s?.target_age_group);
    const showThemes = shows.map(s => s?.themes); // Pass the whole array
    const showInteractivity = shows.map(s => s?.interactivity_level);
    const showDialogue = shows.map(s => s?.dialogue_intensity);
    const showSceneFreq = shows.map(s => s?.scene_frequency);
    // Add more rows as needed

    return (
        <div className="mt-8 overflow-x-auto">
            <table className="min-w-full border-collapse border border-gray-300 bg-white shadow-md rounded-lg">
                {/* Header Row with Images */}
                <thead>
                    <tr className="bg-gray-100">
                        <th className="py-3 px-3 text-sm font-semibold text-gray-700 text-left sticky left-0 bg-gray-100 z-10">Feature</th>
                        {showTitles.map((title, index) => (
                            <th key={index} className="py-3 px-3 text-sm font-semibold text-gray-700 text-center align-top w-1/3">
                                <img
                                    src={showImages[index]}
                                    alt={`${title} poster`}
                                    className="w-24 h-auto object-contain mx-auto mb-2 rounded shadow border border-gray-200"
                                    onError={(e) => { e.target.onerror = null; e.target.src=placeholderImage }}
                                    loading="lazy"
                                />
                                {title}
                            </th>
                        ))}
                         {/* Add empty header cells if fewer than 3 shows are selected */}
                        {Array(3 - shows.length).fill(null).map((_, i) => <th key={`empty-h-${i}`} className="py-3 px-3 w-1/3"></th>)}
                    </tr>
                </thead>
                {/* Data Rows */}
                <tbody>
                    <DetailRow label="Stimulation Score" values={showScores} />
                    <DetailRow label="Target Age" values={showAgeGroups} />
                    <DetailRow label="Interactivity" values={showInteractivity} />
                    <DetailRow label="Dialogue Intensity" values={showDialogue} />
                    <DetailRow label="Scene Frequency" values={showSceneFreq} />
                    <DetailRow label="Themes" values={showThemes} />
                     {/* Add more <DetailRow> components for other fields */}
                </tbody>
            </table>
        </div>
    );
};

// Keep the React.memo wrapper
const ComparisonDisplay = React.memo(ComparisonDisplayComponent);

// --- Main ComparePage Component ---
const ComparePage = () => {
    const MAX_COMPARE = 3;
    const [showList, setShowList] = useState([]);
    const [listLoading, setListLoading] = useState(true);
    const [listError, setListError] = useState(null);
    const [selectedIds, setSelectedIds] = useState(() => {
        console.log("ComparePage: Initializing selectedIds state");
        return Array(MAX_COMPARE).fill('');
    });
    const [comparisonData, setComparisonData] = useState([]);
    const [compareLoading, setCompareLoading] = useState(false);
    const [compareError, setCompareError] = useState(null);

        // --- Fetch the list of all shows for the dropdowns when the component mounts ---
        useEffect(() => {
            console.log("ComparePage: Fetching show list for dropdowns...");
            setListLoading(true);
            setListError(null);
            getShowList()
                .then(data => {
                    console.log("ComparePage: Show list fetched successfully", data);
                    // Ensure data is an array, even if API returns something else unexpectedly
                    setShowList(Array.isArray(data) ? data : []);
                })
                .catch(err => {
                    console.error("ComparePage: Error fetching show list:", err);
                    setListError(err.message || "Failed to load show list.");
                    setShowList([]); // Ensure showList is an empty array on error
                })
                .finally(() => {
                    console.log("ComparePage: Finished fetching show list.");
                    setListLoading(false);
                });
            // This effect should only run once when the component mounts
        }, []); // Empty dependency array means run once on mount
    
        // --- Fetch comparison data whenever selectedIds changes ---
        useEffect(() => {
            // Filter out empty IDs ('') before fetching
            const idsToCompare = selectedIds.filter(id => id && String(id).trim() !== '');
    
            if (idsToCompare.length > 0) {
                console.log("ComparePage: Fetching comparison data for IDs:", idsToCompare);
                setCompareLoading(true);
                setCompareError(null);
                getShowsForComparison(idsToCompare)
                    .then(data => {
                        console.log("ComparePage: Comparison data fetched:", data);
                        // Ensure data is an array
                        setComparisonData(Array.isArray(data) ? data : []);
                    })
                    .catch(err => {
                        console.error("ComparePage: Error fetching comparison data:", err);
                        setCompareError(err.message || "Failed to load comparison data.");
                        setComparisonData([]); // Reset data on error
                    })
                    .finally(() => {
                         console.log("ComparePage: Finished fetching comparison data.");
                         setCompareLoading(false);
                    });
            } else {
                // If no valid IDs are selected, clear the comparison data and errors
                console.log("ComparePage: No valid IDs selected, clearing comparison data.");
                setComparisonData([]);
                setCompareError(null); // Clear any previous error
                setCompareLoading(false); // Ensure loading is off
            }
            // This effect depends on the selectedIds state
        }, [selectedIds]);

        // --- Handler for changing a selection ---
    // Ensures state updates immutably, which is crucial for React to detect changes.
    const handleSelectChange = useCallback((index, event) => {
        const newSelectedId = event.target.value;

        // Create a brand new array based on the current selectedIds state
        setSelectedIds(prevSelectedIds => {
            // Make a copy of the previous state array
            const newSelectedIds = [...prevSelectedIds];

            // Update the specific slot (index) with the new ID
            // If "-- Select a Show --" was chosen, its value is '', store that.
            newSelectedIds[index] = newSelectedId;

            // Return the new array to update the state
            return newSelectedIds;
        });

        // No need to manually trigger fetch here;
        // the useEffect hook that depends on selectedIds will automatically run.
        // setCompareLoading(true); // Let the useEffect handle loading state

    }, []); // No dependencies needed here, as we use the functional update form of setSelectedIds

    // --- Component Render ---
    console.log("ComparePage: Rendering component. Current selectedIds:", selectedIds);
    if (selectedIds === undefined) {
         console.error("ComparePage: CRITICAL - selectedIds is undefined right before render!");
    }

    // *** Prepare selection section content BEFORE the return statement ***
    let selectionSectionContent;
    if (listLoading) {
        // Display placeholders while list is loading
        selectionSectionContent = Array.from({ length: MAX_COMPARE }).map((_, index) => (
            <div key={index}>
                <label htmlFor={`select-show-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                    Select Show #{index + 1}
                </label>
                <select
                    id={`select-show-${index}`}
                    disabled={true}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white disabled:bg-gray-100"
                >
                     <option value="" disabled>Loading shows...</option>
                 </select>
            </div>
        ));
    } else if (listError) {
         // Display error state within the grid structure
         selectionSectionContent = (
            <div className={`md:col-span-${MAX_COMPARE} text-center text-red-600 mb-4 bg-red-100 p-3 rounded border border-red-300`}>
                 Error loading show list: {listError}
            </div>
         );
    } else if (showList.length === 0) {
         // Display no shows found state
         selectionSectionContent = (
            <div className={`md:col-span-${MAX_COMPARE} text-center text-gray-500`}>
                 No shows available to compare.
            </div>
         );
    } else if (selectedIds && Array.isArray(selectedIds)) {
        // If list loaded and selectedIds is valid, render the dropdowns
        selectionSectionContent = selectedIds.map((selectedIdValue, index) => (
            <div key={index}>
                <label htmlFor={`select-show-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                    Select Show #{index + 1}
                </label>
                <select
                    id={`select-show-${index}`}
                    value={selectedIdValue ?? ''} // Use the mapped value, fallback to empty string
                    onChange={(event) => handleSelectChange(index, event)}
                    // Disable should only depend on listError now, as loading is handled above
                    disabled={!!listError}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white disabled:bg-gray-100"
                >
                     <option value="">-- Select a Show --</option>
                     {showList.map(show => (
                         <option key={show.id} value={show.id}>
                             {show.title}
                         </option>
                     ))}
                 </select>
            </div>
        ));
    } else {
        // Fallback if selectedIds isn't an array for some reason
        selectionSectionContent = <p>Initializing selectors...</p>;
    }
    // *** END preparation of selection section content ***


    return (
        <div className="max-w-6xl mx-auto">
            <h1 className="text-3xl font-bold text-center text-teal-700 mb-8">Compare Shows</h1>

            {/* Show Selection Section - Render the prepared content */}
            <div className={`grid grid-cols-1 md:grid-cols-${MAX_COMPARE} gap-4 mb-6`}>
                {selectionSectionContent}
            </div>

            {/* Display listError prominently IF it wasn't already handled above */}
            {/* We might remove this duplicate display if the above handling is sufficient */}
            {/* {listError && !listLoading && ( ... error display ... )} */}


            {/* Comparison Display Area */}
            {compareLoading && <p className="text-center text-gray-500 italic mt-6">Loading comparison...</p>}
            {compareError && <p className="text-center text-red-500 mt-6 bg-red-100 p-3 rounded border border-red-300">{compareError}</p>}
            {!compareLoading && !compareError && <ComparisonDisplay shows={comparisonData} />}

        </div>
    );
};

export default ComparePage;
</file>

<file path="client/src/services/showService.js">
// client/src/services/showService.js
import axios from 'axios';

// The base URL for our API. Uses the Vite proxy.
const API_BASE_URL = '/api';

// Helper function to construct consistent error messages
const formatErrorMessage = (error, context) => {
    let message = `An unknown error occurred ${context}.`;
    if (error.response) {
        // Server responded with a status code outside 2xx range
        message = error.response.data?.error || `Server error (${error.response.status}) ${context}.`;
        // Handle specific statuses if needed, e.g., 404
        if (error.response.status === 404 && context.includes("ID")) {
             message = `Resource not found ${context}.`; // More specific 404
        }
    } else if (error.request) {
        // Request was made but no response received
        message = `No response received from server ${context}. Check network or backend.`;
    } else {
        // Something else happened in setting up the request
        message = error.message || message;
    }
    console.error(`Error ${context}:`, message, error); // Log the detailed error
    return message; // Return the formatted message
};

/**
 * Fetches a list of shows from the backend API with filtering, sorting, and pagination.
 * Returns an object like { shows: [], totalShows: 0, ... } or a default object on error.
 */
export const getShows = async (filters = {}, page = 1, limit = 21) => {
    try {
        const params = { ...filters, page, limit };
        Object.keys(params).forEach(key => (params[key] == null || params[key] === '') && delete params[key]);

        console.log('Fetching shows with params:', params);
        const response = await axios.get(`${API_BASE_URL}/shows`, { params });

        // Ensure response data structure is as expected
        if (response && response.data && Array.isArray(response.data.shows) && typeof response.data.totalPages === 'number') {
             return response.data;
        } else {
             console.warn("Received unexpected data structure from GET /shows:", response?.data);
             // Return a default structure to prevent UI errors
             return { shows: [], totalShows: 0, totalPages: 0, currentPage: 1, limit };
        }
    } catch (error) {
       const errorMessage = formatErrorMessage(error, "while fetching shows");
       // Re-throw the formatted error for the UI to handle
       // Consider returning the default structure here too if preferred over throwing
       // throw new Error(errorMessage);
       // Returning default structure instead of throwing for smoother UI:
       return { shows: [], totalShows: 0, totalPages: 0, currentPage: 1, limit };
    }
};

/**
 * Fetches details for a single show by its ID.
 * Returns the show object or null on error.
 */
export const getShowById = async (id) => {
     if (!id) {
         console.error("getShowById called with invalid ID.");
         return null; // Return null for invalid input
     }
     const context = `while fetching show ID ${id}`;
     try {
        console.log(`Workspaceing show by ID: ${id}`);
        const response = await axios.get(`${API_BASE_URL}/shows/${id}`);
        // Return data if response is valid, otherwise null
        return response?.data || null;
    } catch (error) {
         const errorMessage = formatErrorMessage(error, context);
         // Throwing the error might be better here if the detail page MUST have data
         // throw new Error(errorMessage);
         // Returning null for smoother UI, page should handle null state:
         return null;
     }
};

 /**
  * Fetches details for a single show by its exact title.
  * Returns the show object or null on error.
  */
 export const getShowByTitle = async (title) => {
     if (!title || typeof title !== 'string' || title.trim().length === 0) {
          console.error("getShowByTitle called with invalid title:", title);
          return null; // Return null for invalid input
     }
     const encodedTitle = encodeURIComponent(title.trim());
     const context = `while fetching show title "${title}"`;
     console.log(`Workspaceing show by title: ${title}, Encoded: ${encodedTitle}`);
     try {
         const response = await axios.get(`${API_BASE_URL}/shows/title/${encodedTitle}`);
          // Return data if response is valid, otherwise null
         return response?.data || null;
     } catch (error) {
         const errorMessage = formatErrorMessage(error, context);
         // throw new Error(errorMessage); // Option to throw
         return null; // Option to return null
     }
 };

 /**
  * Fetches the list of unique theme names.
  * Returns an array of strings or [] on error.
  */
 export const getThemes = async () => {
     const context = "while fetching themes";
     try {
        console.log("Fetching themes");
         const response = await axios.get(`${API_BASE_URL}/themes`);
         // Ensure data is an array, return [] otherwise
         return Array.isArray(response?.data) ? response.data : [];
     } catch (error) {
         formatErrorMessage(error, context); // Log the error
         return []; // Return empty array on error
     }
 };

 /**
  * Fetches details for multiple shows based on an array of IDs for comparison.
  * Returns an array of show objects or [] on error.
  */
 export const getShowsForComparison = async (ids) => {
    if (!Array.isArray(ids) || ids.length === 0) { // Simplified check
        console.warn("getShowsForComparison called with invalid IDs:", ids);
        return []; // Return empty array for invalid input
    }
    // Limit comparison - This check might be better placed in the component calling it.
    if (ids.length > 3) {
        console.warn(`Attempted to compare ${ids.length} shows, limiting to 3.`);
        ids = ids.slice(0, 3); // Silently limit or throw error? Limiting for now.
    }

    const validIds = ids.map(id => String(id).trim()).filter(id => id);
    if (validIds.length === 0) {
         return []; // Return empty if no valid IDs remain
    }

    const idString = validIds.join(',');
    const context = `while fetching shows for comparison (IDs: ${idString})`;
    console.log(`Workspaceing shows for comparison with IDs: ${idString}`);
    try {
        const response = await axios.get(`${API_BASE_URL}/shows/compare`, { params: { ids: idString } });
        // Ensure data is an array
        return Array.isArray(response?.data) ? response.data : [];
    } catch (error) {
        formatErrorMessage(error, context); // Log the error
        return []; // Return empty array on error
    }
 };

/**
 * Fetches autocomplete suggestions for show titles.
 * Returns an array of strings or [] on error.
 */
export const getAutocompleteSuggestions = async (term) => {
    if (!term || typeof term !== 'string' || term.trim().length < 2) {
        return []; // Return empty array for short/invalid terms
    }
    const searchTerm = term.trim();
    const context = `while fetching suggestions for term "${searchTerm}"`;
    console.log(`Workspaceing suggestions for term: "${searchTerm}"`);
    try {
        const response = await axios.get(`${API_BASE_URL}/suggestions`, { params: { term: searchTerm } });
        // Ensure data is an array
        return Array.isArray(response?.data) ? response.data : [];
    } catch (error) {
        formatErrorMessage(error, context); // Log the error
        return []; // Return empty array on error
    }
};

/**
 * Fetches all data needed for the homepage in a single request.
 * Returns the homepage data object or null on error.
 */
export const getHomepageData = async () => {
    const context = "while fetching homepage data";
    console.log(">>> Service: getHomepageData called.");
    try {
        const response = await axios.get(`${API_BASE_URL}/homepage-data`);
        // Basic check if data object exists
        return response?.data || null;
    } catch (error) {
        const errorMessage = formatErrorMessage(error, context);
        // throw new Error(errorMessage); // Option to throw
        return null; // Option to return null
    }
};

/**
 * Fetches the complete list of show IDs and titles for dropdowns.
 * Returns an array of {id, title} objects or [] on error.
 */
export const getShowList = async () => {
    const context = "while fetching show list";
    console.log(">>> Service: getShowList called.");
    try {
        const response = await axios.get(`${API_BASE_URL}/show-list`);
        // Ensure data is an array
        return Array.isArray(response?.data) ? response.data : [];
    } catch (error) {
        formatErrorMessage(error, context); // Log the error
        return []; // Return empty array on error
    }
};
</file>

</files>
