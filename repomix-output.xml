This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
client/.gitignore
client/eslint.config.js
client/index.html
client/package.json
client/postcss.config.js
client/public/vite.svg
client/README.md
client/src/App.jsx
client/src/components/catalog/FilterPanel.jsx
client/src/components/catalog/ShowCard.jsx
client/src/components/home/CategoryCard.jsx
client/src/components/home/FeaturedShow.jsx
client/src/components/Layout/footer.jsx
client/src/components/Layout/header.jsx
client/src/index.css
client/src/main.jsx
client/src/pages/CatalogPage.jsx
client/src/pages/ComparePage.jsx
client/src/pages/HomePage.jsx
client/src/pages/ShowDetailPage.jsx
client/src/services/showService.js
client/tailwind.config.js
client/vite.config.js
database/import_data.js
database/reviewed_shows.json
database/schema.sql
package.json
server.js
updateImageFilenames.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="client/src/components/home/CategoryCard.jsx">
// client/src/components/home/CategoryCard.jsx
import React from 'react';
import { Link } from 'react-router-dom';

// UPDATED: Accepts an IconComponent prop
const CategoryCard = ({ title, description, IconComponent, linkUrl }) => { 
  return (
    <Link
      to={linkUrl}
      // Slightly softer shadow and border
      className="block p-6 bg-white rounded-lg border border-gray-100 shadow hover:bg-gray-50 hover:shadow-md transition duration-200 text-center transform hover:-translate-y-1" 
    >
      <div className="flex justify-center mb-3 text-teal-600"> 
         {/* Render the passed icon component */}
         {IconComponent && <IconComponent size={32} />} 
      </div>
      <h5 className="mb-2 text-xl font-semibold tracking-tight text-gray-800">{title}</h5>
      <p className="font-normal text-sm text-gray-600">{description}</p>
    </Link>
  );
};

export default CategoryCard;
</file>

<file path="client/src/components/home/FeaturedShow.jsx">
// client/src/components/home/FeaturedShow.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const placeholderImage = "/images/placeholder-show.png";

const FeaturedShow = ({ show }) => {
    if (!show) {
        // Can return null or a loading state specific to this component
        return <div className="text-center p-6 bg-gray-100 rounded-lg">Loading featured show...</div>;
    }

    const imageUrl = show.image_filename ? `/images/${show.image_filename}` : placeholderImage;

    // Create a short description snippet (example)
    const descriptionSnippet = show.animation_style
        ? `${show.animation_style.substring(0, 100)}...` // Limit length
        : 'Learn more about this show!';

    return (
        <section className="py-12 px-4 bg-gradient-to-r from-blue-50 to-teal-50 rounded-lg shadow-md border border-gray-200">
            <h2 className="text-2xl font-semibold text-center text-gray-700 mb-6">Featured Show</h2>
            <div className="flex flex-col md:flex-row items-center gap-6 md:gap-8 max-w-4xl mx-auto">
                {/* Image */}
                <div className="md:w-1/3 flex-shrink-0">
                    <img
                        src={imageUrl}
                        alt={`${show.title} poster`}
                        className="rounded-lg shadow-lg w-full h-auto object-contain max-h-80" // Adjusted styles
                        loading="lazy" // Keep lazy loading
                        onError={(e) => { e.target.onerror = null; e.target.src=placeholderImage }}
                    />
                </div>
                {/* Details */}
                <div className="md:w-2/3 text-center md:text-left">
                    <h3 className="text-3xl font-bold text-teal-800 mb-2">{show.title}</h3>
                    <p className="text-md text-gray-600 mb-3">
                        <strong>Age Range:</strong> {show.target_age_group || 'N/A'}
                    </p>
                    <p className="text-md text-gray-600 mb-4 italic">
                        {descriptionSnippet}
                    </p>
                     <div className="mb-4">
                         <strong className="text-gray-700">Themes:</strong>
                         <div className="flex flex-wrap gap-2 mt-1 justify-center md:justify-start">
                             {show.themes && show.themes.slice(0, 4).map((theme, index) => ( // Show a few themes
                                 <span key={index} className="text-xs bg-teal-100 text-teal-800 px-3 py-1 rounded-full">
                                     {theme}
                                 </span>
                             ))}
                             {show.themes && show.themes.length > 4 && (
                                  <span className="text-xs text-gray-500 px-2 py-1">...</span>
                             )}
                             {!show.themes || show.themes.length === 0 && (
                                 <span className="text-xs text-gray-500 italic">None listed</span>
                             )}
                         </div>
                     </div>
                    <Link
                        to={`/show/${show.id}`}
                        className="inline-block px-6 py-2 bg-orange-500 text-white font-semibold rounded-full shadow hover:bg-orange-600 transition duration-200"
                    >
                        Learn More about {show.title}
                    </Link>
                </div>
            </div>
        </section>
    );
};

export default FeaturedShow;
</file>

<file path="updateImageFilenames.js">
const fs = require('fs');
const path = require('path');

const jsonPath = 'C:/My Web Sites/sensory-friendly-shows/database/reviewed_shows.json';
const imageDir = 'C:/My Web Sites/sensory-friendly-shows/client/public/images/Stim list - show images';

// Helper to slugify title into a base filename (without extension)
const slugify = title => title.toLowerCase()
  .replace(/[^a-z0-9]+/g, '-')
  .replace(/^-+|-+$/g, '');

// Load and parse the JSON
const shows = JSON.parse(fs.readFileSync(jsonPath));

// Get all image filenames in the directory
const imageFiles = fs.readdirSync(imageDir);

const matched = [];
const unmatched = [];

// Add matching image filename to each show
shows.forEach(show => {
  if (!show.image_filename) {
    const slug = slugify(show.title);
    const match = imageFiles.find(file =>
      file.toLowerCase().startsWith(slug) &&
      (file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg'))
    );
    if (match) {
      show.image_filename = match;
      matched.push(`${show.title} → ${match}`);
    } else {
      unmatched.push(show.title);
    }
  }
});

// Save updated JSON
fs.writeFileSync(jsonPath, JSON.stringify(shows, null, 2));

console.log('✅ Image filenames (.jpg/.jpeg) added where available!\n');
console.log('🟢 Matched Shows:');
matched.forEach(entry => console.log('  - ' + entry));

console.log('\n🔴 Unmatched Shows:');
unmatched.forEach(title => console.log('  - ' + title));
</file>

<file path="client/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="client/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="client/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="client/package.json">
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "chart.js": "^4.4.8",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.4.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@tailwindcss/cli": "^4.1.0",
    "@tailwindcss/postcss": "^4.1.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.0",
    "vite": "^6.2.0"
  }
}
</file>

<file path="client/postcss.config.js">
// client/postcss.config.js
export default {
    plugins: {
      '@tailwindcss/postcss': {}, // Use the new package name here
      autoprefixer: {},
    },
  }
</file>

<file path="client/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="client/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="client/src/App.jsx">
// client/src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// Import Page Components
import HomePage from './pages/HomePage';
import CatalogPage from './pages/CatalogPage';
import ShowDetailPage from './pages/ShowDetailPage';
import ComparePage from './pages/ComparePage';

// Import Layout Components
import Header from './components/Layout/Header';
import Footer from './components/Layout/Footer';

function App() { // Make sure this function definition is correct
  return ( 
    <Router>
      <div className="flex flex-col min-h-screen font-sans bg-gray-50 text-gray-800">
        <Header />
        {/* Ensure main has padding */}
        <main className="flex-grow container mx-auto px-4 py-8"> 
          <Routes>
            {/* Core Routes */}
            <Route path="/" element={<HomePage />} />
            <Route path="/shows" element={<CatalogPage />} />
            <Route path="/show/:id" element={<ShowDetailPage />} />
            <Route path="/compare" element={<ComparePage />} />

            {/* Catch-all Route */}
            <Route 
              path="*" 
              element={
                <div className="text-red-700 text-center py-10">
                  <h2 className="text-2xl font-bold mb-2">404 Page Not Found</h2>
                  <p>Sorry, the page you requested does not exist.</p>
                </div>
              } 
            />
          </Routes>
        </main>
        <Footer />
      </div>
    </Router>
  ); // End return
} // End App function

// !!! ENSURE THIS LINE IS PRESENT AND EXACTLY LIKE THIS AT THE VERY BOTTOM !!!
export default App;
</file>

<file path="client/src/components/catalog/FilterPanel.jsx">
// client/src/components/Catalog/FilterPanel.jsx
import React, { useState, useEffect } from 'react'; // Keep React and hooks import
import { getThemes } from '../../services/showService'; // Keep service import

// --- Constants defined OUTSIDE the component ---
const ageRanges = [
    { label: 'Any Age', value: { min: 0, max: 99 } },
    { label: 'Toddler (0-2)', value: { min: 0, max: 2 } },
    { label: 'Preschool (3-5)', value: { min: 3, max: 5 } },
    { label: 'Early Elem. (6-8)', value: { min: 6, max: 8 } },
    { label: 'Late Elem. (9-12)', value: { min: 9, max: 12 } },
    { label: 'Teen (13+)', value: { min: 13, max: 99 } },
];
const interactionLevels = ['High', 'Moderate', 'Low-Moderate', 'Low'];
const dialogueIntensities = ['High', 'Moderate-High', 'Moderate', 'Low-Moderate', 'Low', 'Very Low', 'None'];
const sceneFrequencies = ['Very High', 'High', 'Moderate', 'Low', 'Very Low'];
// Remove the old hardcoded themeOptions array if you want, or keep for fallback

// --- Component Definition ---
const FilterPanel = ({ filters = {}, onFilterChange, onReset }) => { // Accept props, provide default for filters

    // --- Hooks called INSIDE the component ---
    const [availableThemes, setAvailableThemes] = useState([]);
    const [themesLoading, setThemesLoading] = useState(true);

    useEffect(() => {
        const fetchThemes = async () => {
            try {
                setThemesLoading(true);
                const themesData = await getThemes();
                setAvailableThemes(themesData || []);
            } catch (error) {
                console.error("Error fetching themes for filter:", error);
            } finally {
                setThemesLoading(false);
            }
        };
        fetchThemes();
    }, []); // Empty dependency array - fetch themes only once

    // --- Event Handler ---
    const handleChange = (event) => {
        const { name, value, type, checked } = event.target;
        let newFilters = { ...filters }; // Copy filters object from props

        if (type === 'checkbox' && name === 'themes') { // Specific check for theme checkbox
            const currentThemes = filters.themes ? filters.themes.split(',').filter(t=>t) : []; // Ensure array even if empty string
            if (checked) {
                newFilters.themes = [...currentThemes, value].join(',');
            } else {
                newFilters.themes = currentThemes.filter(theme => theme !== value).join(',');
            }
            // Ensure empty string if no themes are selected
             if (newFilters.themes === '') delete newFilters.themes; // Remove key if empty for cleaner filter object


        } else if (name === 'ageRange') {
             try {
                const ageValue = JSON.parse(value);
                // Only include min/max age if not 'Any Age'
                 if (ageValue.min === 0 && ageValue.max === 99) {
                     delete newFilters.minAge;
                     delete newFilters.maxAge;
                 } else {
                    newFilters.minAge = ageValue.min;
                    newFilters.maxAge = ageValue.max;
                 }
             } catch(e) { console.error("Error parsing age value", e); }

        } else if  (name === 'stimScoreMin' || name === 'stimScoreMax') {
            // Handle sliders - update the specific min or max
            const newValue = parseInt(value, 10); // Ensure value is integer
            newFilters[name] = newValue;
   
            // Add validation: Ensure min <= max
            const currentMin = parseInt(newFilters.stimScoreMin || filters.stimScoreMin || '1', 10);
            const currentMax = parseInt(newFilters.stimScoreMax || filters.stimScoreMax || '5', 10);
   
            if (name === 'stimScoreMin' && newValue > currentMax) {
                // If new min is greater than current max, set max to new min
                newFilters.stimScoreMax = newValue;
            } else if (name === 'stimScoreMax' && newValue < currentMin) {
                // If new max is less than current min, set min to new max
                newFilters.stimScoreMin = newValue;
            }
            // Convert back to string if necessary, though numbers should be fine for state
            // newFilters.stimScoreMin = String(newFilters.stimScoreMin);
            // newFilters.stimScoreMax = String(newFilters.stimScoreMax);
   
        } else { // ... rest of the function

        }  {
            // Handle text input and selects
            if (value === '') {
                 // If a dropdown is set back to "Any" (empty value), remove the filter key
                 delete newFilters[name];
            } else {
                newFilters[name] = value;
            }
        }

        // Call the handler passed from CatalogPage
        if (onFilterChange) { // Check if the prop exists
             onFilterChange(newFilters);
        }
    };

    // REMOVED old handleReset and handleThemeChange functions that used internal state

    // --- JSX Rendering ---
    return (
        <div className="space-y-5">
            {/* 1. Show Name */}
            <div>
                <label htmlFor="showName" className="block text-sm font-medium text-gray-700 mb-1">Show Name</label>
                <input
                    type="text"
                    id="showName"
                    name="search" // Name matches the filter key
                    value={filters.search || ''} // Use value from props
                    onChange={handleChange} // Use unified handler
                    placeholder="Enter title..."
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm"
                />
            </div>

            {/* 2. Age Range */}
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Age Range</label>
                <div className="space-y-1">
                    {ageRanges.map(age => (
                        <div key={age.label} className="flex items-center">
                            <input
                                id={`age-${age.label}`}
                                name="ageRange"
                                type="radio"
                                value={JSON.stringify(age.value)}
                                // Check based on minAge/maxAge from props
                                checked={
                                    (filters.minAge === undefined && age.value.min === 0 && age.value.max === 99) || // Handle "Any Age" default
                                    (String(filters.minAge) === String(age.value.min) && String(filters.maxAge) === String(age.value.max))
                                }
                                onChange={handleChange}
                                className="h-4 w-4 text-teal-600 border-gray-300 focus:ring-teal-500"
                            />
                            <label htmlFor={`age-${age.label}`} className="ml-2 block text-sm text-gray-900">
                                {age.label}
                            </label>
                        </div>
                    ))}
                </div>
            </div>

            {/* 3. Themes */}
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Themes</label>
                <div className="max-h-40 overflow-y-auto border border-gray-200 rounded p-2 space-y-1 bg-gray-50">
                    {themesLoading ? (
                        <p className="text-xs text-gray-500">Loading themes...</p>
                    ) : availableThemes.length > 0 ? availableThemes.map(theme => (
                        <div key={theme} className="flex items-center">
                            <input
                                id={`theme-${theme}`}
                                name="themes" // Name matches the key updated in handleChange
                                type="checkbox"
                                value={theme}
                                checked={filters.themes ? filters.themes.split(',').includes(theme) : false} // Check based on props
                                onChange={handleChange} // Use unified handler
                                className="h-4 w-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500"
                            />
                            <label htmlFor={`theme-${theme}`} className="ml-2 block text-sm text-gray-900">
                                {theme}
                            </label>
                        </div>
                    )) : <p className="text-xs text-gray-500">No themes available.</p>}
                 </div>
            </div>

             {/* 4. Interaction Level */}
            <div>
                <label htmlFor="interactionLevel" className="block text-sm font-medium text-gray-700 mb-1">Interaction Level</label>
                <select
                    id="interactionLevel"
                    name="interactivity" // Name matches the filter key
                    value={filters.interactivity || ''} // Use value from props
                    onChange={handleChange} // Use unified handler
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white"
                    title="How much the show prompts viewer interaction..."
                >
                    <option value="">Any</option>
                    {interactionLevels.map(level => (
                        <option key={level} value={level}>{level}</option>
                    ))}
                </select>
            </div>

            {/* 5. Dialogue Intensity */}
             <div>
                <label htmlFor="dialogueIntensity" className="block text-sm font-medium text-gray-700 mb-1">Dialogue Intensity</label>
                <select
                    id="dialogueIntensity"
                    name="dialogue" // Name matches the filter key
                    value={filters.dialogue || ''} // Use value from props
                    onChange={handleChange} // Use unified handler
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white"
                    title="Amount and pace of talking..."
                >
                    <option value="">Any</option>
                     {dialogueIntensities.map(level => (
                        <option key={level} value={level}>{level}</option>
                    ))}
                </select>
            </div>

             {/* 6. Scene Frequency */}
             <div>
                <label htmlFor="sceneFrequency" className="block text-sm font-medium text-gray-700 mb-1">Scene Frequency</label>
                <select
                    id="sceneFrequency"
                    name="sceneFreq" // Name matches the filter key
                    value={filters.sceneFreq || ''} // Use value from props
                    onChange={handleChange} // Use unified handler
                     className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500 text-sm bg-white"
                    title="How quickly scenes change..."
                >
                    <option value="">Any</option>
                    {sceneFrequencies.map(level => (
                        <option key={level} value={level}>{level}</option>
                    ))}
                </select>
            </div>

             {/* 7. Stimulation Score */}
             <div className="space-y-2">
                 <label className="block text-sm font-medium text-gray-700">
                     Stimulation Score Range
                 </label>
                 {/* Min Score */}
                 <div className='pl-2'>
                      <label htmlFor="stimScoreMin" className="block text-xs font-medium text-gray-700 mb-1">
                         Min: {filters.stimScoreMin || 1}
                     </label>
                     <input
                         type="range"
                         id="stimScoreMin"
                         name="stimScoreMin"
                         min="1" max="5" step="1"
                         value={filters.stimScoreMin || '1'} // Use value from props
                         onChange={handleChange} // Use unified handler
                         className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-teal-600"
                     />
                 </div>
                  {/* Max Score */}
                 <div className='pl-2'>
                      <label htmlFor="stimScoreMax" className="block text-xs font-medium text-gray-700 mb-1">
                         Max: {filters.stimScoreMax || 5}
                     </label>
                     <input
                         type="range"
                         id="stimScoreMax"
                         name="stimScoreMax"
                         min="1" max="5" step="1"
                         value={filters.stimScoreMax || '5'} // Use value from props
                         onChange={handleChange} // Use unified handler
                         className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-teal-600"
                     />
                 </div>
             </div>

            {/* Reset button is now handled in CatalogPage */}
        </div>
    );
};

export default FilterPanel;
</file>

<file path="client/src/components/catalog/ShowCard.jsx">
// client/src/components/Catalog/ShowCard.jsx
import React from 'react';
import { Link } from 'react-router-dom';

// Placeholder image if actual image is missing or fails to load
const placeholderImage = "/images/sstc.jpg";

// Helper to generate score visualization (example: simple bars)
const ScoreVisual = ({ score }) => {
    score = score || 0; // Default to 0 if score is null/undefined
    const maxScore = 5;
    return (
        <div className="flex items-center space-x-1" title={`Stimulation Score: ${score} out of ${maxScore}`}>
            {[...Array(maxScore)].map((_, i) => (
                <div
                    key={i}
                    className={`h-2 w-3 rounded-sm ${i < score ? 'bg-teal-500' : 'bg-gray-300'}`}
                ></div>
            ))}
            <span className="text-xs font-semibold ml-1">{score}/5</span>
        </div>
    );
};

// The ShowCard component receives 'show' data as a prop
const ShowCard = ({ show }) => {
    // *** ADDED LOGS ***
    console.log(`>>> Rendering ShowCard for ID: ${show?.id}, Title: ${show?.title}`); // Log start of render
    if (!show || !show.id) {
        console.error(">>> ShowCard received invalid or missing show prop:", show);
        return <div className="border border-red-300 p-2 text-red-600 text-xs">Invalid Show Data</div>; // Render placeholder on error
    }

    // Destructure show data with defaults for safety
    const {
        id,
        title = "Unknown Title",
        target_age_group = "N/A",
        themes = [], // Expecting themes to be an array already parsed by server/service
        stimulation_score = 0,
        image_filename = null
    } = show;

    const imageUrl = image_filename ? `/images/${image_filename}` : placeholderImage;
    const displayedThemes = Array.isArray(themes) ? themes.slice(0, 3) : []; // Ensure themes is array

    console.log(`>>> ShowCard (ID: ${id}) is about to return JSX.`); // Log before returning JSX

    return (
        <div className="border border-gray-200 rounded-lg shadow-md bg-white overflow-hidden flex flex-col transition duration-200 hover:shadow-lg">
            {/* Show Image */}
            <div className="w-full h-40 bg-gray-200 flex items-center justify-center">
                <img
                    src={imageUrl}
                    alt={`${title} poster`}
                    className="w-full h-full object-cover"
                    onError={(e) => { e.target.onerror = null; e.target.src=placeholderImage }}
                    loading="lazy" // Added lazy loading here too
                />
            </div>

            {/* Show Details */}
            <div className="p-4 flex flex-col flex-grow">
                <h3 className="text-lg font-semibold mb-1 text-gray-800 truncate" title={title}>
                    {title}
                </h3>
                <p className="text-sm text-gray-500 mb-2">
                    Age: {target_age_group}
                </p>

                {/* Themes */}
                <div className="mb-3 flex flex-wrap gap-1 min-h-[20px]"> {/* Added min-height */}
                    {displayedThemes.length > 0 ? displayedThemes.map((theme, index) => (
                        <span key={index} className="text-xs bg-teal-100 text-teal-800 px-2 py-0.5 rounded-full">
                            {theme}
                        </span>
                    )) : (
                        <span className="text-xs text-gray-400 italic">No themes listed</span>
                    )}
                    {Array.isArray(themes) && themes.length > 3 && (
                        <span className="text-xs text-gray-400 px-2 py-0.5">...</span>
                    )}
                </div>

                {/* Stimulation Score */}
                <div className="mb-4">
                    <ScoreVisual score={stimulation_score} />
                </div>

                {/* Learn More Button */}
                <div className="mt-auto">
                    <Link
                        to={`/show/${id}`} // Link to the detail page using the show's ID
                        className="block w-full text-center px-4 py-2 bg-teal-600 text-white rounded hover:bg-teal-700 transition duration-200 text-sm"
                        // *** ADDED LOG ***
                        onClick={() => console.log(`>>> Clicking Learn More link for Show ID: ${id}`)}
                    >
                        Learn More
                    </Link>
                </div>
            </div>
        </div>
    );
};

export default ShowCard;
</file>

<file path="client/src/components/Layout/footer.jsx">
// client/src/components/Layout/Footer.jsx
import React from 'react';
import { Link } from 'react-router-dom'; // Import Link if needed for footer links

const Footer = () => {
  const currentYear = new Date().getFullYear();
  return (
    <footer className="bg-gray-700 text-gray-300 text-center p-4 mt-8">
      <p>© {currentYear} Sensory Screen Time Guide. All rights reserved.</p>
      {/* Example of potential future links using React Router's Link */}
      {/* <p className="text-sm mt-2 space-x-3">
        <Link to="/about" className="hover:text-white">About Us</Link> |
        <Link to="/privacy" className="hover:text-white">Privacy Policy</Link>
      </p> */}
    </footer>
  );
};

export default Footer;
</file>

<file path="client/src/components/Layout/header.jsx">
// client/src/components/Layout/Header.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const Header = () => {
  return (
    <header className="bg-teal-600 text-white shadow-md sticky top-0 z-50">
      <nav className="container mx-auto px-4 py-3 flex justify-between items-center">
        <Link to="/" className="text-2xl font-bold hover:text-teal-200 transition duration-200">
          Sensory Screen Time Guide
        </Link>
        <div className="space-x-4">
          <Link to="/" className="hover:text-teal-200 transition duration-200">Home</Link>
          <Link to="/shows" className="hover:text-teal-200 transition duration-200">Browse Shows</Link>
          <Link to="/compare" className="hover:text-teal-200 transition duration-200">Compare</Link>
        </div>
      </nav>
    </header>
  );
};

export default Header;
</file>

<file path="client/src/index.css">
@import "tailwindcss";
</file>

<file path="client/src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css' // Ensure your Tailwind CSS import is here


ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
</file>

<file path="client/src/pages/CatalogPage.jsx">
// client/src/pages/CatalogPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useSearchParams } from 'react-router-dom'; // Hook to read/write URL query parameters
import FilterPanel from '../components/catalog/FilterPanel';
import ShowCard from '../components/catalog/ShowCard';
import { getShows } from '../services/showService';

const CatalogPage = () => {
    const [shows, setShows] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(0);
    const [activeFilters, setActiveFilters] = useState({}); // State to hold active filters object
    const [searchParams, setSearchParams] = useSearchParams(); // Hook to manage search params

    // --- Initialize Filters from URL Search Params ---
    // This effect now runs whenever searchParams changes.
    useEffect(() => {
        console.log("Initializing filters from searchParams:", searchParams.toString());
        const initialFilters = {};
        // Read each potential filter parameter from the URL
        const search = searchParams.get('search');
        const minAge = searchParams.get('minAge');
        const maxAge = searchParams.get('maxAge');
        const themes = searchParams.get('themes'); // Comma-separated string
        const interactivity = searchParams.get('interactivity');
        const dialogue = searchParams.get('dialogue');
        const sceneFreq = searchParams.get('sceneFreq');
        const stimScoreMin = searchParams.get('stimScoreMin');
        const stimScoreMax = searchParams.get('stimScoreMax');
        const sortBy = searchParams.get('sortBy');
        const sortOrder = searchParams.get('sortOrder');
        
        // Add them to the initialFilters object if they exist
        if (search) initialFilters.search = search;
        if (minAge) initialFilters.minAge = minAge; // Keep as string, FilterPanel handles it
        if (maxAge) initialFilters.maxAge = maxAge; // Keep as string, FilterPanel handles it
        if (themes) initialFilters.themes = themes;
        if (interactivity) initialFilters.interactivity = interactivity;
        if (dialogue) initialFilters.dialogue = dialogue;
        if (sceneFreq) initialFilters.sceneFreq = sceneFreq;
        if (stimScoreMin) initialFilters.stimScoreMin = stimScoreMin; // Keep as string
        if (stimScoreMax) initialFilters.stimScoreMax = stimScoreMax; // Keep as string
        if (sortBy) initialFilters.sortBy = sortBy;
        if (sortOrder) initialFilters.sortOrder = sortOrder;
        
        // Set the active filters based on URL parameters
        setActiveFilters(initialFilters);
        // Reset to page 1 whenever filters are initialized from URL
        setCurrentPage(1); 
        console.log("Initialized activeFilters:", initialFilters);

        // No dependency array needed here as it's implicitly dependent on searchParams from useSearchParams hook
        // However, explicitly adding it clarifies intent.
    }, [searchParams]); 


    // --- Fetching Logic ---
    // This effect runs when activeFilters or currentPage changes.
    useEffect(() => {
        // Prevent fetching if filters haven't potentially been initialized yet 
        // (e.g., on very first load before the searchParams effect runs)
        // We can check if activeFilters is populated OR if the URL has params
        // A simple check is often sufficient, or just let it run.
        
        console.log("CatalogPage Fetch Effect Running. Filters:", activeFilters, "Page:", currentPage);
        const fetchShows = async () => {
            setIsLoading(true);
            setError(null);
            try {
                // Pass the current activeFilters and currentPage to the service
                const data = await getShows(activeFilters, currentPage);
                console.log("Fetched Catalog Data:", data);
                setShows(data.shows || []);
                setTotalPages(data.totalPages || 0);
             } catch (err) {
                console.error("CatalogPage fetch error:", err);
                setError(err.message || "Failed to load shows.");
                setShows([]);
                setTotalPages(0);
            } finally {
                 setIsLoading(false);
            }
        };

        // Only fetch if activeFilters is not empty, or if it's page 1 (initial load/reset)
        // This condition prevents unnecessary fetches if filters are cleared quickly
        if (Object.keys(activeFilters).length > 0 || currentPage === 1) {
             fetchShows();
        } else {
             // If filters are empty and not on page 1, likely means filters were just reset
             // We might want to clear the shows list here or rely on the reset handler
             setShows([]);
             setTotalPages(0);
             setIsLoading(false); // Ensure loading stops
        }

        // Cleanup function (optional)
         return () => {
            console.log("CatalogPage Fetch Effect Cleanup. Filters:", activeFilters, "Page:", currentPage);
         };
    }, [activeFilters, currentPage]); // Depend on filters and page

    // --- Filter Handlers ---
    const handleFilterChange = useCallback((newFilters) => {
        console.log("Applying filters:", newFilters);
        // Update the state
        setActiveFilters(newFilters); 
        // Reset page to 1 when filters change
        setCurrentPage(1); 
        // Update the URL search parameters to reflect the new filters
        setSearchParams(newFilters, { replace: true }); // Use replace to avoid bloating browser history
    }, [setSearchParams]); // Dependency on setSearchParams

    const handleResetFilters = useCallback(() => {
        console.log("Resetting filters");
        setActiveFilters({});
        setCurrentPage(1);
        // Clear URL search params
        setSearchParams({}, { replace: true }); 
    }, [setSearchParams]); // Dependency on setSearchParams

    // --- Pagination Handlers ---
    const handleNextPage = () => {
        if (currentPage < totalPages) {
            setCurrentPage(prevPage => prevPage + 1);
        }
    };
    const handlePrevPage = () => {
        if (currentPage > 1) {
            setCurrentPage(prevPage => prevPage - 1);
        }
    };

    // --- JSX Rendering ---
    return (
        <div className="flex flex-col md:flex-row gap-6 md:gap-8">

            {/* Filter Panel Column */}
            <aside className="w-full md:w-1/4 lg:w-1/5">
                <h2 className="text-xl font-semibold mb-4 text-gray-700">Filters</h2>
                {/* Pass the activeFilters state to FilterPanel */}
                <FilterPanel
                     filters={activeFilters} 
                    onFilterChange={handleFilterChange}
                    // onReset prop is removed as reset is handled here now
                />
                 {/* Reset Button */}
                 <button
                    onClick={handleResetFilters}
                    className="mt-4 w-full px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition text-sm"
                  >
                    Reset All Filters
                </button>
            </aside>

            {/* Show Catalog Grid Section */}
            <section className="w-full md:w-3/4 lg:w-4/5">
                 <h1 className="text-3xl font-bold text-teal-700 mb-6">Browse Shows</h1>
                {/* Optional: Display active filters for debugging/clarity 
                 <p className="text-xs mb-4">Current Filters: {JSON.stringify(activeFilters)}</p> 
                 */}

                {/* Loading State */}
                {isLoading && <p className="text-center text-lg text-gray-600 py-10">Loading shows...</p>}

                {/* Error State */}
                {error && !isLoading && <p className="text-center text-red-600 bg-red-100 p-4 rounded border border-red-300">{error}</p>}

                {/* Show Grid - Render only if not loading, no error, and shows exist */}
                {!isLoading && !error && shows.length > 0 && (
                     <>
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-6">
                            {shows.map(show => (
                                 <ShowCard key={show.id} show={show} />
                            ))}
                        </div>

                        {/* Pagination Controls */}
                         {totalPages > 1 && (
                             <div className="mt-8 flex justify-center items-center space-x-4">
                                <button
                                     onClick={handlePrevPage}
                                    disabled={currentPage <= 1 || isLoading}
                                    className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed transition"
                                > Previous </button>
                                <span className="text-gray-700"> Page {currentPage} of {totalPages} </span>
                                <button
                                     onClick={handleNextPage}
                                    disabled={currentPage >= totalPages || isLoading}
                                    className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed transition"
                                > Next </button>
                            </div>
                        )}
                     </>
                )}

                 {/* No Results Message */}
                 {!isLoading && !error && shows.length === 0 && (
                    <p className="text-center text-gray-500 py-10">No shows found matching your criteria.</p>
                )}

            </section>
        </div>
    );
};

export default CatalogPage;
</file>

<file path="client/src/pages/ComparePage.jsx">
// client/src/pages/ComparePage.jsx
import React, { useState, useEffect } from 'react';
import { getShows, getShowsForComparison } from '../services/showService';

// Re-use placeholder image logic
const placeholderImage = "/images/placeholder-show.png";

// Re-use ScoreVisual component (or import from ShowCard if preferred/possible)
const ScoreVisual = ({ score }) => {
    score = score || 0;
    const maxScore = 5;
    return (
        <div className="flex items-center space-x-1" title={`Stimulation Score: ${score} out of ${maxScore}`}>
            {[...Array(maxScore)].map((_, i) => (
                <div
                    key={i}
                    className={`h-2 w-3 rounded-sm ${i < score ? 'bg-teal-500' : 'bg-gray-300'}`}
                ></div>
            ))}
            <span className="text-xs font-semibold ml-1">{score}/5</span>
        </div>
    );
};


// Enhanced Comparison Display Component
const ComparisonDisplay = ({ shows }) => {
    if (!shows || shows.length === 0) {
        return <p className="text-center text-gray-500 italic mt-6">Select 2 or 3 shows above to compare.</p>;
    }

    // Define which fields to display in order
    const fieldsToCompare = [
        { key: 'platform', label: 'Platform' },
        { key: 'target_age_group', label: 'Age Group' },
        { key: 'avg_episode_length', label: 'Avg. Length' },
        { key: 'interactivity_level', label: 'Interaction' },
        { key: 'dialogue_intensity', label: 'Dialogue Pace' },
        { key: 'scene_frequency', label: 'Scene Frequency' },
        { key: 'sound_effects_level', label: 'Sound FX Level' },
        { key: 'total_music_level', label: 'Music Level' },
        // Add more text fields if needed from the database schema
    ];

    return (
        <div className={`mt-8 grid grid-cols-1 md:grid-cols-${shows.length} gap-4 md:gap-6`}>
            {shows.map((show) => {
                 // Determine image URL for each show
                const imageUrl = show.image_filename ? `/images/${show.image_filename}` : placeholderImage;
                return (
                    <div key={show.id} className="border rounded-lg shadow flex flex-col">
                        {/* Image */}
                        <div className="w-full h-40 bg-gray-200 flex items-center justify-center rounded-t-lg overflow-hidden">
                             <img
                                src={imageUrl}
                                alt={`${show.title} poster`}
                                className="w-full h-full object-cover"
                                onError={(e) => { e.target.onerror = null; e.target.src=placeholderImage }}
                            />
                        </div>
                        {/* Details */}
                        <div className="p-4 flex flex-col flex-grow space-y-2">
                            <h3 className="text-lg font-semibold mb-1 text-center truncate" title={show.title}>{show.title}</h3>

                            {/* Stimulation Score */}
                            <div className="flex justify-center">
                                 <ScoreVisual score={show.stimulation_score} />
                            </div>

                            {/* Text Fields Comparison */}
                            <div className="space-y-1 text-sm border-t pt-2">
                                {fieldsToCompare.map(field => (
                                    <div key={field.key}>
                                        <strong className="text-gray-600">{field.label}:</strong>
                                        <span className="ml-1 text-gray-800">{show[field.key] || 'N/A'}</span>
                                    </div>
                                ))}
                            </div>

                            {/* Themes */}
                            <div className="border-t pt-2">
                                <strong className="text-sm text-gray-600">Themes:</strong>
                                <div className="flex flex-wrap gap-1 mt-1">
                                     {show.themes && show.themes.length > 0 ? show.themes.slice(0, 5).map((theme, index) => ( // Show first 5 themes
                                        <span key={index} className="text-xs bg-teal-100 text-teal-800 px-2 py-0.5 rounded-full">
                                            {theme}
                                        </span>
                                    )) : (
                                        <span className="text-xs text-gray-400 italic">None listed</span>
                                    )}
                                    {show.themes && show.themes.length > 5 && (
                                        <span className="text-xs text-gray-400 px-2 py-0.5">...</span>
                                    )}
                                </div>
                            </div>
                            {/* Potential area for adding charts later */}
                            {/* <div className="mt-auto pt-2 border-t"> Chart Placeholder </div> */}
                        </div>
                    </div>
                );
             })}
        </div>
    );
};


const ComparePage = () => {
    const MAX_COMPARE = 3;

    const [showList, setShowList] = useState([]);
    const [listLoading, setListLoading] = useState(true);
    const [listError, setListError] = useState(null);
    const [selectedIds, setSelectedIds] = useState(Array(MAX_COMPARE).fill(''));
    const [comparisonData, setComparisonData] = useState([]);
    const [compareLoading, setCompareLoading] = useState(false);
    const [compareError, setCompareError] = useState(null);

    // Fetch Show List Effect (remains the same)
    useEffect(() => {
        const fetchShowList = async () => {
            setListLoading(true);
            setListError(null);
            try {
                const data = await getShows({}, 1, 500);
                setShowList(data.shows.map(s => ({ id: s.id, title: s.title })) || []);
            } catch (err) {
                console.error("Error fetching show list for compare:", err);
                setListError("Failed to load list of shows.");
                setShowList([]);
            } finally {
                setListLoading(false);
            }
        };
        fetchShowList();
    }, []);

    // Fetch Comparison Data Effect (remains the same)
    useEffect(() => {
        const validIds = selectedIds.filter(id => id && id !== '');
        if (validIds.length >= 2) {
            const fetchComparison = async () => {
                setCompareLoading(true);
                setCompareError(null);
                setComparisonData([]);
                try {
                    const data = await getShowsForComparison(validIds);
                    setComparisonData(data || []);
                } catch (err) {
                    console.error("Error fetching comparison data:", err);
                    setCompareError("Failed to load comparison data.");
                    setComparisonData([]);
                } finally {
                    setCompareLoading(false);
                }
            };
            fetchComparison();
        } else {
            setComparisonData([]);
            setCompareError(null);
        }
    }, [selectedIds]);

    // Handler for dropdown selection change (remains the same)
    const handleSelectChange = (index, event) => {
        const newId = event.target.value;
        if (newId !== '' && selectedIds.includes(newId)) {
             alert('This show is already selected in another slot.');
             event.target.value = selectedIds[index] || '';
             return;
        }
        const newSelectedIds = [...selectedIds];
        newSelectedIds[index] = newId;
        setSelectedIds(newSelectedIds);
    };

    // Main component render (remains largely the same, relies on ComparisonDisplay)
    return (
        <div className="max-w-6xl mx-auto">
            <h1 className="text-3xl font-bold text-center text-indigo-700 mb-8">
                Compare Shows
            </h1>

            {/* Show Selection Section */}
            <div className={`grid grid-cols-1 md:grid-cols-${MAX_COMPARE} gap-4 mb-6`}>
                {Array.from({ length: MAX_COMPARE }).map((_, index) => (
                    <div key={index}>
                        <label htmlFor={`select-show-${index}`} className="block text-sm font-medium text-gray-700 mb-1">
                            Select Show #{index + 1}
                        </label>
                        <select
                            id={`select-show-${index}`}
                            value={selectedIds[index]}
                            onChange={(e) => handleSelectChange(index, e)}
                            disabled={listLoading || !!listError}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 text-sm bg-white disabled:bg-gray-100"
                        >
                            <option value="">-- Select a Show --</option>
                            {listLoading && <option disabled>Loading list...</option>}
                            {showList.map(show => (
                                <option key={show.id} value={show.id}>
                                    {show.title}
                                </option>
                            ))}
                        </select>
                    </div>
                ))}
            </div>
            {listError && <p className="text-center text-red-500 mb-4">{listError}</p>}


            {/* Comparison Display Area */}
            {compareLoading && <p className="text-center text-gray-500 italic mt-6">Loading comparison...</p>}
            {compareError && <p className="text-center text-red-500 mt-6">{compareError}</p>}
            {/* Render the enhanced display component */}
            {!compareLoading && <ComparisonDisplay shows={comparisonData} />}

        </div>
    );
};

export default ComparePage;
</file>

<file path="client/src/pages/HomePage.jsx">
// client/src/pages/HomePage.jsx
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { getAutocompleteSuggestions, getHomepageData, getShowByTitle } from '../services/showService.js';
import ShowCard from '../components/catalog/ShowCard.jsx';
import FeaturedShow from '../components/home/FeaturedShow.jsx';
import CategoryCard from '../components/home/CategoryCard.jsx';
import { FaChartBar, FaHeartbeat, FaCheckCircle, FaBabyCarriage, FaPalette, FaMoon, FaUserFriends, FaFlask, FaHandsHelping } from 'react-icons/fa';

// --- Helper Component (ShowCategoryRow) ---
// (Assuming this exists and works from previous steps)
const ShowCategoryRow = ({ title, shows, isLoading, error, viewAllLink = null }) => {
    if (isLoading) return <div className="text-center p-4 text-gray-500">Loading {title}...</div>;
    if (error) return <div className="text-center p-4 text-red-600">Error loading {title}: {error}</div>;
    if (!Array.isArray(shows) || shows.length === 0) {
         return <div className="text-center p-4 text-gray-500">No shows found for {title}.</div>;
    }
    console.log(`>>> Rendering ShowCategoryRow for "${title}" with ${shows.length} shows.`);
    return (
        <div className="mb-10">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-semibold text-gray-700">{title}</h2>
                {viewAllLink && (
                    <Link to={viewAllLink} className="text-sm text-teal-600 hover:text-teal-800 hover:underline">
                        View All »
                    </Link>
                )}
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
                {shows.map(show => (
                    show && show.id ? <ShowCard key={show.id} show={show} /> : null
                ))}
            </div>
        </div>
    );
};


// --- Category Data ---
// (Assuming this exists and works from previous steps)
const categories = [
    { title: "Toddler Time (0-2)", description: "Gentle shows for the littlest viewers.", IconComponent: FaBabyCarriage, linkUrl: "/shows?minAge=0&maxAge=2" },
    { title: "Preschool Picks (3-5)", description: "Engaging content for early learners.", IconComponent: FaPalette, linkUrl: "/shows?minAge=3&maxAge=5" },
    { title: "Calm & Quiet", description: "Low stimulation options.", IconComponent: FaMoon, linkUrl: "/shows?stimScoreMin=1&stimScoreMax=1" },
    { title: "Social Skills", description: "Shows focusing on friendship & emotions.", IconComponent: FaUserFriends, linkUrl: "/shows?themes=Social-Emotional" }, // Assuming themes can be filtered like this
    { title: "STEM Stars", description: "Explore science, tech, & math.", IconComponent: FaFlask, linkUrl: "/shows?themes=STEM" }, // Assuming themes can be filtered like this
    { title: "Interactive Fun", description: "Shows that encourage participation.", IconComponent: FaHandsHelping, linkUrl: "/shows?interactivity=High" }
];

// --- Main HomePage Component ---
const HomePage = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const navigate = useNavigate();
    const [suggestions, setSuggestions] = useState([]);
    const [showSuggestions, setShowSuggestions] = useState(false);
    const debounceTimeoutRef = useRef(null);
    const [homepageData, setHomepageData] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isNavigating, setIsNavigating] = useState(false);
    const searchContainerRef = useRef(null); // Ref for the search container


    // --- Fetching Logic for Homepage Data ---
    useEffect(() => {
        // ... (fetch logic remains the same) ...
        console.log(">>> HomePage Fetch Effect Running");
        setIsLoading(true);
        setError(null);
        getHomepageData()
            .then(data => {
                console.log(">>> API call SUCCESS, homepageData received:", data);
                setHomepageData(data);
            })
            .catch(err => {
                console.error(">>> getHomepageData CATCH block:", err);
                setError(err.message || "Failed to load homepage content.");
                setHomepageData(null);
            })
            .finally(() => {
                console.log(">>> Setting isLoading to false");
                setIsLoading(false);
            });

        // Add event listener to close suggestions when clicking outside
        const handleClickOutside = (event) => {
            if (searchContainerRef.current && !searchContainerRef.current.contains(event.target)) {
                setShowSuggestions(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);

        // Cleanup function
        return () => {
            console.log(">>> HomePage Fetch Effect Cleanup");
            clearTimeout(debounceTimeoutRef.current);
            document.removeEventListener('mousedown', handleClickOutside); // Remove listener on unmount
        };
    }, []); // Empty dependency array

    // --- Autocomplete Fetching Logic ---
    const fetchSuggestions = useCallback(async (term) => {
       // ... (fetch suggestions logic remains the same) ...
        console.log(`>>> fetchSuggestions called with term: "${term}"`);
        if (term.length > 1) {
            try {
                console.log(`>>> Attempting API call getAutocompleteSuggestions("${term}")`);
                const results = await getAutocompleteSuggestions(term);
                console.log(`>>> API call SUCCESS, results received:`, results);
                setSuggestions(results || []);
                // Only show suggestions if results are found AND the term is still relevant
                 if (results && results.length > 0) {
                     setShowSuggestions(true);
                 } else {
                     setShowSuggestions(false);
                 }
            } catch (error) {
                console.error(">>> fetchSuggestions CATCH block:", error);
                setSuggestions([]);
                setShowSuggestions(false);
            }
        } else {
            console.log(`>>> Term "${term}" too short, clearing suggestions.`);
            setSuggestions([]);
            setShowSuggestions(false);
        }
    }, []);

    // --- Handlers ---
    const handleSearchChange = (event) => {
        console.log(">>> handleSearchChange triggered!"); // Keep log
        const newSearchTerm = event.target.value;
        setSearchTerm(newSearchTerm);
        // Don't necessarily show suggestions here, let fetchSuggestions decide
        // setShowSuggestions(true);
        if (debounceTimeoutRef.current) {
            clearTimeout(debounceTimeoutRef.current);
        }
        debounceTimeoutRef.current = setTimeout(() => {
            fetchSuggestions(newSearchTerm);
        }, 300);
    };

    const handleSearchSubmit = (event) => {
        console.log(">>> handleSearchSubmit triggered!"); // Keep log
        event.preventDefault();
         setShowSuggestions(false); // Hide suggestions on submit
        if (searchTerm.trim()) {
            navigate(`/shows?search=${encodeURIComponent(searchTerm.trim())}`);
        }
    };

    const handleSuggestionClick = async (suggestionTitle) => {
        console.log(`>>> handleSuggestionClick triggered for: "${suggestionTitle}"`); // Keep log
        if (isNavigating) return;

        setShowSuggestions(false);
        setSearchTerm(suggestionTitle); // Set search term to the clicked suggestion
        setIsNavigating(true);

        try {
            console.log(`>>> Attempting getShowByTitle for: "${suggestionTitle}"`);
            const show = await getShowByTitle(suggestionTitle);
            if (show && show.id) {
                console.log(`>>> Found Show ID: ${show.id}, navigating to detail page.`);
                navigate(`/show/${show.id}`);
            } else {
                console.warn(`>>> Show "${suggestionTitle}" not found by title, navigating to catalog search.`);
                navigate(`/shows?search=${encodeURIComponent(suggestionTitle)}`);
            }
        } catch (err) {
            console.error(`>>> Error finding show by title "${suggestionTitle}":`, err.message);
             navigate(`/shows?search=${encodeURIComponent(suggestionTitle)}`);
        } finally {
            setIsNavigating(false);
        }
    };

    // Removed handleBlur - using handleClickOutside instead for more reliability

    // --- JSX Output ---
    console.log(">>> Rendering HomePage JSX - isLoading:", isLoading, "error:", error, "homepageData exists:", !!homepageData);
    return (
        <div>
            {/* --- Top Sections --- */}
            {/* 1. Hero Section */}
            <section className="text-center pt-16 pb-12 px-4 bg-gradient-to-br from-teal-500 to-blue-600 text-white rounded-lg shadow-xl relative overflow-hidden mb-12">
                 {/* ... decorative divs ... */}
                  <div className="absolute top-0 left-0 w-32 h-32 bg-white opacity-10 rounded-full -translate-x-1/2 -translate-y-1/2"></div>
                <div className="absolute bottom-0 right-0 w-48 h-48 bg-white opacity-10 rounded-full translate-x-1/2 translate-y-1/2"></div>
                <div className="relative z-10">
                    {/* ... h1 and p tags ... */}
                     <h1 className="text-4xl md:text-5xl font-bold mb-3 drop-shadow-md">Take the Guesswork Out of Screen Time.</h1>
                    <p className="text-lg md:text-xl mb-8 max-w-3xl mx-auto drop-shadow-sm">Find sensory-smart shows your child will love. Explore ratings for stimulation, interaction, and more to make confident choices.</p>
                    {/* Form and Search Input Area */}
                    <form onSubmit={handleSearchSubmit} className="max-w-2xl mx-auto mb-4">
                         {/* Assign ref to the container */}
                        <div className="relative" ref={searchContainerRef}>
                            <input
                                type="search"
                                placeholder="Find a show like Bluey, Puffin Rock..."
                                className="w-full px-5 py-3 border border-gray-200 rounded-full shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-400 focus:border-transparent text-gray-800 text-lg"
                                value={searchTerm}
                                onChange={handleSearchChange} // Assign onChange
                                // Show suggestions on focus only if term is valid
                                onFocus={() => {
                                    console.log(">>> Search Input Focused");
                                    if(searchTerm.length > 1) {
                                        setShowSuggestions(true);
                                        // Optional: re-fetch if suggestions might be stale
                                        // fetchSuggestions(searchTerm);
                                    }
                                }}
                                autoComplete="off"
                             />
                            <button type="submit" className="absolute right-0 top-0 bottom-0 mt-1.5 mb-1.5 mr-1.5 px-6 bg-orange-500 text-white rounded-full hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-1 transition duration-200 font-semibold text-lg">
                                Search
                            </button>
                            {/* Suggestion List */}
                            {showSuggestions && suggestions.length > 0 && (
                                <ul className="absolute z-20 left-0 right-0 mt-1 max-h-60 overflow-y-auto bg-white border border-gray-300 rounded-md shadow-lg text-left">
                                    {suggestions.map((suggestion, index) => (
                                        <li key={index} >
                                             <button
                                                 type="button"
                                                 className="block w-full text-left px-4 py-2 text-gray-800 hover:bg-teal-100 cursor-pointer"
                                                 onClick={() => handleSuggestionClick(suggestion)} // Assign onClick
                                            >
                                                {suggestion}
                                            </button>
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </div>
                    </form>
                     {/* ... Quick Filter Links ... */}
                      <div className="flex flex-wrap justify-center gap-2 mt-4 mb-2">
                         <Link to="/shows?stimScoreMin=1&stimScoreMax=1" className="px-4 py-1 bg-white/20 hover:bg-white/30 text-white text-xs rounded-full transition">Low Stimulation</Link>
                         <Link to="/shows?interactivity=High" className="px-4 py-1 bg-white/20 hover:bg-white/30 text-white text-xs rounded-full transition">High Interaction</Link>
                         <Link to="/shows?minAge=3&maxAge=5" className="px-4 py-1 bg-white/20 hover:bg-white/30 text-white text-xs rounded-full transition">Preschool (3-5)</Link>
                    </div>
                    <div className="text-center mt-3">
                        <Link to="/shows" className="text-sm text-teal-100 hover:text-white hover:underline">
                            Or Browse All & Use Advanced Filters
                        </Link>
                    </div>
                </div>
            </section>

            {/* ... Rest of the component (Why Use Guide, Explain Score, Conditionally Rendered Content) remains the same ... */}
             {/* 2. Why Use This Guide Section */}
             <section className="py-16 px-6 md:px-8 bg-white mb-12">
                  <h2 className="text-2xl md:text-3xl font-semibold text-center text-gray-700 mb-10">Making Screen Time Meaningful</h2>
                 <div className="grid grid-cols-1 md:grid-cols-3 gap-x-8 gap-y-10 text-center max-w-5xl mx-auto mb-10">
                     <div> <div className="flex justify-center text-4xl text-teal-500 mb-3"><FaChartBar /></div> <h3 className="text-lg font-semibold mb-1">Understand Sensory Load</h3> <p className="text-sm text-gray-600">Clear 1-5 ratings help you gauge intensity across factors like sound, visuals, and pacing.</p> </div>
                     <div> <div className="flex justify-center text-4xl text-blue-500 mb-3"><FaHeartbeat /></div> <h3 className="text-lg font-semibold mb-1">Reduce Overwhelm</h3> <p className="text-sm text-gray-600">Easily find shows that are calming, engaging, or interactive based on your child's needs.</p> </div>
                     <div> <div className="flex justify-center text-4xl text-orange-500 mb-3"><FaCheckCircle /></div> <h3 className="text-lg font-semibold mb-1">Choose Confidently</h3> <p className="text-sm text-gray-600">Access detailed information and filter by age, themes, and specific sensory criteria.</p> </div>
                 </div>
                 <div className="text-center mt-6">
                    <Link to="/shows" className="inline-block px-8 py-3 bg-blue-600 text-white text-lg font-semibold rounded-full shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200">
                        Guide Me: Find Shows Now!
                    </Link>
                 </div>
             </section>
             {/* 3. Explain the Score Section */}
             <section className="py-12 px-6 md:px-8 bg-teal-50 rounded-lg mb-12">
                   <h2 className="text-2xl md:text-3xl font-semibold text-center text-teal-800 mb-4">What Do the Scores Mean?</h2>
                 <p className="text-center text-gray-700 max-w-2xl mx-auto mb-4">Each show receives an overall <strong className="font-semibold">Stimulation Score from 1 (Very Low) to 5 (Very High)</strong>. This considers factors like scene change frequency, sound effects, music intensity, and dialogue pace.</p>
                 <p className="text-center text-gray-600 text-sm max-w-2xl mx-auto">While a higher score isn't 'bad', it indicates a more intense sensory experience. Use the detailed breakdown on each show's page for specifics.</p>
            </section>
             {/* --- HR Separator --- */}
            <hr className="border-gray-200 my-12 max-w-4xl mx-auto"/>
            {/* --- Conditionally Rendered Content Area --- */}
            {isLoading && <div className="text-center p-10 text-gray-500 text-lg mb-12">Loading homepage content...</div>}
            {error && !isLoading && <div className="text-center p-6 bg-red-100 text-red-700 rounded-lg border border-red-300 font-medium mb-12">{error}</div>}
            {homepageData && !isLoading && !error && (
                 <div className="px-4 md:px-6 lg:px-8">
                     {/* 4. Featured Show Section */}
                     {homepageData.featuredShow ? ( <div className="mb-16"><FeaturedShow show={homepageData.featuredShow} /></div>) : (<div className="text-center p-6 bg-gray-100 rounded-lg mb-16">Featured show could not be loaded.</div> )}
                     {/* 5. Browse by Category Section */}
                     <section className="py-16 px-6 md:px-8 bg-slate-50 rounded-lg mb-16">
                         <h2 className="text-2xl md:text-3xl font-semibold text-center text-gray-700 mb-10">Explore Categories</h2>
                         <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-5xl mx-auto">
                            {categories.map((category) => ( <CategoryCard key={category.title} {...category} /> ))}
                         </div>
                    </section>
                    {/* 6. Content Rows Wrapper */}
                    <div className="space-y-12">
                         <div className="mb-12"><ShowCategoryRow title="Popular Shows" shows={homepageData.popularShows} viewAllLink="/shows?sort=title" /></div>
                         <div className="py-8 px-6 md:px-8 bg-slate-50 rounded-lg mb-12"><ShowCategoryRow title="Top-Rated for Sensory Balance" shows={homepageData.ratedShows} viewAllLink="/shows?sortBy=stimulation_score&sortOrder=DESC"/></div>
                         <div className="mb-12"><ShowCategoryRow title="Gentle & Calming Choices" shows={homepageData.lowStimShows} viewAllLink="/shows?stimScoreMin=1&stimScoreMax=1"/></div>
                         <div className="py-8 px-6 md:px-8 bg-slate-50 rounded-lg mb-12"><ShowCategoryRow title="Highly Interactive Shows" shows={homepageData.highInteractionShows} viewAllLink="/shows?interactivity=High"/></div>
                    </div>
                 </div>
             )}
        </div>
    );
};

export default HomePage;
</file>

<file path="client/src/pages/ShowDetailPage.jsx">
// client/src/pages/ShowDetailPage.jsx
import React, { useState, useEffect, useMemo } from 'react'; // Added useMemo
import { useParams, Link } from 'react-router-dom';
import { getShowById } from '../services/showService';
import { Pie } from 'react-chartjs-2';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title);

const placeholderImage = "/images/placeholder-show.png";

const ShowDetailPage = () => {
    const { id } = useParams();
    const [show, setShow] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    // Removed chart data state - will use memoized variables directly

    console.log("Rendering ShowDetailPage (Memo Fix Attempt). isLoading:", isLoading, "Error:", error);

    // --- Fetch Show Data ---
    useEffect(() => {
        console.log("ShowDetailPage (Memo Fix Attempt) Effect Running for ID:", id);
        if (!id) {
            setIsLoading(false);
            setError("No Show ID provided.");
            return;
        }
        setIsLoading(true);
        setError(null);
        setShow(null); // Reset show data

        getShowById(id)
            .then(fetchedShowData => {
                console.log("Fetched Show Detail Data:", fetchedShowData);
                // ** Only set show data and loading state here **
                setShow(fetchedShowData || null); // Set to null if fetch returns nothing
                setIsLoading(false);
            })
            .catch(err => {
                console.error("ShowDetailPage (Memo Fix Attempt) fetch error:", err);
                setError(err.message || `Failed to load show with ID ${id}.`);
                setShow(null);
                setIsLoading(false);
            });

        return () => {
            console.log("ShowDetailPage (Memo Fix Attempt) Effect Cleanup for ID:", id);
        };
    }, [id]); // Depend only on ID

    // --- Prepare Chart Data using useMemo ---
    const pieChartData = useMemo(() => {
        if (!show) return null; // Return null if show data isn't loaded yet
        console.log("Memoizing Pie Chart Data"); // Log memo calculation

        const dialogueScore = show.dialogue_intensity_num ?? 0;
        const sceneFreqScore = show.scene_frequency_num ?? 0;
        const soundFxScore = show.sound_effects_level_num ?? 0;
        const musicScore = show.total_music_level_num ?? 0;
        const totalScoreSum = dialogueScore + sceneFreqScore + soundFxScore + musicScore;
        let piePercentages = [0, 0, 0, 0];
        if (totalScoreSum > 0) {
            piePercentages = [
                (dialogueScore / totalScoreSum) * 100,
                (sceneFreqScore / totalScoreSum) * 100,
                (soundFxScore / totalScoreSum) * 100,
                (musicScore / totalScoreSum) * 100,
            ];
        }
        return {
            labels: ['Dialogue', 'Scene Freq.', 'Sound FX', 'Music'],
            datasets: [{
                label: 'Approx. Contribution by Factor Score',
                data: piePercentages,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)',
                    'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)'
                ],
                borderColor: '#ffffff', borderWidth: 1,
            }]
        };
    }, [show]); // Recalculate only when show data changes

    const barChartData = useMemo(() => {
        if (!show) return null; // Return null if show data isn't loaded yet
        console.log("Memoizing Bar Chart Data"); // Log memo calculation

        return {
            labels: ['Dialogue', 'Scene Freq.', 'Sound FX', 'Music'],
            datasets: [{
                label: show.title || 'This Show',
                data: [
                    show.dialogue_intensity_num ?? 0, show.scene_frequency_num ?? 0,
                    show.sound_effects_level_num ?? 0, show.total_music_level_num ?? 0
                ],
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderColor: 'rgba(54, 162, 235, 1)', borderWidth: 1,
            }]
        };
    }, [show]); // Recalculate only when show data changes


    // --- Chart Options (remain the same) ---
    const chartOptions = {
        responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'top' }, title: { display: false } },
    };
    const barChartOptions = {
        responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'top' }, title: { display: false } }, scales: { y: { beginAtZero: true, suggestedMax: 5, ticks: { stepSize: 1 } } }
    };


    // --- Render Logic ---
    if (isLoading) {
        return <p className="text-center text-lg text-gray-600 py-10">Loading show details...</p>;
    }
    if (error) {
        return <p className="text-center text-red-600 bg-red-100 p-4 rounded border border-red-300">{error}</p>;
    }
    if (!show) {
         return <p className="text-center text-gray-500 py-10">Show data not available.</p>;
    }

    // Determine image URL
    const imageUrl = show.image_filename ? `/images/${show.image_filename}` : placeholderImage;

    // Helper function (remains the same)
    const getInteractionExplanation = (level) => {
        switch (level?.toLowerCase()) {
            case 'high': return "This show frequently asks questions or prompts viewers to participate (like Blue's Clues or Dora).";
            case 'moderate': return "This show occasionally encourages participation or has interactive segments.";
            case 'low-moderate': return "This show has limited direct interaction, perhaps some songs or simple call-outs.";
            case 'low': return "This show is primarily passive viewing with little to no direct viewer interaction.";
            default: return "Interaction level information not available.";
        }
    };


    // --- JSX Output with Charts using memoized data ---
    return (
        <div className="max-w-4xl mx-auto bg-white p-6 md:p-8 rounded-lg shadow-lg">
            {/* Header Section */}
            <div className="flex flex-col md:flex-row gap-6 mb-8 border-b pb-6">
                <div className="md:w-1/3 flex-shrink-0">
                     <img
                        src={imageUrl}
                        alt={`${show.title} primary image`}
                        className="rounded-lg shadow-md w-full object-contain mb-3 bg-gray-100"
                        onError={(e) => { e.target.onerror = null; e.target.src=placeholderImage }}
                     />
                </div>
                <div className="md:w-2/3">
                     <h1 className="text-3xl md:text-4xl font-bold text-teal-800 mb-2">{show.title}</h1>
                    <p className="text-lg text-gray-600 mb-3">
                        <strong>Age Range:</strong> {show.target_age_group}
                    </p>
                    <div className="mb-4">
                        <strong className="text-gray-700">Themes:</strong>
                        <div className="flex flex-wrap gap-2 mt-1">
                            {show.themes && show.themes.length > 0 ? show.themes.map((theme, index) => (
                                <span key={index} className="text-sm bg-teal-100 text-teal-800 px-3 py-1 rounded-full">
                                    {theme}
                                </span>
                            )) : <span className="text-sm text-gray-500 italic">None listed</span>}
                        </div>
                    </div>
                     <p className="text-md text-gray-600">
                         <strong>Platform:</strong> {show.platform || 'N/A'}
                     </p>
                      <p className="text-md text-gray-600">
                         <strong>Avg. Episode Length:</strong> {show.avg_episode_length || 'N/A'}
                     </p>
                     {show.seasons && <p className="text-md text-gray-600"><strong>Seasons:</strong> {show.seasons}</p>}
                </div>
            </div>

            {/* Visual Summaries Section - WITH CHARTS */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                {/* Pie Chart Section */}
                <div className="border p-4 rounded-lg shadow-sm">
                     <h2 className="text-xl font-semibold text-center mb-4 text-teal-700">Stimulation Breakdown</h2>
                     <div className="relative h-64 md:h-80">
                         {/* Use memoized data */}
                         {pieChartData ? (
                             <Pie data={pieChartData} options={chartOptions} />
                         ) : (
                             <p className="text-center text-gray-400 italic mt-10">Loading chart...</p>
                         )}
                     </div>
                </div>

                {/* Bar Chart Section */}
                 <div className="border p-4 rounded-lg shadow-sm">
                     <h2 className="text-xl font-semibold text-center mb-4 text-teal-700">Sensory Factor Levels</h2>
                     <div className="relative h-64 md:h-80">
                         {/* Use memoized data */}
                         {barChartData ? (
                             <Bar data={barChartData} options={barChartOptions} />
                         ) : (
                             <p className="text-center text-gray-400 italic mt-10">Loading chart...</p>
                         )}
                     </div>
                </div>
            </div>

             {/* Interaction Level & Narrative Summary */}
             <div className="space-y-6">
                 <div className="border p-4 rounded-lg shadow-sm bg-teal-50">
                     <h2 className="text-xl font-semibold mb-2 text- teal-700">Interaction Level: {show.interactivity_level || 'N/A'}</h2>
                     <p className="text-gray-700">{getInteractionExplanation(show.interactivity_level)}</p>
                 </div>
                 <div className="border p-4 rounded-lg shadow-sm">
                     <h2 className="text-xl font-semibold mb-2 text-gray-700">Summary & Sensory Notes</h2>
                     <p className="text-gray-600 italic">(Detailed narrative summary...)</p>
                     <p className='mt-2 text-sm text-gray-600'><strong>Animation Style:</strong> {show.animation_style || 'N/A'}</p>
                 </div>
             </div>

            {/* Back Button */}
            <div className="mt-8 text-center">
                <Link to="/shows" className="inline-block px-6 py-2 border border-teal-600 text-teal-600 rounded hover:bg-teal-50 transition duration-200">
                    ← Back to Catalog
                </Link>
            </div>
        </div>
    );
};

export default ShowDetailPage;
</file>

<file path="client/src/services/showService.js">
// client/src/services/showService.js
import axios from 'axios';

// The base URL for our API. Uses the Vite proxy.
const API_BASE_URL = '/api';

/**
 * Fetches a list of shows from the backend API with filtering, sorting, and pagination.
 * @param {object} filters - An object containing filter parameters like search, minAge, themes, etc. Can also include sortBy and sortOrder.
 * @param {number} page - The current page number.
 * @param {number} limit - The number of items per page.
 * @returns {Promise<object>} API response data (e.g., { shows: [], totalShows: 0, ... })
 * @throws {Error} Throws an error if the fetch fails.
 */
export const getShows = async (filters = {}, page = 1, limit = 21) => {
    try {
        const params = {
            ...filters,
            page,
            limit
        };
        // Remove null/undefined/empty string values from params
        Object.keys(params).forEach(key => (params[key] == null || params[key] === '') && delete params[key]);

        console.log('Fetching shows with params:', params);
        const response = await axios.get(`${API_BASE_URL}/shows`, { params });
        // Add a check to ensure response.data exists
        if (response && response.data) {
             return response.data;
        } else {
             // This case shouldn't happen often with axios, but good practice
             throw new Error("Received empty response from server.");
        }
    } catch (error) {
       console.error("Error fetching shows in showService:", error);
       let errorMessage = "An unknown error occurred while fetching shows.";
       if (error.response) {
            // Error from backend (e.g., 4xx, 5xx)
            errorMessage = error.response.data?.error || `Server error: ${error.response.status}`;
       } else if (error.request) {
            // No response received
            errorMessage = "No response received from server. Check network or backend.";
       } else {
            // Other errors (e.g., setup)
            errorMessage = error.message || errorMessage;
       }
       // Re-throw the error
       throw new Error(errorMessage);
    }
};

/**
 * Fetches details for a single show by its ID.
 * @param {number | string} id - The ID of the show.
 * @returns {Promise<object>} The show detail object.
 * @throws {Error} Throws an error if the fetch fails.
 */
export const getShowById = async (id) => {
     try {
        console.log(`Workspaceing show by ID: ${id}`);
        const response = await axios.get(`${API_BASE_URL}/shows/${id}`);
        if (response && response.data) {
            return response.data;
        } else {
            throw new Error(`Received empty response when fetching show ID ${id}.`);
        }
    } catch (error) {
         console.error(`Error fetching show with ID ${id}:`, error);
         let errorMessage = `An unknown error occurred while fetching show ID ${id}.`;
         if (error.response) {
            errorMessage = error.response.data?.error || `Server error: ${error.response.status}`;
            // Specifically check for 404
            if (error.response.status === 404) {
                errorMessage = `Show with ID ${id} not found.`;
            }
         } else if (error.request) {
            errorMessage = "No response received from server.";
         } else {
            errorMessage = error.message || errorMessage;
         }
         throw new Error(errorMessage);
     }
};

 /**
  * Fetches details for a single show by its exact title.
  * @param {string} title - The exact title of the show.
  * @returns {Promise<object>} The show detail object.
  * @throws {Error} Throws an error if the fetch fails or title is invalid.
  */
 export const getShowByTitle = async (title) => {
     if (!title || typeof title !== 'string' || title.trim().length === 0) {
          console.error("getShowByTitle called with invalid title:", title);
          throw new Error("Invalid title provided to getShowByTitle.");
     }
     const encodedTitle = encodeURIComponent(title.trim());
     console.log(`Workspaceing show by title: ${title}, Encoded: ${encodedTitle}`);
     try {
         const response = await axios.get(`${API_BASE_URL}/shows/title/${encodedTitle}`);
          if (response && response.data) {
            return response.data;
        } else {
            throw new Error(`Received empty response when fetching show title "${title}".`);
        }
     } catch (error) {
         console.error(`Error fetching show with title "${title}":`, error);
          let errorMessage = `An unknown error occurred while fetching show title "${title}".`;
         if (error.response) {
            errorMessage = error.response.data?.error || `Server error: ${error.response.status}`;
            // Specifically handle 404 from the backend
             if (error.response.status === 404) {
                  errorMessage = `Show with title "${title}" not found.`;
             }
         } else if (error.request) {
            errorMessage = "No response received from server.";
         } else {
            errorMessage = error.message || errorMessage;
         }
         throw new Error(errorMessage);
     }
 };


 /**
  * Fetches the list of unique theme names.
  * @returns {Promise<string[]>} An array of theme strings.
  * @throws {Error} Throws an error if the fetch fails.
  */
 export const getThemes = async () => {
     try {
        console.log("Fetching themes");
         const response = await axios.get(`${API_BASE_URL}/themes`);
         // Ensure data is an array, even if backend sends null/undefined
         return Array.isArray(response?.data) ? response.data : [];
     } catch (error) {
         console.error("Error fetching themes:", error);
          let errorMessage = "An unknown error occurred while fetching themes.";
         if (error.response) {
            errorMessage = error.response.data?.error || `Server error: ${error.response.status}`;
         } else if (error.request) {
            errorMessage = "No response received from server.";
         } else {
            errorMessage = error.message || errorMessage;
         }
         throw new Error(errorMessage);
     }
 };

 /**
  * Fetches details for multiple shows based on an array of IDs for comparison.
  * @param {Array<number|string>} ids - An array of show IDs (max 3 recommended).
  * @returns {Promise<Array<object>>} A promise that resolves to an array of show detail objects.
  * @throws {Error} Throws an error if the fetch fails or IDs are invalid.
  */
 export const getShowsForComparison = async (ids) => {
    if (!Array.isArray(ids) || ids.length === 0 || ids.length > 3) { // Added check for > 3
        console.warn("getShowsForComparison called with invalid IDs:", ids);
         // Consider throwing an error instead of returning empty array for clearer feedback
        throw new Error(`Invalid or too many IDs provided for comparison (received ${ids?.length || 0}, max 3).`);
    }

    const validIds = ids.map(id => String(id).trim()).filter(id => id); // Ensure strings, trim, filter empty
    if (validIds.length === 0) {
         throw new Error("No valid IDs provided after cleaning.");
    }

    const idString = validIds.join(',');
    console.log(`Workspaceing shows for comparison with IDs: ${idString}`);
    try {
        const response = await axios.get(`${API_BASE_URL}/shows/compare`, {
            params: { ids: idString }
        });
        // Ensure data is an array
        return Array.isArray(response?.data) ? response.data : [];
    } catch (error) {
        console.error(`Error fetching shows for comparison with IDs ${idString}:`, error);
        let errorMessage = `An unknown error occurred while fetching shows for comparison.`;
         if (error.response) {
            errorMessage = error.response.data?.error || `Server error: ${error.response.status}`;
         } else if (error.request) {
            errorMessage = "No response received from server for comparison.";
         } else {
            errorMessage = error.message || errorMessage;
         }
        throw new Error(errorMessage);
    }
 };

/**
 * Fetches autocomplete suggestions for show titles.
 * @param {string} term - The partial search term entered by the user.
 * @returns {Promise<string[]>} A promise that resolves to an array of suggestion strings.
 * (Returns empty array on error or invalid term)
 */
export const getAutocompleteSuggestions = async (term) => {
    if (!term || typeof term !== 'string' || term.trim().length < 2) {
        // console.log("Autocomplete term too short, returning empty array.");
        return []; // Return empty array immediately, no error needed
    }

    const searchTerm = term.trim();
    console.log(`Workspaceing suggestions for term: "${searchTerm}"`);

    try {
        const response = await axios.get(`${API_BASE_URL}/suggestions`, {
            params: { term: searchTerm }
        });
        // Ensure data is an array
        return Array.isArray(response?.data) ? response.data : [];
    } catch (error) {
        // Log the error but return empty array for graceful UI handling
        console.error(`Error fetching suggestions for "${searchTerm}":`, error.message);
        return [];
    }
};

/**
 * Fetches all data needed for the homepage in a single request.
 * @returns {Promise<object>} Object containing featuredShow, popularShows, ratedShows, etc.
 * @throws {Error} Throws an error if the fetch fails.
 */
export const getHomepageData = async () => {
    console.log(">>> Service: getHomepageData called."); // Keep log
    try {
        const response = await axios.get(`${API_BASE_URL}/homepage-data`);
        if (response && response.data) {
            return response.data;
        } else {
            throw new Error("Received empty response from server for homepage data.");
        }
    } catch (error) {
        console.error("Error fetching homepage data in showService:", error);
         let errorMessage = "An unknown error occurred while fetching homepage data.";
         if (error.response) {
            errorMessage = error.response.data?.error || `Server error: ${error.response.status}`;
         } else if (error.request) {
            errorMessage = "No response received from server for homepage data.";
         } else {
            errorMessage = error.message || errorMessage;
         }
        throw new Error(errorMessage);
    }
};
</file>

<file path="client/tailwind.config.js">
// client/tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
    content: [
      "./index.html",
      "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [
      // We might add plugins here later if needed
    ],
  }
</file>

<file path="client/vite.config.js">
// client/vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      // Proxy API requests starting with /api to backend server
      '/api': { // Requests starting with /api/...
        target: 'http://localhost:3001', // Your backend address
        changeOrigin: true, // Recommended
        secure: false, // Change to true if backend uses HTTPS
      }
    }
  }
})
</file>

<file path="database/import_data.js">
// database/import_data.js
const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

const dbPath = path.resolve(__dirname, 'shows.db');
const jsonPath = path.resolve(__dirname, 'reviewed_shows.json');
const schemaPath = path.resolve(__dirname, 'schema.sql');

// Helper function to parse age string (e.g., "3-8", "12+", "Any")
function parseAgeGroup(ageString) {
    if (!ageString || typeof ageString !== 'string') {
        return { min_age: 0, max_age: 99 }; // Default for missing/invalid
    }
    ageString = ageString.trim().toLowerCase();

    if (ageString === 'any' || ageString === 'all ages' || ageString === 'any age') {
         return { min_age: 0, max_age: 99 };
    }
     if (ageString === '2+, any') { // Specific case from data
         return { min_age: 2, max_age: 99 };
    }
     if (ageString === '8+') { // Specific case from data
         return { min_age: 8, max_age: 99 };
     }
     if (ageString === '0-5') { // Specific case from data
         return { min_age: 0, max_age: 5 };
     }
     if (ageString === '0-3') { // Specific case from data
         return { min_age: 0, max_age: 3 };
     }


    const plusMatch = ageString.match(/^(\d+)\+$/);
    if (plusMatch) {
        return { min_age: parseInt(plusMatch[1], 10), max_age: 99 };
    }

    const rangeMatch = ageString.match(/^(\d+)\s*-\s*(\d+)$/);
    if (rangeMatch) {
        return { min_age: parseInt(rangeMatch[1], 10), max_age: parseInt(rangeMatch[2], 10) };
    }

    // Handle complex cases like "6-12, 12+" -> take min and max overall
    const complexMatch = ageString.match(/(\d+)\s*-\s*(\d+),\s*(\d+)\+/);
     if (complexMatch) {
         const min1 = parseInt(complexMatch[1], 10);
         // const max1 = parseInt(complexMatch[2], 10); // Not needed for overall max
         const min2 = parseInt(complexMatch[3], 10);
         return { min_age: Math.min(min1, min2), max_age: 99 };
     }
     // Handle "7-12, 12+"
      const complexMatch2 = ageString.match(/(\d+)\s*-\s*(\d+),\s*(\d+)\+/);
       if (complexMatch2) {
           return { min_age: 7, max_age: 99 };
       }


     // Handle single number ages if they appear (treat as min=max=age)
     const singleAgeMatch = ageString.match(/^(\d+)$/);
     if (singleAgeMatch) {
          const age = parseInt(singleAgeMatch[1], 10);
         return { min_age: age, max_age: age };
     }

    console.warn(`Could not parse age string: "${ageString}". Defaulting to 0-99.`);
    return { min_age: 0, max_age: 99 }; // Fallback
}

// Helper to map descriptive levels to numbers for charts/potential filtering
// Using a simple scale: None/Very Low=0, Low=1, Low-Moderate=2, Moderate=3, Moderate-High=4, High=5, Very High=6
function mapLevelToNumber(level) {
    if (!level || typeof level !== 'string') return null;
    const l = level.toLowerCase().trim();
    switch (l) {
        case 'none': return 0;
        case 'very low': return 0; // Grouping None and Very Low
        case 'low': return 1;
        case 'low-moderate': return 2;
        case 'moderate': return 3;
        case 'moderate-high': return 4;
        case 'high': return 5;
        case 'very high': return 6;
        // Handle specific cases if needed, e.g., music tempo 'Varies'
        case 'varies': return 3; // Treat 'Varies' as Moderate for now
        default:
            console.warn(`Unknown level "${level}" found, mapping to null.`);
            return null; // Unknown level
    }
}


// Delete existing DB file to start fresh (optional)
if (fs.existsSync(dbPath)) {
    try {
        fs.unlinkSync(dbPath);
        console.log('Existing database deleted.');
    } catch (delErr) {
        console.error('Error deleting existing database file:', delErr);
        // Decide if you want to stop here or continue
        // return;
    }
}

// Connect to the SQLite database (creates if not exists)
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Error opening database:', err.message);
        return;
    }
    console.log('Connected to the SQLite database.');
});

// Read and execute schema
let schemaSql;
try {
    schemaSql = fs.readFileSync(schemaPath, 'utf8');
} catch (readErr) {
    console.error('Error reading schema file:', readErr);
    db.close();
    return;
}


db.exec(schemaSql, (err) => {
    if (err) {
        console.error('Error executing schema:', err.message);
        db.close();
        return;
    }
    console.log('Database schema applied successfully.');

    // Read and parse the JSON data
    let showsData;
    try {
        const jsonData = fs.readFileSync(jsonPath, 'utf8');
        showsData = JSON.parse(jsonData);
         if (!Array.isArray(showsData)) {
            throw new Error("JSON data is not an array.");
         }
    } catch (err) {
        console.error('Error reading or parsing JSON file:', err);
        db.close();
        return;
    }

    // Prepare the SQL statement for insertion
    const insertSql = `INSERT INTO shows (
        title, stimulation_score, platform, target_age_group, min_age, max_age,
        seasons, avg_episode_length, themes, interactivity_level, animation_style,
        dialogue_intensity, sound_effects_level, music_tempo, total_music_level,
        total_sound_effect_time_level, scene_frequency, image_filename,
        dialogue_intensity_num, scene_frequency_num, sound_effects_level_num, total_music_level_num
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;

    // Use db.serialize to ensure sequential execution order
    db.serialize(() => {
        db.run('BEGIN TRANSACTION;', (beginErr) => {
             if(beginErr) {
                 console.error("Error beginning transaction:", beginErr.message);
                 db.close();
                 return;
             }
        });


        const stmt = db.prepare(insertSql, (prepareErr) => {
            if(prepareErr){
                console.error("Error preparing statement:", prepareErr.message);
                db.run('ROLLBACK;');
                db.close();
                return;
            }
        });

        let count = 0;
        let errorCount = 0;
        showsData.forEach((show, index) => {
            if (!show || typeof show.title !== 'string') {
                console.warn(`Skipping invalid show entry at index ${index}.`);
                errorCount++;
                return; // Skip this entry
            }

            const { min_age, max_age } = parseAgeGroup(show.target_age_group);
            const themesString = JSON.stringify(show.themes || []); // Store themes array as JSON string

            // Map levels to numbers
            const dialogueNum = mapLevelToNumber(show.dialogue_intensity);
            const sceneNum = mapLevelToNumber(show.scene_frequency);
            const sfxNum = mapLevelToNumber(show.sound_effects_level);
            const musicNum = mapLevelToNumber(show.total_music_level);
            const sfxTimeNum = mapLevelToNumber(show.total_sound_effect_time_level); // Also map this one


            stmt.run(
                show.title,
                show.stimulation_score,
                show.platform,
                show.target_age_group,
                min_age,
                max_age,
                show.seasons,
                show.avg_episode_length,
                themesString,
                show.interactivity_level,
                show.animation_style,
                show.dialogue_intensity,
                show.sound_effects_level,
                show.music_tempo,
                show.total_music_level,
                show.total_sound_effect_time_level,
                show.scene_frequency,
                show.image_filename, // Still null, but include the column
                dialogueNum,
                sceneNum,
                sfxNum,
                musicNum,
                (err) => {
                    if (err) {
                        // Log duplicates or other errors but continue if possible
                        if (err.message.includes('UNIQUE constraint failed: shows.title')) {
                            console.warn(`Skipping duplicate title: "${show.title}"`);
                        } else {
                            console.error(`Error inserting row for "${show.title}":`, err.message);
                        }
                        errorCount++;
                    } else {
                        count++;
                    }
                }
            );
        });

        stmt.finalize((finalizeErr) => {
             if (finalizeErr) {
                console.error('Error finalizing statement:', finalizeErr.message);
                db.run('ROLLBACK;', (rollbackErr) => {
                     if(rollbackErr) console.error("Rollback error:", rollbackErr.message);
                     db.close((closeErr) => {
                         if(closeErr) console.error("DB close error after finalize error:", closeErr.message);
                     });
                });
                return;
            }

            db.run('COMMIT;', (commitErr) => {
                 if (commitErr) {
                    console.error('Error committing transaction:', commitErr.message);
                 } else {
                     console.log(`Successfully inserted ${count} shows into the database.`);
                     if (errorCount > 0) {
                        console.log(`${errorCount} entries were skipped due to errors or invalid data.`);
                     }
                 }
                // Close the database connection regardless of commit success/failure
                db.close((closeErr) => {
                    if (closeErr) {
                        console.error('Error closing database:', closeErr.message);
                    } else {
                        console.log('Database connection closed.');
                    }
                });
            });
        });
    });
});
</file>

<file path="database/reviewed_shows.json">
[
  {
    "title": "A for Adley",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Family Relationships",
      "Family Values",
      "Conflict Resolution",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action Family Videos",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "a-for-adley.jpg"
  },
  {
    "title": "Ada Twist, Scientist",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "STEM",
      "Critical Thinking",
      "Curiosity",
      "Problem Solving",
      "Teamwork",
      "Perseverance",
      "Science"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "ada-twist-scientist.jpg"
  },
  {
    "title": "Adventure Agents",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "6-12, 12+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Environmental Awareness",
      "Cause and Effect",
      "Life Lessons",
      "Outdoor Exploration",
      "Nature",
      "Natural World",
      "Exploration",
      "Motor Skills",
      "Animals",
      "Farm Life",
      "Emotional Intelligence",
      "Problem Solving",
      "Critical Thinking",
      "Teamwork",
      "Curiosity",
      "Adventure",
      "Discovery",
      "Safety",
      "Nature Sounds",
      "Healthy Eating",
      "Confidence Building",
      "Mature Themes",
      "Wild Animal Captures and Cooking"
    ],
    "interactivity_level": "High",
    "animation_style": "Live Action Outdoors Survival Adventure",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "adventure-agents.jpg"
  },
  {
    "title": "Adventure Time (2010-2018)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "10-14",
    "seasons": "10 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Friendship",
      "Entertainment",
      "Fantasy Elements",
      "Adventure",
      "Mild Mature Themes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional hand-drawn 2D animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "adv-time.jpg"
  },
  {
    "title": "Akili and Me",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Early Childhood experiences",
      "Cultures & Traditions",
      "Cultural & Social",
      "Life Lessons",
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Motor Skills",
      "Music",
      "Repetitive Learning",
      "Language Learning",
      "Exercise",
      "Colours",
      "Shapes",
      "sing-a-long",
      "Social-Emotional",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "akili-and-me.jpg"
  },
  {
    "title": "Alma's Way",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Cause and Effect",
      "Social-Emotional",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "almas-way.jpg"
  },
  {
    "title": "Alphablocks",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Preschool-Basics",
      "Literacy",
      "Phonics",
      "Language Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with colorful and stylized block characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "alpha-blocks.jpg"
  },
  {
    "title": "Amakandu",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "Any",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Engineering Concepts",
      "Creativity & Imagination",
      "Sensory Exploration",
      "Mindfulness",
      "Nature",
      "Relaxation",
      "Captivating Visuals",
      "Nature Sounds",
      "ASMR"
    ],
    "interactivity_level": "Low",
    "animation_style": "Real Props No Animations",
    "dialogue_intensity": "None",
    "sound_effects_level": "High",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "amakandu.jpg"
  },
  {
    "title": "Andy's Dinosaur Adventures",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Dinosaurs",
      "Paleontology",
      "Adventure",
      "Science",
      "Natural History",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Combination of live-action and CGI animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "andys-dinosaur-adventure.jpg"
  },
  {
    "title": "Angelina Ballerina (2008-2010)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural Appreciation",
      "Creativity & Imagination",
      "Perseverance",
      "Friendship",
      "Problem Solving",
      "Ballet",
      "Motor Skills"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "angelina-ballerina.jpg"
  },
  {
    "title": "Art Kids TV",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "5-12",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Arts & Crafts",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Origami",
      "Painting",
      "Drawing",
      "Motor Skills",
      "Literacy",
      "Numeracy",
      "Shapes",
      "Colours"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "art-kids-tv.jpg"
  },
  {
    "title": "Arthur",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "25 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Family Values",
      "Relatable Situations",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Traditional hand-drawn",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "arthur.jpg"
  },
  {
    "title": "Avatar: The Last Airbender",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-14",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Teamwork",
      "Morality",
      "Emotional Intelligence",
      "Entertainment",
      "Fantasy Elements",
      "Martial Arts",
      "Friendship",
      "Responsibility",
      "Perseverance",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D animation inspired by anime styles.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "avatar-last-airbender.jpg"
  },
  {
    "title": "Baba blast",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Dinosaurs",
      "Paleontology",
      "Natural History",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Exploration",
      "Entertainment"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "baba-blast.jpg"
  },
  {
    "title": "Babar",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Responsibility",
      "Problem Solving",
      "Leadership",
      "Emotional Intelligence",
      "Perseverance",
      "Family Values",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "babar.jpg"
  },
  {
    "title": "Babblarna",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "1 Season",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Language Learning",
      "Repetitive Learning",
      "Social-Emotional",
      "Phonics"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Very Low",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "babblarna.jpg"
  },
  {
    "title": "Badanamu",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "1-5",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Preschool-Basics",
      "sing-a-long",
      "Numeracy",
      "Literacy",
      "Motor Skills",
      "Cognitive Development",
      "Language Learning",
      "Phonics",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "badanamu.jpg"
  },
  {
    "title": "Bananas in Pyjamas (2011-2013)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Social-Emotional",
      "sing-a-long",
      "Repetitive Learning"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation introduces brighter colors and more dynamic visuals but the animation remains straightforward to prevent overstimulation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "bananas-in-pyjamas.jpg"
  },
  {
    "title": "Barbapapa (1973-2003)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Environmental Awareness",
      "Creativity & Imagination",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "traditional hand-drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "barbapapa.jpg"
  },
  {
    "title": "Barney & Friends",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "13 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Dance",
      "Social-Emotional",
      "Friendship",
      "Numeracy",
      "Literacy",
      "Music",
      "Teamwork",
      "Shapes",
      "Emotional Intelligence",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "Live action with costumed characters",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "barney-and-friends.jpg"
  },
  {
    "title": "Be Cool, Scooby-Doo! (2015–2018)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "Cartoonish 2D animation style",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "be-cool-scooby-doo.jpg"
  },
  {
    "title": "Bear in the Big Blue House",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Routine",
      "Problem Solving",
      "Emotional Intelligence",
      "Social Development",
      "Relatable Situations",
      "sing-a-long",
      "Bedtime Routines"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action costumed puppetry with detailed sets.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "bear-in-the-big-blue-house.jpg"
  },
  {
    "title": "Beep and Mort",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence",
      "Adventure",
      "Teamwork",
      "Perseverance",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with colorful characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "beep-and-mort.jpg"
  },
  {
    "title": "Ben & Holly's Little Kingdom (2009-2013)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "ben-and-hollys-little-kingdom.jpg"
  },
  {
    "title": "Between the Lions",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "11 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Literacy",
      "Phonics",
      "Language Learning",
      "Reading Comprehension",
      "Music",
      "Humor"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action puppetry, 2D animation, and CGI effects. Bright but balanced colors, with emphasis on text and literacy elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "between-the-lions.jpg"
  },
  {
    "title": "Bill Nye the Science Guy",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-14",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Cause and Effect",
      "Safety",
      "Discovery",
      "Science",
      "Critical Thinking",
      "Experimentation",
      "Curiosity",
      "Natural World",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action with fast-paced editing, animations, and special effects.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "bill-nye-the-science-guy.jpg"
  },
  {
    "title": "Bing",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-4",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social Development",
      "Emotional Intelligence",
      "Problem Solving"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "bing.jpg"
  },
  {
    "title": "Blippi",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Early Childhood experiences",
      "Creativity & Imagination",
      "Curiosity",
      "Animals",
      "Natural World",
      "Exploration",
      "sing-a-long",
      "Dance",
      "Vocabulary",
      "Adventure",
      "Silly Comedy",
      "Colours",
      "Shapes",
      "Nature",
      "Hyper-Activity"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Real-World Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "blippi.jpg"
  },
  {
    "title": "Blue's Clues (1996-2007)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Emotional Intelligence",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Live action, Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Very Low",
    "image_filename": "blues-clues.jpg"
  },
  {
    "title": "Blue's Clues & You! (2019)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Emotional Intelligence",
      "Problem Solving",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "Live action, 3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Very Low",
    "image_filename": "blues-clues-and-you.jpg"
  },
  {
    "title": "Bluey 2018-present",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Family Values",
      "Family Relationships"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "bluey.jpg"
  },
  {
    "title": "Bob the Builder (1997-2015)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "21 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Repetitive Learning"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Stop-Motion animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "bob-the-builder.jpg"
  },
  {
    "title": "Bob the Builder (2015-2018)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Repetitive Learning"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "bob-the-builder-2015.jpg"
  },
  {
    "title": "Boba the Show (2021-present)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Early Childhood experiences",
      "Social-Emotional",
      "Friendship",
      "Emotional Intelligence",
      "Social Development",
      "sing-a-long",
      "Dance",
      "Humor",
      "Motor Skills"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with realistic textures and environments.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "boba.jpg"
  },
  {
    "title": "Bounce Patrol",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Literacy",
      "Numeracy",
      "Colours",
      "Animals",
      "Social-Emotional",
      "sing-a-long",
      "Dance",
      "Phonics",
      "Vocabulary",
      "Exercise"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "bounce-patrol.jpg"
  },
  {
    "title": "Brain Candy TV",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "Any",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Spacetime and the Cosmos",
      "Preschool-Basics",
      "Elementary-Basics",
      "STEM",
      "Early Childhood experiences",
      "Engineering Concepts",
      "Science",
      "Language Learning",
      "Phonics",
      "Vocabulary",
      "Cognitive Development",
      "Curiosity",
      "Natural History",
      "Colours",
      "Literacy"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with Bright Colors and Realistic Models",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "brain-candy-tv.jpg"
  },
  {
    "title": "Bubble Guppies",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Math",
      "Literacy",
      "Science",
      "Social-Emotional",
      "Teamwork",
      "sing-a-long",
      "Problem Solving",
      "Numeracy",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "bubble-guppies.jpg"
  },
  {
    "title": "Builder Brothers' Dream Factory",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Engineering Concepts",
      "Teamwork",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with detailed environments.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "builder-brothers-dream-factory.jpg"
  },
  {
    "title": "Caillou (1997-2010)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "8 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Relatable Situations",
      "Patience",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Friendship",
      "Frequent Whining",
      "Tantrums",
      "Lack of Consequences"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional hand-drawn 2D animation. DIgital later in the seasons",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "caillou.jpg"
  },
  {
    "title": "Caitie's Classroom (SuperSimplePlay)",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "1-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Early Childhood experiences",
      "STEM",
      "Elementary-Basics",
      "Cultural & Social",
      "sing-a-long",
      "Dance",
      "Music",
      "Social-Emotional",
      "Literacy",
      "Numeracy",
      "Social Development",
      "Emotional Intelligence",
      "Motor Skills"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Puppetry and Props",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "caitie_s-classroom-(superssimpleplay).jpg"
  },
  {
    "title": "Canticos (2016-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "1-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Language Learning",
      "Literacy",
      "sing-a-long",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 2D animation with a simple, storybook-inspired art style. The characters are designed with soft, rounded features and bright, pastel colors, reflecting the show's musical and educational focus. The animation often incorporates interactive elements, encouraging audience participation.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "canticos-(2016-present).jpg"
  },
  {
    "title": "Captain Planet and the Planeteers (1990-1996)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Environmental Awareness",
      "Teamwork",
      "Ecosystems",
      "Responsibility",
      "Social Development",
      "Entertainment",
      "Mild Peril"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D Animation with Bold Designs",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "captain-planet-and-the-planeteers-(1990-1996).jpg"
  },
  {
    "title": "Care Bears: Unlock the Magic (2019-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Learning from Mistakes",
      "Emotional Intelligence",
      "Social-Emotional",
      "Social Development",
      "Friendship"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a modern, vibrant design. Color Palette: Bright and pastel colors with high saturation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "care-bears-unlock-the-magi-(2019-present).jpg"
  },
  {
    "title": "Casper Babypants",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "1-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Music",
      "sing-a-long",
      "Vocabulary",
      "Dance",
      "Relaxation",
      "Repetitive Learning",
      "Language Learning",
      "Literacy",
      "Numeracy",
      "Phonics",
      "Routine",
      "Bedtime Routines",
      "Motor Skills",
      "Sensory Exploration",
      "Cognitive Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Simple Animations or Live-Action with Gentle Imagery",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "casper-babypants.jpg"
  },
  {
    "title": "Charlie's Colorform City",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Preschool-Basics",
      "Shapes",
      "Colours",
      "Critical Thinking",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "charlies-colorform-city.jpg"
  },
  {
    "title": "Chip and Potato",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Overcoming Fears",
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Family Values",
      "Emotional Intelligence",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with soft, rounded designs. Color Palette: Warm and pastel colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "chip-and-potato.jpg"
  },
  {
    "title": "City of friends",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Community Service",
      "Teamwork",
      "Responsibility",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "city-of-friends.jpg"
  },
  {
    "title": "CITY VEHICLES",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Creativity & Imagination",
      "Engineering Concepts",
      "Mechanics",
      "Problem Solving",
      "Teamwork",
      "Music",
      "Entertainment"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation with Bright Colors and Realistic Models",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "city-vehicles.jpg"
  },
  {
    "title": "Clifford the Big Red Dog (2000)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Emotional Intelligence",
      "Social Development",
      "Problem Solving",
      "Friendship",
      "Community"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "clifford-the-big-red-dog-(2000).jpg"
  },
  {
    "title": "Clifford the Big Red Dog (2019)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Emotional Intelligence",
      "Friendship",
      "Problem Solving",
      "Social Development",
      "Community"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "clifford-the-big-red-dog-(2019).jpg"
  },
  {
    "title": "Cloudbabies",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Environmental Awareness",
      "Social-Emotional",
      "Responsibility",
      "Teamwork",
      "Social Development",
      "Routine",
      "Bedtime Routines",
      "Natural World",
      "Natural Science",
      "Relaxation",
      "Nature",
      "sing-a-long"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "cloudbabies.jpg"
  },
  {
    "title": "CoasterFan2105",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "Any",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Engineering Concepts",
      "Cultural Appreciation",
      "Locomotive History",
      "History",
      "Hobbies",
      "Entertainment",
      "Travel Geography",
      "Curiosity",
      "Machinery",
      "Trains"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "High-Definition Live-Action Footage",
    "dialogue_intensity": "Low",
    "sound_effects_level": "High",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "coasterfan2105.jpg"
  },
  {
    "title": "Cocomelon",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "10 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Shapes",
      "Routine",
      "Social-Emotional",
      "Cognitive Development",
      "Language Learning",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with extremely bright and vivid colors.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "cocomelon.jpg"
  },
  {
    "title": "Codename: Kids Next Door",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Teamwork",
      "Problem Solving",
      "Courage",
      "Mischievous Behaviour",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with stylized character designs. Color Palette: Bright and varied colors with bold outlines.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "codename-kids-next-door.jpg"
  },
  {
    "title": "Colourblocks",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Colours",
      "Shapes",
      "Art",
      "Motor Skills",
      "Colour Combinations"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation using Colorforms-inspired designs. Color Palette: Bright and bold primary colors with simple shapes.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "colourblocks.jpg"
  },
  {
    "title": "Cosmic kids yoga",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Life Lessons",
      "Positive Engaging Screen-Time",
      "Mindfulness",
      "Exercise",
      "Yoga",
      "Emotional Intelligence",
      "Routine",
      "Sensory Exploration",
      "Relaxation",
      "sing-a-long",
      "Positive Mindset"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Colorful Green Screen Animations",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "cosmic-kids-yoga.jpg"
  },
  {
    "title": "Courage the Cowardly Dog (1999-2002)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "10-14",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Overcoming Fears",
      "Problem Solving",
      "Entertainment",
      "Humor",
      "Courage",
      "Perseverance",
      "Dark Themes",
      "Surreal Imagery",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with surreal and sometimes dark visuals. Color Palette: Varied colors with contrasting dark and bright tones.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Varies",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "courage-the-cowardly-dog-(1999-2002).jpg"
  },
  {
    "title": "Cowboy Jack",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Positive Role Models",
      "Life Lessons",
      "Exploration",
      "Relatable Situations",
      "Vocabulary",
      "Social Development",
      "Social-Emotional",
      "Curiosity",
      "History",
      "Adventure",
      "Discovery",
      "Travel Geography"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Real-World Exploration",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "cowboy-jack.jpg"
  },
  {
    "title": "Curious George (2006-present)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "15 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Motor Skills",
      "Discovery",
      "Science",
      "Curiosity",
      "Exploration"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital hand-drawn 2D artwork animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "curious-george-(2006-present).jpg"
  },
  {
    "title": "Cyberchase (2002-present)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "15 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Problem Solving",
      "Critical Thinking",
      "Math",
      "Science",
      "Entertainment"
    ],
    "interactivity_level": "High",
    "animation_style": "traditional 2D hand-drawn animation. Digital in later series.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "cyberchase-2002-present).jpg"
  },
  {
    "title": "Daniel Tiger's Neighbourhood",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Communication & Expression",
      "Life Lessons",
      "Social-Emotional",
      "Emotional Intelligence",
      "Problem Solving",
      "Social Development",
      "Relatable Situations",
      "Friendship",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "daniel-tigers-neighbourhood.jpg"
  },
  {
    "title": "Danny Go!",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Physical Fitness",
      "Cultural Appreciation",
      "Creativity & Imagination",
      "Preschool-Basics",
      "sing-a-long",
      "Phonics",
      "Entertainment",
      "Interactive Game Elements",
      "Dance",
      "Repetitive Learning",
      "Music",
      "Exercise"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Interactive Elements",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "danny-go!.jpg"
  },
  {
    "title": "Davey and Goliath",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cause and Effect",
      "Life Lessons",
      "Morality",
      "Family Values",
      "Religion",
      "Responsibility",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-Motion Animation using clay figures",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "davey-and-goliath.jpg"
  },
  {
    "title": "De Zoete Zusjes",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "4-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Family Values",
      "Family Relationships",
      "Relatable Situations",
      "Problem Solving",
      "Vocabulary",
      "Dutch Language"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action with Puppetry and Props",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "de-zoete-zusjes.jpg"
  },
  {
    "title": "DG Bible Songs",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Religious Teachings",
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Spiritual Development",
      "Biblical Stories",
      "Religion",
      "sing-a-long",
      "Family Values",
      "Music",
      "Christian Values",
      "Faith",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "high-quality animation and music",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "dg-bible-songs.jpg"
  },
  {
    "title": "Diego",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Environmental Awareness",
      "Animal Behaviour",
      "Wildlife Conservation",
      "Language Learning",
      "Problem Solving",
      "Natural World"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "diego.jpg"
  },
  {
    "title": "Digimon: Digital Monsters",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-14",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Teamwork",
      "Friendship",
      "Perseverance",
      "Entertainment",
      "Adventure",
      "Fantasy Elements",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional 2D Anime-style Animation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "digimon-digital-monsters.jpg"
  },
  {
    "title": "Dino Dana",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-9",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Paleontology",
      "Science",
      "Curiosity",
      "Problem Solving",
      "Critical Thinking",
      "Natural History",
      "Ecosystems"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with CGI Dinosaurs. Color Palette: Natural colors with realistic environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "dino-dana.jpg"
  },
  {
    "title": "Dino Ranch",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Teamwork",
      "Responsibility",
      "Problem Solving",
      "Adventure",
      "Dinosaurs"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "dino-ranch.jpg"
  },
  {
    "title": "Dinosaur train",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Friendship",
      "Paleontology",
      "Natural History",
      "Dinosaurs",
      "Natural World",
      "Exploration",
      "Science"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "dinosaur-train.jpg"
  },
  {
    "title": "Dinotrux",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Teamwork",
      "Entertainment",
      "Problem Solving",
      "Engineering Concepts",
      "Dinosaurs",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed characters and environments. Color Palette: Bright and vivid colors with metallic textures.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "dinotrux.jpg"
  },
  {
    "title": "Doc McStuffins",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Health & Well-being",
      "Social-Emotional",
      "Problem Solving",
      "Emotional Intelligence",
      "Medical Care",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with soft, rounded designs. Color Palette: Bright and cheerful colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "doc-mcstuffins.jpg"
  },
  {
    "title": "Doggyland",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Dance",
      "sing-a-long",
      "Cognitive Development",
      "Literacy",
      "Numeracy",
      "Colours",
      "Shapes",
      "Animals",
      "Social-Emotional",
      "Repetitive Learning",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "3D Animation with Bright Colors and Anthropomorphic Dogs",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "doggyland.jpg"
  },
  {
    "title": "Dora the Explorer (2000-2014)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "2-6",
    "seasons": "8 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Language Learning",
      "Problem Solving",
      "Geography",
      "Teamwork",
      "Cognitive Development",
      "Adventure"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "dora-the-explorer-(2000-2014).jpg"
  },
  {
    "title": "Dragon Ball",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "10-16",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Positive Role Models",
      "Entertainment",
      "Adventure",
      "Martial Arts",
      "Fantasy Elements",
      "Morality",
      "Mild Violent themes",
      "Mild Fantasy Violence",
      "Mild Peril"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Hand-drawn animation (Anime style).",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "dragon-ball.jpg"
  },
  {
    "title": "Dragon Tales",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Emotional Intelligence",
      "Teamwork",
      "Social Development",
      "Social-Emotional",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with soft designs. Color Palette: Pastel colors with whimsical settings.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "dragon-tales.jpg"
  },
  {
    "title": "Duck & Goose",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Problem Solving",
      "Friendship",
      "Social-Emotional",
      "Teamwork",
      "Emotional Intelligence",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "duck-and-goose.jpg"
  },
  {
    "title": "Ed Edd n Eddy",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cause and Effect",
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Humor",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional 2D Animation with exaggerated designs. Color Palette: Bright colors with bold outlines.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "ed-edd-n-eddy.jpg"
  },
  {
    "title": "Elena of Avalor",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "5-9",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Positive Role Models",
      "Leadership",
      "Responsibility",
      "Emotional Intelligence",
      "Morality"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed designs. Color Palette: Bright and vibrant colors with cultural motifs.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "elena-of-avalor.jpg"
  },
  {
    "title": "Elmo's World",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "14 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Preschool-Basics",
      "Motor Skills",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Numeracy",
      "Literacy",
      "Colours",
      "Shapes"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "elmos-world.jpg"
  },
  {
    "title": "English Tree",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Repetitive Learning",
      "Literacy",
      "Phonics",
      "Vocabulary",
      "Music",
      "Numeracy",
      "Colours",
      "Shapes",
      "Cognitive Development",
      "Language Learning",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "2D and 3D Animation with Bright Colors and Simple Characters",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "english-tree.jpg"
  },
  {
    "title": "Ernst, Bobbie en de rest",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Humor",
      "Social Development",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Dutch children's show, Live-Action with comedic elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "ernst-bobbie-en-de-rest.jpg"
  },
  {
    "title": "Fireman Sam (1987)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "15 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "Community Service",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Stop-Motion animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "fireman-sam-(1987).jpg"
  },
  {
    "title": "Fireman Sam (2008)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "Community Service",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "fireman-sam-(2008).jpg"
  },
  {
    "title": "Franklin (1997-2004)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Hand-drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "franklin-(1997-2004).jpg"
  },
  {
    "title": "Franklin and Friends (2011)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Teamwork",
      "Relatable Situations",
      "Problem Solving"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename":   "franklin-and-friends-(2011).jpg"
  },
  {
    "title": "Frog and Toad",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence",
      "Nature",
      "Relatable Situations",
      "Patience"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a hand-drawn aesthetic.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "frog-and-toad.jpg"
  },
  {
    "title": "Gabby's Dollhouse",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "10 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action and 3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "gabbys-dollhouse.jpg"
  },
  {
    "title": "Gecko’s Garage",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Engineering Concepts",
      "Mechanics",
      "Teamwork",
      "Shapes",
      "Colours"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "geckos-garage.jpg"
  },
  {
    "title": "Genevieve playhouse",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Teaching with Toys",
      "Preschool-Basics",
      "Colours",
      "Numeracy",
      "Literacy",
      "Multilingual Learning",
      "Entertainment",
      "Humor",
      "Vocabulary"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action Toy Demonstrations with Bright Colors",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "genevieve-playhouse.jpg"
  },
  {
    "title": "Get Rolling with Otis",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Perseverance",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "get-rolling-with-otis.jpg"
  },
  {
    "title": "Gigantosaurus",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Adventure",
      "Problem Solving",
      "Teamwork",
      "Dinosaurs",
      "Entertainment"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "gigantosaurus-may.jpg"
  },
  {
    "title": "GirlsTtoyZZ",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Teaching with Toys",
      "Early Childhood experiences",
      "Sensory Exploration",
      "Entertainment",
      "Toy Review"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "girlsttoyzz.jpg"
  },
  {
    "title": "Go Go! Cory Carson",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "7 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Problem Solving",
      "Relatable Situations",
      "Emotional Intelligence",
      "Vehicle Themes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "go-go-cory-carson.jpg"
  },
  {
    "title": "Go, Dog. Go!",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Critical Thinking",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with stylized character designs based on the original book illustrations. Color Palette: Bright and vivid colors with a focus on primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "go-dog-go!.jpg"
  },
  {
    "title": "Gracie's Corner",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural Appreciation",
      "Cultural & Social",
      "Learning through Songs",
      "Early Childhood experiences",
      "Literacy",
      "Numeracy",
      "Social-Emotional",
      "sing-a-long",
      "Dance",
      "Music",
      "Healthy Eating",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "2D animation with bright, colorful visuals and rhythmic, energetic choreography.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "gracies-corner.jpg"
  },
  {
    "title": "Grizzy and the Lemmings (2016-present)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Communication & Expression",
      "Entertainment",
      "Problem Solving",
      "Humor",
      "Slapstick Comedy",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Very Low",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "grizzy-and-the-lemmings-(2016-present).jpg"
  },
  {
    "title": "Guess How Much I Love You",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Emotional Intelligence",
      "Friendship",
      "Family Values",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "guess-how-much-i-love-you.jpeg"
  },
  {
    "title": "Gullah, Gullah Island",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Life Lessons",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "sing-a-long",
      "Dance",
      "Social-Emotional",
      "Social Development",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with musical elements. Color Palette: Bright and vibrant colors reflecting the cultural setting.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "gullah-gullah-island.jpg"
  },
  {
    "title": "Gumby: The Movie",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Stop-Motion Animation using clay figures (claymation). Color Palette: Varied colors with a mix of bright and muted tones. Unique aesthetic uncommon in the present day.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Varies",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "gumby-the-movie.jpg"
  },
  {
    "title": "Handyman Hal",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Life Lessons",
      "Engineering Concepts",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Vehicle Themes",
      "STEM",
      "Farm Life",
      "Agriculture",
      "Mechanics",
      "Curiosity",
      "Entertainment",
      "Humor",
      "Safety"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Primarily live-action with occasional animated elements to highlight tools or processes.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "handyman-hal.jpg"
  },
  {
    "title": "He-Man and the Masters of the Universe",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Positive Role Models",
      "Entertainment",
      "Responsibility",
      "Morality",
      "Adventure",
      "Fantasy Elements",
      "Mild Violent themes",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with action-oriented designs. Color Palette: Bright and vivid colors with bold contrasts.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "he-man-and-the-masters-of-the-universe.jpeg"
  },
  {
    "title": "Helper Cars",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Teamwork",
      "Colours",
      "Shapes",
      "Problem Solving",
      "Vehicle Recognition",
      "Entertainment",
      "Mechanics"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation with Bright Colors and Friendly Vehicle Characters",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "helper-cars.jpg"
  },
  {
    "title": "Hero Elementary",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Superhero Themes",
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Curiosity",
      "Critical Thinking",
      "Science"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "hero-elementary.jpeg"
  },
  {
    "title": "Hey Bear Sensory",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "0-3",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Sensory Exploration",
      "Colours",
      "Motor Skills",
      "Music"
    ],
    "interactivity_level": "Low",
    "animation_style": "High-Contrast 3D Animation with Bright Colors and Simple Shapes",
    "dialogue_intensity": "None",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "hey-bear-sensory.jpg"
  },
  {
    "title": "Hey Duggee",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Merit Reward systems",
      "Teamwork",
      "Problem Solving",
      "Perseverance"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with simple, geometric shapes and bold outlines. Bright and bold colors with clear contrasts.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "hey-duggee.jpg"
  },
  {
    "title": "Horrid Henry",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Cause and Effect",
      "Morality",
      "Humor",
      "Entertainment",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "horrid-henry.jpg"
  },
  {
    "title": "Hudson’s Playground",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Cultures & Traditions",
      "Life Lessons",
      "Farm Life",
      "Machinery",
      "Agriculture",
      "Outdoor Exploration",
      "Problem Solving",
      "Family Relationships",
      "Curiosity"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-Action Family Videos",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "hudsons-playground.jpg"
  },
  {
    "title": "If You Give a Mouse a Cookie(2015-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Cause and Effect",
      "Creativity & Imagination",
      "Problem Solving",
      "Curiosity",
      "Critical Thinking",
      "Cognitive Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "if-you-give-a-mouse-a-cookie(2015-present).jpg"
  },
  {
    "title": "In the Night Garden (07-09)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Sensory Exploration",
      "Repetitive Learning",
      "Motor Skills",
      "Cognitive Development"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-action costume performances combined with CGI-enhanced environments",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "in-the-night-garden-(07-09).jpg"
  },
  {
    "title": "It's a Big Big World",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Science",
      "Friendship",
      "Nature",
      "Ecosystems",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with CGI backgrounds.Color Palette: Soft, natural colors with earthy tones.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "its-a-big-big-world.jpeg"
  },
  {
    "title": "Johnson & Friends",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live action with costumed characters",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "johnson-and-friends.jpg"
  },
  {
    "title": "JoJo & Gran Gran",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultures & Traditions",
      "Family Relationships",
      "Family Values",
      "Relatable Situations",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a hand-drawn aesthetic.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename":   "jojo-and-gran-gran.jpg"
  },
  {
    "title": "Juf Roos",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Learning through Songs",
      "Dutch Language",
      "Language Learning",
      "sing-a-long",
      "Dance",
      "Literacy",
      "Music"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action with Colorful Costumes and Simple Sets",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "juf-roos.jpeg"
  },
  {
    "title": "JunyTony - Songs and Stories",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Learning from Mistakes",
      "Learning through Songs",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Literacy",
      "Numeracy",
      "sing-a-long",
      "Dance",
      "Phonics",
      "Vocabulary",
      "Music",
      "Routine",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Animation with Vibrant Colors and Cute Characters",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "junytony-songs-and-stories.jpg"
  },
  {
    "title": "KarazahChannel",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Cultural & Social",
      "Language Learning",
      "Arabic Language Learning",
      "Literacy",
      "sing-a-long",
      "Reading Comprehension",
      "Music",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "Mix of 3D CGI animations for the characters and settings",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "karazahchannel.jpg"
  },
  {
    "title": "Katuri tv",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Nature",
      "Family Relationships",
      "Animals",
      "Nature Sounds",
      "Problem Solving",
      "Social Development",
      "Entertainment",
      "Humor",
      "Social-Emotional"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "katuri-tv.jpg"
  },
  {
    "title": "Kazwa and Bilal",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Cultural & Social",
      "Curiosity",
      "Social-Emotional",
      "Relatable Situations",
      "Religion",
      "Morality"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "kazwa-and-bilal.jpeg"
  },
  {
    "title": "Kid-E-Cats",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Friendship",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Family Relationships",
      "Family Values",
      "Social-Emotional",
      "Social Development",
      "Relatable Situations"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "kid-e-cats.jpeg"
  },
  {
    "title": "Kids 2 kids",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "5-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Learn Through Play",
      "Creativity & Imagination",
      "Social-Emotional",
      "Humor",
      "Outdoor Exploration",
      "DIY Projects",
      "Curiosity",
      "Silly Comedy"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-Action Family Videos",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "kids-to-kids.jpg"
  },
  {
    "title": "Kipper(1997-2000)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Friendship"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional hand-drawn 2D animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low",
    "image_filename": "kipper(1997-2000).jpg"
  },
  {
    "title": "Kiri and Lou",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Friendship",
      "Nature",
      "Emotional Intelligence",
      "Mindfulness"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-motion animation using clay and paper cutouts",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "kiri-and-lou.jpg"
  },
  {
    "title": "Laurie Berkner",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Physical Fitness",
      "Early Childhood experiences",
      "Music",
      "sing-a-long",
      "Social-Emotional",
      "Literacy",
      "Entertainment",
      "Dance"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-Action with Colorful Green Screen Animations",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "laurie-berkner.jpg"
  },
  {
    "title": "Lazytown",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Physical Fitness",
      "Positive Role Models",
      "Healthy Eating",
      "Teamwork",
      "Problem Solving",
      "Exercise",
      "Motor Skills",
      "sing-a-long",
      "Dance",
      "Perseverance"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "lazytown.jpg"
  },
  {
    "title": "Leo the Truck",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Vehicle Themes",
      "Colours",
      "Shapes",
      "Vehicle Recognition",
      "Mechanics",
      "Curiosity"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "leo-the-truck.jpg"
  },
  {
    "title": "Leo the wildlife ranger",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Wildlife Exploration",
      "Wildlife Conservation",
      "Animals",
      "Animal Behaviour",
      "Curiosity",
      "Problem Solving",
      "Nature",
      "Natural World",
      "Responsibility"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation with detailed depictions of animals and environments.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "leo-the-wild-live-ranger.jpg"
  },
  {
    "title": "Les' Copaque Production - Upin & Ipin",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "4-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural & Social",
      "Learning from Mistakes",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Morality",
      "Responsibility",
      "Relatable Situations",
      "Family Relationships",
      "Family Values",
      "Social-Emotional",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with vibrant colors and detailed environments reflecting Malaysian village life.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "les-copaque-production-upin-and-ipin.jpg"
  },
  {
    "title": "LifeKids (Blinky’s Bible adventures)",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "Any",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Religious Teachings",
      "Cultures & Traditions",
      "Cultural & Social",
      "Cause and Effect",
      "Life Lessons",
      "Spiritual Development",
      "Religion",
      "Family Relationships",
      "Relatable Situations",
      "Social-Emotional",
      "Morality",
      "sing-a-long",
      "Repetitive Learning",
      "Dance"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename":   "lifekids-(blinkys-bible-adventures).jpg"
  },
  {
    "title": "Listener Kids",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Cultures & Traditions",
      "Cultural & Social",
      "Spiritual Development",
      "Faith",
      "Biblical Stories",
      "Religion",
      "Christian Values",
      "Morality",
      "sing-a-long",
      "Social Development",
      "Positive Mindset"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action and animated elements, featuring colorful visuals and friendly characters.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "listener-kids.jpeg"
  },
  {
    "title": "Little Angel",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "1 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Routine",
      "Social-Emotional",
      "sing-a-long",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "little-angel.jpg"
  },
  {
    "title": "Little Bear",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Family Relationships",
      "Social Development",
      "Emotional Intelligence",
      "Family Values"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional Hand-Drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "little-bear.jpg"
  },
  {
    "title": "Little Einsteins (2005-2009)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Music",
      "Art",
      "Problem Solving",
      "Cognitive Development",
      "Teamwork",
      "History"
    ],
    "interactivity_level": "High",
    "animation_style": "digital 2D animation. CGI for the Rocket ship and certain elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "little-einsteins-(2005-2009).jpg"
  },
  {
    "title": "Llama Llama (2018-2019)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Social-Emotional",
      "Family Values",
      "Problem Solving",
      "Relatable Situations",
      "Social Development",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "llama-llama-(2018-2019).jpg"
  },
  {
    "title": "Lucas the spider(2021)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Overcoming Fears",
      "Emotional Intelligence",
      "Relatable Situations",
      "Creativity & Imagination",
      "Recurring Antagonist"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "lucas-the-spider(2021).jpg"
  },
  {
    "title": "Lyla in the loop",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "STEM",
      "Problem Solving",
      "Motor Skills",
      "Curiosity",
      "Critical Thinking",
      "Relatable Situations"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "lyla-in-the-loop.jpg"
  },
  {
    "title": "Maddie's Do You Know?",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Curiosity",
      "Science",
      "Technology",
      "Exploration",
      "Engineering Concepts",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "maddies-do-you-know.jpeg"
  },
  {
    "title": "Maggie and the Ferocious Beast",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with simple, childlike designs. Color Palette: Bright and pastel colors with minimal backgrounds.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "maggie-and-the-ferocious-beast.jpg"
  },
  {
    "title": "maizenofficial",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "7-12, 12+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Arts & Crafts",
      "Creativity & Imagination",
      "Building and Design",
      "Entertainment",
      "Humor",
      "Problem Solving",
      "Critical Thinking",
      "MineCraft",
      "Interactive Game Elements"
    ],
    "interactivity_level": "Low",
    "animation_style": "Real In Game Video Footage",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "maizenofficial.jpg"
  },
  {
    "title": "Marcus Level",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-11",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Fantasy Elements",
      "Problem Solving",
      "Perseverance",
      "Adventure",
      "Teamwork",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "marcus-level.jpeg"
  },
  {
    "title": "Masha and the Bear",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "5 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Patience",
      "Humor",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation with high-quality, detailed visuals",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "masha-and-the-bear.jpg"
  },
  {
    "title": "Mickey Mouse Clubhouse",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Early Childhood experiences",
      "Preschool-Basics",
      "Numeracy",
      "Teamwork",
      "Shapes",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "mickey-mouse-clubhouse.jpeg"
  },
  {
    "title": "Miffy and friends",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Variable/Compilation",
    "themes": [
      "Early Childhood experiences",
      "Social-Emotional",
      "Social Development",
      "Teamwork",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Stop-Motion Animation with Simple Designs, Emphasizes clear shapes and actions easily understood by young viewers.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "miffy-and-friends.jpeg"
  },
  {
    "title": "Milo",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural & Social",
      "Career Exploration",
      "Teamwork",
      "Problem Solving",
      "Responsibility",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "milo.jpg"
  },
  {
    "title": "Minno - Bible Stories for Kids",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-10",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Religious Teachings",
      "Positive Role Models",
      "Spiritual Development",
      "Cultures & Traditions",
      "Cultural & Social",
      "Biblical Stories",
      "Faith",
      "Religion",
      "Christian Values",
      "Morality",
      "Positive Mindset"
    ],
    "interactivity_level": "High",
    "animation_style": "Varies across series, primarily 2D and 3D animations with colorful visuals and relatable character designs.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "minno-bible-stories-for-kids.jpg"
  },
  {
    "title": "Minuscule",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2+, Any",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Environmental Awareness",
      "Storytelling without Dialogue",
      "Creativity & Imagination",
      "Insect Behaviour",
      "Nature",
      "Nature Sounds",
      "Entertainment",
      "Humor",
      "Relaxation",
      "Music",
      "Natural World",
      "ASMR",
      "Silly Comedy",
      "Ecosystems",
      "Slice of Life",
      "Light Hearted"
    ],
    "interactivity_level": "Low",
    "animation_style": "Combination of CGI and Real-Life Backdrops",
    "dialogue_intensity": "None",
    "sound_effects_level": "High",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "minuscule.jpg"
  },
  {
    "title": "Mira, Royal Detective",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Positive Role Models",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Problem Solving",
      "Critical Thinking",
      "Mystery",
      "Adventure",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with Vibrant Colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "mira-royal-detective.jpg"
  },
  {
    "title": "Miss Katie Sings",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Communication & Expression",
      "Cultural & Social",
      "Learning through Songs",
      "Music",
      "sing-a-long",
      "Positive Mindset",
      "Social-Emotional",
      "Courage",
      "Mindfulness",
      "Diversity",
      "Political Leanings"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action Performances with Simple Props and Backgrounds",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low",
    "image_filename": "miss-katie-sings.jpg"
  },
  {
    "title": "Miss Moni",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Preschool-Basics",
      "Early Childhood experiences",
      "Literacy",
      "Numeracy",
      "Vocabulary",
      "Music",
      "Language Learning",
      "Phonics",
      "sing-a-long",
      "Cognitive Development",
      "Auslan (Sign Language)"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action and 2D Animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Varies",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "miss-moni.jpg"
  },
  {
    "title": "Miss Rachel",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "1-4",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Phonics",
      "Language Learning",
      "Speech Development",
      "sing-a-long",
      "Cognitive Development",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "Primarily live-action with Miss Rachel interacting directly with the audience. Some Puppet and 2D Animation use",
    "dialogue_intensity": "High",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "miss-rachel.jpg"
  },
  {
    "title": "Mister Maker",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Positive Role Models",
      "Creativity & Imagination",
      "Arts & Crafts",
      "Curiosity",
      "Motor Skills",
      "Art",
      "Colours"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with colorful crafts and animated segments. Color Palette: Bright and varied colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "mister-maker.jpg"
  },
  {
    "title": "Mister Rogers' Neighbourhood",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "31 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Elementary-Basics",
      "Life Lessons",
      "Social-Emotional",
      "Social Development",
      "Literacy",
      "Emotional Intelligence",
      "Relatable Situations",
      "Relaxation",
      "Community Service",
      "Problem Solving",
      "Critical Thinking",
      "Family Values",
      "sing-a-long",
      "Morality",
      "Friendship",
      "Creativity & Imagination"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with puppet segments. Color Palette: Soft, natural colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "mister-rogers-neighbourhood.jpg"
  },
  {
    "title": "Molly of Denali",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Problem Solving",
      "Adventure",
      "Exploration",
      "Nature",
      "Natural World",
      "Mystery"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with cultural representation. Color Palette: Bright colors reflecting Alaskan landscapes.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "molly-of-denali.jpeg"
  },
  {
    "title": "Moominvalley",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Friendship",
      "Fantasy Elements",
      "Emotional Intelligence",
      "Relaxation"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "moominvalley.jpeg"
  },
  {
    "title": "Moon and Me",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Early Childhood experiences",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-Motion Animation with soft toys. Color Palette: Soft, soothing colors.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "moon-and-me.jpg"
  },
  {
    "title": "Mother goose club",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Creativity & Imagination",
      "Literacy",
      "Numeracy",
      "Language Learning",
      "Speech Development",
      "sing-a-long",
      "Dance",
      "Music",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Colorful Costumes and Simple Sets",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "mother-goose-club.jpg"
  },
  {
    "title": "Mr Bean Cartoon",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Entertainment",
      "Problem Solving",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Digital Animation with exaggerated expressions. Color Palette: Bright colors with bold contrasts.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "mr-bean-cartoon.jpeg"
  },
  {
    "title": "Mr. Monkey, Monkey Mechanic",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "STEM",
      "Mechanics",
      "Problem Solving",
      "Engineering Concepts"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "mr-monkey-monkey-mechanic.jpg"
  },
  {
    "title": "MyGov Sign Language for Kids-ASL",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "0-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Memory Exercises",
      "American Sign Language",
      "Communication & Expression",
      "Deaf Community",
      "Visual Demonstrations",
      "Language Learning",
      "Cognitive Development",
      "Motor Skills",
      "Literacy"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action demonstrations combined with animated segments to illustrate signs and concepts effectively.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "mygosignlanguageforkids-asl.jpg"
  },
  {
    "title": "Nanalan",
    "stimulation_score": 1,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Early Childhood experiences",
      "Creativity & Imagination",
      "Preschool-Basics",
      "Communication & Expression",
      "Vocabulary",
      "Social-Emotional",
      "Social Development",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Puppet-based animation with simple sets and characters, creating a unique and engaging visual experience",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "nanalan.jpeg"
  },
  {
    "title": "Nick Cope's Popcast",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Communication & Expression",
      "Creativity & Imagination",
      "Social-Emotional",
      "Emotional Intelligence",
      "sing-a-long",
      "Dance",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action educational series with some animation and CGI. Color Palette: Natural colors with bright visuals during explanations.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "nick-copes-popcast.jpg"
  },
  {
    "title": "Ninja Kids",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "5-12",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Superhero Themes",
      "Creativity & Imagination",
      "Positive Role Models",
      "Physical Fitness",
      "Exercise",
      "Adventure",
      "Entertainment",
      "Skit Comedy",
      "Choreographed Action Scenes",
      "Outdoor Exploration",
      "Courage",
      "Confidence Building",
      "Martial Arts",
      "Mild Violent themes",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action videos with dynamic editing and occasional special effects to enhance the viewing experience.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "ninja-kids.jpg"
  },
  {
    "title": "Ninjago",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Complex & Emotional Themes",
      "Teamwork",
      "Perseverance",
      "Courage",
      "Problem Solving",
      "Morality",
      "Entertainment",
      "Mild Fantasy Violence",
      "Mild Violent themes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "ninjago.jpg"
  },
  {
    "title": "Noddy Original Series (1998)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Social Development"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Stop-Motion with simple models. Color Palette: Bright but soft colors.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "noddy-original-series-(1998).jpeg"
  },
  {
    "title": "Noddy, Toyland Detective (2016)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Social Development"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "noddy-toyland-detective-(2016).jpeg"
  },
  {
    "title": "Noodle & Pals",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Social-Emotional",
      "Language Learning",
      "Cognitive Development",
      "Music",
      "Literacy",
      "Numeracy"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "noodle-and-pals.jpg"
  },
  {
    "title": "Noodle and Bun",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Storytelling without Dialogue",
      "Creativity & Imagination",
      "Humor",
      "Silly Comedy",
      "Captivating Visuals",
      "Friendship",
      "Animals"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogue_intensity": "None",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "noodle-and-bun.jpg"
  },
  {
    "title": "Numberblocks (2017-present)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "7 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Elementary-Basics",
      "Numeracy",
      "Problem Solving",
      "Math",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "numberblocks-(2017-present).jpg"
  },
  {
    "title": "Odd Squad",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Math",
      "Numeracy",
      "Teamwork",
      "Critical Thinking",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of live-action and CGI animation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "odd-squad.jpg"
  },
  {
    "title": "Oggy and the Cockroaches",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "7 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Entertainment",
      "Slapstick Comedy",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with exaggerated and dynamic character movements.",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "oggy-and-the-cockroaches.jpg"
  },
  {
    "title": "Olivia",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Perseverance"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a unique visual style resembling charcoal drawings with splashes of color.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "olivia.jpg"
  },
  {
    "title": "Omar and hana",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultural & Social",
      "Cultures & Traditions",
      "Religion",
      "Family Values",
      "Morality",
      "Emotional Intelligence",
      "sing-a-long",
      "Relatable Situations",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant but not overwhelming.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "omar-and-hana.jpg"
  },
  {
    "title": "One Piece",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "12+",
    "seasons": "1500+ Episodes",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Creativity & Imagination",
      "Complex & Emotional Themes",
      "Teamwork",
      "Perseverance",
      "Morality",
      "Entertainment",
      "Humor",
      "Slapstick Comedy",
      "Emotional Intelligence",
      "Friendship",
      "Social-Emotional",
      "Adventure",
      "Mild Violent themes",
      "Mild Fantasy Violence",
      "Mild Peril",
      "Mild Mature Themes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D Animation with a distinctive anime style, featuring exaggerated expressions, dynamic action sequences, and detailed environments.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "one-piece.jpg"
  },
  {
    "title": "Oswald",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Social-Emotional",
      "Social Development",
      "Critical Thinking",
      "Conflict Resolution",
      "Emotional Intelligence",
      "Relatable Situations",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "oswald.jpg"
  },
  {
    "title": "Out of the Box",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Arts & Crafts",
      "Music",
      "Motor Skills",
      "Social-Emotional",
      "Colours",
      "Shapes",
      "Art"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "out-of-the-box.jpeg"
  },
  {
    "title": "Pajanimals",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Overcoming Fears",
      "Bedtime Routines",
      "Social-Emotional",
      "Relaxation",
      "Family Relationships",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with colorful characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "Pajanimals.jpg"
  },
  {
    "title": "Paw patrol",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "11 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Community Service",
      "Teamwork",
      "Problem Solving",
      "Courage"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "paw-patrol.jpeg"
  },
  {
    "title": "Peg+Cat",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Math",
      "Problem Solving",
      "Critical Thinking",
      "Adventure",
      "Perseverance"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a hand-drawn, sketch-like aesthetic.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "peg-cat.jpeg"
  },
  {
    "title": "Peppa pig (2004-present)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "8 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Friendship",
      "Routine",
      "Social Development",
      "Relatable Situations",
      "Tantrums",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "peppa-pig-(2004-present).jpg"
  },
  {
    "title": "Pete The Cat",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Music",
      "Emotional Intelligence",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital animation with a hand-drawn look",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "pete-the-cat-3272.jpg"
  },
  {
    "title": "Peter Rabbit(2012-2016)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Adventure",
      "Problem Solving",
      "Nature",
      "Teamwork",
      "Courage"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "peter-rabbit-(2012-2016).jpg"
  },
  {
    "title": "Phineas and Ferb",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Creativity & Imagination",
      "Problem Solving",
      "Curiosity",
      "Adventure",
      "Humor",
      "Family Relationships",
      "Entertainment",
      "Engineering Concepts",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Digital Animation with stylized, geometric designs. Bright and vivid colors with detailed backgrounds.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "phineas-and-ferb.jpeg"
  },
  {
    "title": "Pingu",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "6 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Social-Emotional",
      "Family Relationships",
      "Emotional Intelligence",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional Stop-Motion (claymation)",
    "dialogue_intensity": "None",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "pingu.jpeg"
  },
  {
    "title": "Pinkalicious & Peterrific",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Art",
      "Music",
      "Problem Solving",
      "Teamwork",
      "Motor Skills"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "pinkalicious-and-peterrific.jpg"
  },
  {
    "title": "Pip and Posy",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cause and Effect",
      "Friendship",
      "Social-Emotional",
      "Problem Solving",
      "Emotional Intelligence",
      "Conflict Resolution",
      "Relatable Situations",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "pip-and-posy.jpeg"
  },
  {
    "title": "Pipi Mā",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Te reo Māori language development",
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Māori immersion preschool",
      "Cultural & Social",
      "Numeracy",
      "Literacy",
      "Traditional Narratives",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Animation with Cultural Themes and Soft Colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "pipi-mā.jpg"
  },
  {
    "title": "PJ Masks",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Superhero Themes",
      "Creativity & Imagination",
      "Entertainment",
      "Morality",
      "Social Development",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Very High",
    "image_filename": "pj-masks.jpeg"
  },
  {
    "title": "Planet earth",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "8+",
    "seasons": "1 Season",
    "avg_episode_length": "Very Long (>30m)",
    "themes": [
      "Environmental Awareness",
      "Natural World",
      "Nature",
      "Natural History",
      "Wildlife Exploration",
      "Science",
      "Realistic Depictions of Nature"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Live-action nature documentary with high-definition footage. Natural colors showcasing diverse ecosystems.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "planet-earth.jpeg"
  },
  {
    "title": "Play School",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "59 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Preschool-Basics",
      "Numeracy",
      "Literacy",
      "Shapes",
      "Colours",
      "Social-Emotional",
      "Problem Solving",
      "sing-a-long"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "play-school.jpeg"
  },
  {
    "title": "Pocoyo",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-4",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Cultural & Social",
      "Language Learning",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Emotional Intelligence",
      "Curiosity",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "pocoyo.jpeg"
  },
  {
    "title": "Pokemon",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "25 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Overcoming Fears",
      "Friendship",
      "Teamwork",
      "Wildlife Exploration",
      "Entertainment",
      "Humor",
      "Exploration",
      "Perseverance",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "traditional and Digital hand-drawn 2D animation. Anime style",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "pokemon.jpg"
  },
  {
    "title": "Postman Pat (1981–2008)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "9 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Community Service",
      "Problem Solving",
      "Responsibility",
      "Teamwork",
      "Entertainment"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional Stop-Motion animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "postman-pat-(1981-2008).jpg"
  },
  {
    "title": "Postman Pat: Special Delivery Service (2008–2017)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Community Service",
      "Problem Solving",
      "Responsibility",
      "Teamwork",
      "Entertainment"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "postman-pat-special-delivery-service-(2008-2017).jpg"
  },
  {
    "title": "Puffin Rock",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Environmental Awareness",
      "Nature",
      "Wildlife Exploration",
      "Family Relationships",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "puffin-rock.jpg"
  },
  {
    "title": "Puppy Dog Pals",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Adventure",
      "Problem Solving",
      "Teamwork",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "puppy-dog-pals.jpeg"
  },
  {
    "title": "Raa Raa the Noisy Lion",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Communication & Expression",
      "Social-Emotional",
      "Social Development",
      "Friendship",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with a soft aesthetic. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "raa-raa-the-noisy-lion.jpg"
  },
  {
    "title": "Rainbow Ruby",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Career Exploration",
      "Curiosity",
      "Emotional Intelligence",
      "Fantasy Elements",
      "Problem Solving",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "rainbow-ruby.jpg"
  },
  {
    "title": "Rapunzel's Tangled Adventure",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Life Lessons",
      "Overcoming Fears",
      "Adventure",
      "Courage",
      "Friendship",
      "Emotional Intelligence",
      "Problem Solving",
      "Perseverance",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate",
    "image_filename": "rapunzels-tangled-adventure.jpg"
  },
  {
    "title": "RC Action Channel",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2+, Any",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Engineering Concepts",
      "Vehicle Themes",
      "Vehicle Recognition",
      "Machinery",
      "Relaxation",
      "Entertainment",
      "Hobbies",
      "Mechanics"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-action footage of RC vehicles in operation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "rc-action-channel.jpeg"
  },
  {
    "title": "Reading rainbow",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "5-9",
    "seasons": "16 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Cultural Appreciation",
      "Life Lessons",
      "Positive Role Models",
      "Creativity & Imagination",
      "Social-Emotional",
      "Literacy",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of Live-Action and 2D Animation. Color Palette: Bright and primary colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "reading-rainbow.jpg"
  },
  {
    "title": "Ready, Steady, Wiggle!",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "6 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Physical Fitness",
      "Elementary-Basics",
      "sing-a-long",
      "Dance",
      "Music",
      "Friendship",
      "Motor Skills",
      "Repetitive Learning",
      "Entertainment",
      "Numeracy",
      "Literacy",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "ready-steady-wiggle.jpg"
  },
  {
    "title": "Reef School",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Environmental Awareness",
      "Ecosystems",
      "Marine Biology",
      "Curiosity",
      "Social Development",
      "Emotional Intelligence",
      "Wildlife Conservation",
      "Natural World",
      "Teamwork"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "reef-school.jpg"
  },
  {
    "title": "Rhyme Time Town",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Language Learning",
      "Literacy",
      "sing-a-long",
      "Cognitive Development",
      "Social-Emotional",
      "Repetitive Learning",
      "Music"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with extremely bright and vivid colors.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "rhyme-time-town.jpg"
  },
  {
    "title": "Robocar Poli",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural & Social",
      "Safety",
      "Teamwork",
      "Problem Solving",
      "Adventure",
      "Community Service",
      "Social Development",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "robocar-poli.jpg"
  },
  {
    "title": "Rolie Polie Olie",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Adventure",
      "Social-Emotional",
      "Critical Thinking"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "rolie-polie-olie.jpg"
  },
  {
    "title": "Rosie & Jim",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "8 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Preschool-Basics",
      "Creativity & Imagination",
      "Repetitive Learning",
      "Language Learning",
      "sing-a-long",
      "Problem Solving",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action puppetry with colorful characters.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "rosie-and-jim.jpg"
  },
  {
    "title": "Rosie's Rules",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Social-Emotional",
      "Problem Solving",
      "Family Relationships",
      "Responsibility",
      "Teamwork",
      "Social Development",
      "Family Values",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "rosies-rules.jpg"
  },
  {
    "title": "Rugrats",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "9 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social Development",
      "Social-Emotional",
      "Relatable Situations",
      "Emotional Intelligence",
      "Problem Solving",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with a distinctive, sketchy style. Muted and earthy tones, reflecting a somewhat realistic environment.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "rugrats.jpg"
  },
  {
    "title": "Rugrats (2021 Reboot)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social Development",
      "Social-Emotional",
      "Relatable Situations",
      "Emotional Intelligence",
      "Problem Solving",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "rugrats-(2021-reboot).jpg"
  },
  {
    "title": "Ryan's World",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "0-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Science",
      "Creativity & Imagination",
      "Learn Through Play",
      "STEM",
      "Geography",
      "Numeracy",
      "Unboxing Videos",
      "Entertainment",
      "Humor",
      "Silly Comedy",
      "Family Relationships",
      "Family Values",
      "Teamwork",
      "Toy Review"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-Action with Bright Colors, High Energy, and Occasional Animations",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "ryans-world.jpeg"
  },
  {
    "title": "Sagwa, the Chinese Siamese Cat",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Cultures & Traditions",
      "Cultural & Social",
      "Friendship",
      "Problem Solving",
      "Family Values"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D animation with a hand-drawn look.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "sagwa-the-chinese-siamese-cat.jpeg"
  },
  {
    "title": "Sarah and Duck",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Relatable Situations",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital animation with a hand-drawn look",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "sarah-and-duck.jpeg"
  },
  {
    "title": "Scooby-Doo, Where Are You! (1969–1970)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "traditional hand-drawn 2D animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Low",
    "image_filename": "scooby-doo-where-are-you-(1969-1970).jpg"
  },
  {
    "title": "Sea of love",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Teamwork",
      "Marine Biology",
      "Wildlife Conservation",
      "Friendship",
      "Natural World",
      "Responsibility",
      "Social-Emotional",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "sea-of-love.jpg"
  },
  {
    "title": "Sesame Street (1969-present)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "54 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Cultural & Social",
      "STEM",
      "Elementary-Basics",
      "Cultures & Traditions",
      "Social Development",
      "Routine",
      "Motor Skills",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "Various Art Styles",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "sesame-street-(1969-present).jpg"
  },
  {
    "title": "Shaun the Sheep",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "6 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Teamwork"
    ],
    "interactivity_level": "Low",
    "animation_style": "Traditional Stop-Motion (claymation) digital enhancements may be used for post-production",
    "dialogue_intensity": "None",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "shaun-the-sheep.jpg"
  },
  {
    "title": "Sid the Science Kid",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Critical Thinking",
      "Problem Solving",
      "Science",
      "Motor Skills",
      "Relatable Situations",
      "Curiosity"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with Motion Capture",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "sid-the-science-kid.jpg"
  },
  {
    "title": "Silly Miss Lily (Paisley's Corner)",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Positive Engaging Screen-Time",
      "Preschool-Basics",
      "Numeracy",
      "Colours",
      "Shapes",
      "Social-Emotional",
      "sing-a-long",
      "Literacy"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Props",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "silly-miss-lily(paisleys-corner).jpg"
  },
  {
    "title": "Simon",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "8 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Friendship",
      "Family Relationships",
      "Emotional Intelligence",
      "Social-Emotional",
      "Problem Solving",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate-High",
    "image_filename": "simon.jpeg"
  },
  {
    "title": "Something Special: Hello Mr Tumble",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-6",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Early Childhood experiences",
      "Social-Emotional",
      "Emotional Intelligence",
      "Language Learning",
      "Makaton Sign Language",
      "Learning Disabilities"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "something-special-hello-mr-tumble.jpeg"
  },
  {
    "title": "Sonic the Hedgehog",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Perseverance",
      "Entertainment",
      "Humor",
      "Courage",
      "Adventure",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "sonic-the-hedgehog.jpg"
  },
  {
    "title": "Spanish with liz",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "0-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Learning through Songs",
      "Spanish Language",
      "Language Learning",
      "Music",
      "Vocabulary",
      "Phonics",
      "Emotional Intelligence",
      "Routine",
      "Healthy Eating"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Educational Props and Colorful Backgrounds",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "spanish-with-liz.jpg"
  },
  {
    "title": "Spidey and his amazing friends (2021-present)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Positive Role Models",
      "Teamwork",
      "Responsibility",
      "Entertainment",
      "Mischievous Behaviour",
      "Mild Peril"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Very High",
    "image_filename": "spidey-and-his-amazing-friends-(2021-present).jpg"
  },
  {
    "title": "Spirit Riding Free",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "8 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Responsibility",
      "Perseverance",
      "Adventure",
      "Horses",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "spirit-riding-free.jpg"
  },
  {
    "title": "SpongeBob SquarePants",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-12",
    "seasons": "15 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Friendship",
      "Problem Solving",
      "Entertainment",
      "Surreal Imagery",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D animation with expressive and exaggerated character designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "spongebob-squarepants.jpg"
  },
  {
    "title": "Star Wars: Young Jedi Adventures",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cause and Effect",
      "Cultures & Traditions",
      "Positive Role Models",
      "Entertainment",
      "Courage",
      "Adventure",
      "Conflict Resolution",
      "Friendship",
      "Teamwork",
      "Responsibility",
      "Fantasy Elements",
      "Morality",
      "Mild Intense Scenes",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "star-wars-young-jedi-adventures.jpeg"
  },
  {
    "title": "Stella and Sam",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Exploration",
      "Emotional Intelligence",
      "Curiosity",
      "Family Relationships",
      "Social-Emotional",
      "Social Development",
      "Natural World"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "stella-and-sam.jpg"
  },
  {
    "title": "Steve and Maggie",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Every Day Concepts",
      "Preschool-Basics",
      "Creativity & Imagination",
      "Language Learning",
      "Vocabulary",
      "Phonics",
      "Repetitive Learning",
      "Literacy",
      "Social Development",
      "Social-Emotional",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Puppet Interaction and Simple Animations",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "steve-and-maggie.jpg"
  },
  {
    "title": "Stick man",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Family Values",
      "Perseverance",
      "Family Relationships",
      "Courage",
      "Social-Emotional",
      "Mild Peril"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation delivered slowly and smoothly",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "stick-man.jpg"
  },
  {
    "title": "Stillwater (2020-present)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Mindfulness",
      "Emotional Intelligence",
      "Problem Solving",
      "Social-Emotional",
      "Conflict Resolution"
    ],
    "interactivity_level": "High",
    "animation_style": "Mix of 3D CGI animations for the characters and settings",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate-High",
    "image_filename": "stillwater-(2020-present).jpg"
  },
  {
    "title": "Story Time Book: Read-Along",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "1 Season",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Literacy",
      "Language Learning",
      "Reading Comprehension",
      "Cognitive Development",
      "Repetitive Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "Illustrations or Minimal Animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Low",
    "image_filename": "story-time-book-read-along.jpg"
  },
  {
    "title": "Storybots",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Literacy",
      "Reading Comprehension",
      "Problem Solving",
      "Curiosity",
      "Social Development",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "Combination of 2D and 3D Animation with Mixed Media",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "storybots.jpg"
  },
  {
    "title": "Super Monsters",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural & Social",
      "Creativity & Imagination",
      "Social-Emotional",
      "Friendship",
      "Emotional Intelligence",
      "Self Discipline",
      "Problem Solving",
      "Social Development",
      "Entertainment"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "super-monsters.jpeg"
  },
  {
    "title": "SUPER SIMPLE SONG",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Preschool-Basics",
      "Learning through Songs",
      "Storytelling without Dialogue",
      "Literacy",
      "Numeracy",
      "Shapes",
      "Colours",
      "sing-a-long",
      "Social Development",
      "Social-Emotional",
      "Dance",
      "Motor Skills",
      "Language Learning",
      "Cognitive Development",
      "Music",
      "Vocabulary"
    ],
    "interactivity_level": "High",
    "animation_style": "2D and 3D Animation with Bright Colors and Simple Characters",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "super-simple-song.jpeg"
  },
  {
    "title": "Super Why!",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Numeracy",
      "Literacy",
      "Problem Solving"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright colors and clear designs. Bright and vivid colors focused on storybook settings.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "super-why.jpeg"
  },
  {
    "title": "Superbook",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Cultural Appreciation",
      "Cause and Effect",
      "Positive Role Models",
      "Religion",
      "Morality",
      "History",
      "Literacy",
      "Courage",
      "Repetitive Learning"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI Animation with Detailed and Dynamic Visuals",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "superbook.jpg"
  },
  {
    "title": "Super Kitties",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Superhero Themes",
      "Teamwork",
      "Problem Solving",
      "Responsibility",
      "Adventure",
      "Entertainment",
      "Friendship"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "superkitties.jpg"
  },
  {
    "title": "Superworm",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Nature",
      "Social Development"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with detailed textures and natural settings. Earthy tones with vivid highlights.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "superworm.jpg"
  },
  {
    "title": "Takaro Tribe",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultures & Traditions",
      "Cultural & Social",
      "Cultural Appreciation",
      "Religion",
      "Literacy",
      "History",
      "Music",
      "Routine",
      "Repetitive Learning",
      "Social-Emotional",
      "Language Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with simple, flat designs. Bright but pastel-like colors with minimal shading.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "takaro-tribe.jpg"
  },
  {
    "title": "Tangled: Before Ever After",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Very Long (>30m)",
    "themes": [
      "Overcoming Fears",
      "Adventure",
      "Friendship",
      "Courage",
      "Social Development",
      "Perseverance",
      "Fantasy Elements",
      "Responsibility",
      "Nature",
      "Mild Peril",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "tangled-before-ever-after.jpeg"
  },
  {
    "title": "Tayo the Little Bus",
    "stimulation_score": 4,
    "platform": "YouTube",
    "target_age_group": "3-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Vehicle Recognition",
      "Social Development",
      "Teamwork",
      "Problem Solving",
      "Community Service",
      "Responsibility",
      "Entertainment",
      "Social-Emotional"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "tayo-the-little-bus.jpg"
  },
  {
    "title": "Team Umizoomi",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Math",
      "Problem Solving",
      "Critical Thinking",
      "Teamwork",
      "Numeracy",
      "Shapes"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "team-umizoomi.jpg"
  },
  {
    "title": "Teen Titans Go!",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "8-12",
    "seasons": "9 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Superhero Themes",
      "Humor",
      "Teamwork",
      "Friendship",
      "Adventure",
      "Entertainment",
      "Surreal Imagery",
      "Mild Mature Themes"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D digital animation with bright colors and exaggerated, stylized designs. Bright and vivid colors with high contrast.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "teen-titans-go.jpeg"
  },
  {
    "title": "Teletubbies (2015-2018)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Repetitive Learning",
      "Sensory Exploration",
      "Routine",
      "Bedtime Routines"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live action costumed. some digital elements",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "High",
    "image_filename":   "teletubbies-(2015-2018).jpg"
  },
  {
    "title": "Teletubbies (1997-2001)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Repetitive Learning",
      "Sensory Exploration",
      "Routine",
      "Bedtime Routines"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live action costumed. some digital elements",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "teletubbies-(1997-2001).jpg"
  },
  {
    "title": "The Adventures of Abney & Teal",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Social-Emotional",
      "Nature"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-motion animation with hand-crafted models.",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "the-adventures-of-abney-and-teal.jpeg"
  },
  {
    "title": "The Adventures of Paddington (2019)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultural & Social",
      "Emotional Intelligence",
      "Problem Solving",
      "Family Values",
      "Social Development",
      "Family Relationships"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-adventures-of-paddington-(2019).jpg"
  },
  {
    "title": "The Adventures of Paddington Bear Original Series (1997–2000)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultural Appreciation",
      "Friendship",
      "Emotional Intelligence",
      "Social-Emotional",
      "Problem Solving"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with a unique style combining stop-motion elements.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "the-adventures-of-paddington-bear-original-series-(1997–2000).jpg"
  },
  {
    "title": "The Adventures of Teddy Ruxpin",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Friendship",
      "Adventure",
      "Problem Solving",
      "Morality",
      "Fantasy Elements",
      "Perseverance",
      "Courage",
      "Social-Emotional",
      "Mild Peril"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-adventures-of-teddy-ruxpin.jpg"
  },
  {
    "title": "The adventures of the gummi bears",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Overcoming Fears",
      "Adventure",
      "Friendship",
      "Fantasy Elements",
      "Problem Solving",
      "Courage",
      "Perseverance",
      "Mild Violent themes"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D Anime-style Animation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "the-adventures-of-the-gummi-bears.jpg"
  },
  {
    "title": "The Backyardigans",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Communication & Expression",
      "Creativity & Imagination",
      "Teamwork",
      "Music",
      "Problem Solving",
      "Social-Emotional"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "the-backyardigans.jpg"
  },
  {
    "title": "The Bear Construction",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Vehicle Themes",
      "Engineering Concepts",
      "Storytelling without Dialogue",
      "Construction",
      "Teamwork",
      "Problem Solving",
      "Machinery",
      "Vehicle Recognition",
      "Entertainment",
      "Curiosity",
      "ASMR"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation with detailed depictions of construction sites and machinery",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "Low",
    "total_music_level": "Low",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-bear-construction.jpg"
  },
  {
    "title": "The Bernstein Bears",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Relatable Situations",
      "Social Development",
      "Social-Emotional",
      "Family Relationships",
      "Family Values",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D animation with a hand-drawn look.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-bernstein-bears.jpg"
  },
  {
    "title": "The Big Comfy Couch",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-6",
    "seasons": "7 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Preschool-Basics",
      "Overcoming Fears",
      "Social-Emotional",
      "Problem Solving",
      "Motor Skills",
      "Numeracy",
      "Literacy",
      "Exercise"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action costumed puppetry with detailed sets.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-big-comfy-couch.jpg"
  },
  {
    "title": "The Busy World of Richard Scarry",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Learning from Mistakes",
      "Cultural & Social",
      "Problem Solving",
      "Social-Emotional",
      "Community Service",
      "Relatable Situations",
      "Curiosity"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D hand-drawn animation with detailed illustrations. Soft, pastel colors with a focus on everyday environments.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-busy-world-of-richard-scarry.jpg"
  },
  {
    "title": "The Care Bears (1985-1988)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Learning from Mistakes",
      "Emotional Intelligence",
      "Social-Emotional",
      "Social Development",
      "Friendship"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional 2D animation with soft character designs. Color Palette: Pastel colors and gentle hues.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Moderate",
    "image_filename": "the-care-bears-(1985-1988).jpg"
  },
  {
    "title": "The Cat in the Hat",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "STEM",
      "Science",
      "Nature",
      "Exploration",
      "Problem Solving",
      "Geography",
      "Ecosystems",
      "Curiosity",
      "Critical Thinking"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a video game aesthetic. Color Palette: Bright, vivid colors with high saturation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "the-cat-in-the-hat.jpg"
  },
  {
    "title": "The Clangers (BBC)",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Spacetime and the Cosmos",
      "Creativity & Imagination",
      "Problem Solving",
      "Social-Emotional",
      "Social Development",
      "Exploration",
      "Teamwork"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional Stop-Motion animation with live-action model sets",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename":     "the-clangers-(bbc).jpeg"
  },
  {
    "title": "The Crocodile Hunter (1996-2007):",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "8+",
    "seasons": "8 Seasons",
    "avg_episode_length": "Very Long (>30m)",
    "themes": [
      "Environmental Awareness",
      "Overcoming Fears",
      "Positive Role Models",
      "Wildlife Exploration",
      "Wildlife Conservation",
      "Nature",
      "Natural World",
      "Animals",
      "Animal Behaviour",
      "Curiosity",
      "Ecosystems",
      "Intense Animal Interaction"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-action documentary featuring wildlife. Color Palette: Natural colors showcasing diverse environments.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-crocodile-hunter-(1996-2007).jpg"
  },
  {
    "title": "The Enchanted World of Brambly Hedge",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Natural World",
      "Social-Emotional",
      "Problem Solving",
      "Teamwork",
      "Curiosity",
      "Mindfulness",
      "Nature"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Stop-motion animation with hand-crafted models.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-enchanted-world-of-brambly-hedge.jpg"
  },
  {
    "title": "The Epic Tales of Captain Underpants (2018-present)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Friendship",
      "Problem Solving",
      "Entertainment",
      "Mischievous Behaviour",
      "Toilet Humour"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D animation with a comic-book aesthetic",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "the-epic-tales-of-captain-underpants-(2018-present).jpeg"
  },
  {
    "title": "The fixies",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "5 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "STEM",
      "Problem Solving",
      "Curiosity",
      "Teamwork",
      "Science",
      "Motor Skills",
      "Critical Thinking",
      "Technology",
      "Engineering Concepts"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with detailed and dynamic visuals.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-fixies.jpeg"
  },
  {
    "title": "The Land Before Time (2016)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Friendship",
      "Problem Solving",
      "Perseverance",
      "Adventure",
      "Entertainment",
      "Dinosaurs",
      "Mild Peril",
      "Mild Intense Scenes"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI Animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-land-before-time-(2016).jpg"
  },
  {
    "title": "The Land of Boggs",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "12+",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural & Social",
      "Life Lessons",
      "Creativity & Imagination",
      "Learning from Mistakes",
      "Complex Emotional Themes",
      "Entertainment",
      "Humor",
      "Silly Comedy",
      "Skit Comedy",
      "Slice of Life",
      "Light Hearted",
      "Social-Emotional",
      "Relatable Situations",
      "Surreal Imagery",
      "Mature Themes"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D animation with simple, colorful designs and expressive characters.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-land-of-boggs.jpeg"
  },
  {
    "title": "The Lion Guard",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Natural World",
      "Wildlife Conservation",
      "Wildlife Exploration",
      "Courage",
      "Responsibility"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Digital Animation with bright and colorful designs. Color Palette: Bright and vivid colors with emphasis on primary colors.",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-lion-guard.jpg"
  },
  {
    "title": "The Little Mermaid 1992 series",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Adventure",
      "Friendship",
      "Courage",
      "Marine Biology",
      "Entertainment",
      "Teamwork",
      "Mild Peril"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional 2D Animation with Bold Designs",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-little-mermaid-1992-series.jpg"
  },
  {
    "title": "The Magic School Bus Rides Again",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "STEM",
      "Exploration",
      "Critical Thinking",
      "Discovery",
      "Curiosity",
      "Nature",
      "Science"
    ],
    "interactivity_level": "High",
    "animation_style": "Traditional hand-drawn 2D animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "High",
    "image_filename": "the-magic-school-bus-rides-again.jpg"
  },
  {
    "title": "The Magic School Bus (1994-1997)",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "STEM",
      "Nature",
      "Science",
      "Engineering Concepts",
      "Curiosity",
      "Experimentation"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Traditional hand-drawn",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate-High",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-magic-school-bus-(1994-1997).jpg"
  },
  {
    "title": "The Mik Maks",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "2-6",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learning through Songs",
      "Preschool-Basics",
      "Elementary-Basics",
      "sing-a-long",
      "Dance",
      "Instruments",
      "Music",
      "Motor Skills",
      "Exercise",
      "Phonics",
      "Vocabulary",
      "Entertainment",
      "Silly Comedy",
      "Family Values",
      "Family Relationships"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action Performances with Colorful Costumes and Sets. Some 2D animations",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "the-mik-maks.jpg"
  },
  {
    "title": "The New Adventures of Winnie the Pooh",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-7",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Friendship",
      "Problem Solving",
      "Social Development",
      "Emotional Intelligence",
      "Relatable Situations"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional Hand-Drawn 2D animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low",
    "image_filename": "the-new-adventures-of-winnie-the-pooh.jpg"
  },
  {
    "title": "The Octonauts",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Problem Solving",
      "Ecosystems",
      "Curiosity",
      "Natural World",
      "Marine Biology",
      "Teamwork"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI animation set in an underwater world. Extremely bright and vivid colors with high saturation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-octonauts.jpg"
  },
  {
    "title": "The Oddbods Show",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "4 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Friendship",
      "Entertainment",
      "Social-Emotional",
      "Slapstick Comedy",
      "Mischievous Behaviour"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation with bright and vivid colors",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "the-oddbods-show.jpg"
  },
  {
    "title": "The Snoopy Show",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "3 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Cultural & Social",
      "Creativity & Imagination",
      "Entertainment",
      "Social Development",
      "Friendship"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D digital animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "High",
    "image_filename": "the-snoopy-show.jpg"
  },
  {
    "title": "The Stinky & Dirty Show (2016-2019)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Teamwork",
      "Perseverance",
      "Engineering Concepts",
      "Critical Thinking"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate-High",
    "image_filename": "the-stinky-and-dirty-show-(2016-2019).jpg"
  },
  {
    "title": "The Wiggles",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "1-4",
    "seasons": "6 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Physical Fitness",
      "Preschool-Basics",
      "Music",
      "Dance",
      "sing-a-long",
      "Motor Skills",
      "Social-Emotional",
      "Entertainment"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with Bright Colors and Simple Settings",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate-High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "the-wiggles.jpg"
  },
  {
    "title": "Theodore Tugboat",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Environmental Awareness",
      "Problem Solving",
      "Friendship",
      "Teamwork",
      "Adventure",
      "Responsibility",
      "Social-Emotional"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Combination of live-action, puppetry, and CGI elements. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "High",
    "image_filename": "theodore-tugboat.jpeg"
  },
  {
    "title": "Thomas & Friends (1984-2008)",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "25 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Problem Solving",
      "Responsibility"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Traditional Stop-Motion animation with live-action model sets",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low",
    "music_tempo": "Low",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "thomas-and-friends-(1984-2008).jpg"
  },
  {
    "title": "Thomas & Friends: All Engines Go (2021)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Friendship",
      "Teamwork",
      "Responsibility",
      "Problem Solving"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Low",
    "image_filename": "thomas-and-friends-all-engines-go-(2021).jpg"
  },
  {
    "title": "Time for school",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Arts & Crafts",
      "Preschool-Basics",
      "Elementary-Basics",
      "Relatable Situations",
      "Social Development",
      "Social-Emotional",
      "Routine",
      "Motor Skills"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Moderate",
    "total_music_level": "Low-Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "High",
    "image_filename": "time-for-school.jpeg"
  },
  {
    "title": "Tinga Tinga Tales",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "4-7",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Cultural Appreciation",
      "Cultural & Social",
      "Learning from Mistakes",
      "African folk tales",
      "Cultures & Traditions",
      "Animals",
      "Curiosity",
      "Nature Sounds",
      "Traditional Narratives",
      "Geography",
      "Animal Behaviour",
      "Social-Emotional",
      "Morality",
      "Friendship",
      "Responsibility",
      "Humor",
      "Entertainment",
      "Light Hearted"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "2D Animation Inspired by Tinga Tinga African Art",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "tinga-tinga-tales.jpg"
  },
  {
    "title": "Tom & Jerry",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "6-12",
    "seasons": "1 Season",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Creativity & Imagination",
      "Humor",
      "Problem Solving",
      "Slapstick Comedy",
      "Rivalry",
      "Entertainment",
      "Music",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "2D Digital Animation with exaggerated and dynamic character movements.",
    "dialogue_intensity": "None",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "Very High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "tom-and-jerry.jpeg"
  },
  {
    "title": "Topsy and Tim",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Social-Emotional",
      "Relatable Situations",
      "Family Relationships",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action with real actors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "High",
    "image_filename": "topsy-and-tim.jpeg"
  },
  {
    "title": "Tots TV",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "5 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Cultures & Traditions",
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Literacy",
      "Curiosity",
      "Language Learning"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action with puppet segments. Color Palette: Soft, natural colors.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "tots-tv.jpg"
  },
  {
    "title": "Tractor Ted",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "3 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Agriculture",
      "Machinery",
      "Farm Life",
      "Animals",
      "Nature",
      "Animal Behaviour"
    ],
    "interactivity_level": "High",
    "animation_style": "Live-Action and 2D Animation",
    "dialogue_intensity": "Low-Moderate",
    "sound_effects_level": "Low",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low",
    "scene_frequency": "Low-Moderate",
    "image_filename": "tractor-ted.jpg"
  },
  {
    "title": "Trash truck",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Problem Solving",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Low",
    "animation_style": "3D CGI animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Moderate",
    "image_filename": "trash-truck.jpeg"
  },
  {
    "title": "Tumble leaf",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "4 Seasons",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Nature",
      "Motor Skills",
      "Critical Thinking",
      "Exploration",
      "Natural World",
      "Cognitive Development"
    ],
    "interactivity_level": "High",
    "animation_style": "Digital 3D Stop-Motion",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "tumble-leaf.jpg"
  },
  {
    "title": "Tweedy & Fluff",
    "stimulation_score": 1,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": null,
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Life-Lessons",
      "Exploring Emotions",
      "Communication and Expression",
      "Stop-Motion",
      "Slice of Life",
      "Friendship",
      "Pet Ownership",
      "Empathy",
      "Gentle Humour",
      "Problem-Solving",
      "Relatable-Situations"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "Traditional stop-frame animation techniques, meticulously capturing each movement of the handcrafted puppets frame by frame to create fluid and engaging motion.",
    "dialogue_intensity": "Low",
    "sound_effects_level": "Moderate",
    "music_tempo": "Low-Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low",
    "image_filename": "tweedy-and-fluff.jpg"
  },
  {
    "title": "Ultimate Spiderman",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": "4 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Superhero Themes",
      "Morality",
      "Responsibility",
      "Courage",
      "Problem Solving",
      "Entertainment",
      "Humor",
      "Mild Violent themes",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low-Moderate",
    "animation_style": "2D Digital Animation with bold lines and exaggerated expressions. Color Palette: Bright and vivid colors with high contrast",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate",
    "image_filename": "ultimate-spiderman.jpeg"
  },
  {
    "title": "VeggieTales",
    "stimulation_score": 4,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Religion",
      "Responsibility",
      "Family Values",
      "History",
      "Literacy",
      "Social Development",
      "Community Service",
      "Biblical Teachings"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Very High",
    "image_filename": "veggietales.jpg"
  },
  {
    "title": "VeggieTales in the House (2014-2016)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Religion",
      "Responsibility",
      "Family Values",
      "History",
      "Literacy",
      "Social Development",
      "Community Service",
      "Biblical Teachings"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "3D CGI",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "veggietales-in-the-house-(2014-2016)"
  },
  {
    "title": "Vlad and Nikki",
    "stimulation_score": 5,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Learn Through Play",
      "Creativity & Imagination",
      "Problem Solving",
      "Adventure",
      "Family Relationships",
      "Multilingual Learning",
      "Humor",
      "Entertainment",
      "Hyper-Activity"
    ],
    "interactivity_level": "Low",
    "animation_style": "Live-action videos featuring Vlad and Niki, often enhanced with special effects and animations to create engaging and fantastical elements.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "High",
    "image_filename": "vlad-and-nikki.jpg"
  },
  {
    "title": "Vooks",
    "stimulation_score": 2,
    "platform": "YouTube",
    "target_age_group": "2-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Creativity & Imagination",
      "Literacy",
      "Reading Comprehension",
      "Vocabulary",
      "Language Learning",
      "Phonics",
      "Cognitive Development",
      "Music",
      "Speech Development",
      "Read-Along"
    ],
    "interactivity_level": "High",
    "animation_style": "Animated adaptations of children's books, featuring subtle animations that complement the original illustrations, accompanied by professional narration and sound effects.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate-High",
    "scene_frequency": "Low-Moderate",
    "image_filename": "Vooks.jpg"
  },
  {
    "title": "Wacky Races",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "6-10",
    "seasons": "1 Season",
    "avg_episode_length": "Medium (10-20m)",
    "themes": [
      "Creativity & Imagination",
      "Adventure",
      "Humor",
      "Entertainment",
      "Perseverance",
      "Slapstick Comedy",
      "Mechanics",
      "Engineering Concepts",
      "Lack of Consequences",
      "Mild Intense Scenes",
      "Mild Violent themes"
    ],
    "interactivity_level": "Low",
    "animation_style": "Cartoonish 2D animation style",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Very High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Very High",
    "scene_frequency": "Moderate",
    "image_filename": "wacky-races.jpeg"
  },
  {
    "title": "Wallykazam",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Elementary-Basics",
      "Motor Skills",
      "Problem Solving",
      "Language Learning",
      "Literacy",
      "Fantasy Elements",
      "Reading Comprehension",
      "Phonics"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with bright and vibrant colors. Color Palette: Bright and cheerful colors with high saturation.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Very High",
    "image_filename": "wallykazam.jpg"
  },
  {
    "title": "What's New, Scooby-Doo? (2002–2006)",
    "stimulation_score": 5,
    "platform": "TV",
    "target_age_group": "7-12",
    "seasons": null,
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Problem Solving",
      "Teamwork",
      "Mystery",
      "Entertainment",
      "Humor",
      "Critical Thinking",
      "Mild Peril",
      "Mild Fantasy Violence"
    ],
    "interactivity_level": "Low",
    "animation_style": "Digital 2D animation",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "High",
    "music_tempo": "High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "High",
    "scene_frequency": "Moderate",
    "image_filename": "whats-new-scooby-doo-(2002–2006).jpeg"
  },
  {
    "title": "Wishenpoof",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "3-6",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Creativity & Imagination",
      "Social-Emotional",
      "Problem Solving",
      "Social Development",
      "Morality",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "3D CGI Animation with stylized and colorful designs. Bright but not overly saturated colors, with a focus on vibrant settings.",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "High",
    "image_filename": "wishenpoof.jpeg"
  },
  {
    "title": "Woolly and Tig",
    "stimulation_score": 2,
    "platform": "TV",
    "target_age_group": "2-5",
    "seasons": "2 Seasons",
    "avg_episode_length": "Short (<10m)",
    "themes": [
      "Overcoming Fears",
      "Social-Emotional",
      "Relatable Situations",
      "Courage",
      "Emotional Intelligence"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Combination of live-action and CGI animation.",
    "dialogue_intensity": "Moderate",
    "sound_effects_level": "Low-Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Low-Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "wolly-and-tig.jpg"
  },
  {
    "title": "Work It Out Wombats",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-7",
    "seasons": "1 Season",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Life Lessons",
      "Problem Solving",
      "Teamwork",
      "Critical Thinking",
      "Social-Emotional",
      "Relatable Situations"
    ],
    "interactivity_level": "High",
    "animation_style": "2D digital animation with a hand-drawn look. Bright and cheerful colors with simple backgrounds",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "work-it-out-wombats.jpg"
  },
  {
    "title": "Xavier Riddle and the Secret Museum",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "5-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Cultures & Traditions",
      "Life Lessons",
      "History",
      "Morality",
      "Problem Solving",
      "Curiosity",
      "Courage",
      "Adventure"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with a watercolor aesthetic. Color Palette: Soft and natural colors with pastel hues.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate",
    "image_filename": "Xavier Riddle and the Secret Museum.jpg"
  },
  {
    "title": "Zaky & friends",
    "stimulation_score": 3,
    "platform": "YouTube",
    "target_age_group": "3-8",
    "seasons": null,
    "avg_episode_length": null,
    "themes": [
      "Life Lessons",
      "Cultures & Traditions",
      "Learning through Songs",
      "Cultural Appreciation",
      "Spiritual Development",
      "Quranic stories",
      "Religion",
      "Literacy",
      "Numeracy",
      "Social Development",
      "Social-Emotional",
      "Emotional Intelligence"
    ],
    "interactivity_level": "High",
    "animation_style": "2D Digital Animation with bright colors. Color Palette: Vibrant and engaging.",
    "dialogue_intensity": "Moderate-High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate",
    "total_music_level": "Moderate-High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Low-Moderate",
    "image_filename": "zaky-and-friends.jpg"
  },
  {
    "title": "Zoboomafoo (1999-2001)",
    "stimulation_score": 3,
    "platform": "TV",
    "target_age_group": "4-8",
    "seasons": "2 Seasons",
    "avg_episode_length": "Long (20-30m)",
    "themes": [
      "Environmental Awareness",
      "Wildlife Exploration",
      "Animals",
      "Curiosity",
      "Nature",
      "Wildlife Conservation"
    ],
    "interactivity_level": "Moderate",
    "animation_style": "Live-action, puppetry, and animation",
    "dialogue_intensity": "High",
    "sound_effects_level": "Moderate",
    "music_tempo": "Moderate-High",
    "total_music_level": "High",
    "total_sound_effect_time_level": "Moderate",
    "scene_frequency": "Moderate-High",
    "image_filename": "zoboomafoo.jpg"
  }
]
</file>

<file path="database/schema.sql">
-- database/schema.sql

DROP TABLE IF EXISTS shows;

CREATE TABLE shows (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL UNIQUE,
    stimulation_score INTEGER,
    platform TEXT,
    target_age_group TEXT, -- Store original string for display
    min_age INTEGER,        -- Parsed minimum age for filtering
    max_age INTEGER,        -- Parsed maximum age for filtering
    seasons TEXT,
    avg_episode_length TEXT,
    themes TEXT,            -- Store as JSON string
    interactivity_level TEXT,
    animation_style TEXT,
    dialogue_intensity TEXT,
    sound_effects_level TEXT,
    music_tempo TEXT,
    total_music_level TEXT,
    total_sound_effect_time_level TEXT,
    scene_frequency TEXT,
    image_filename TEXT,
    -- Add numerical versions for charting/advanced filtering if needed
    dialogue_intensity_num INTEGER,
    scene_frequency_num INTEGER,
    sound_effects_level_num INTEGER,
    total_music_level_num INTEGER
);

-- Optional: Create indexes for faster filtering
CREATE INDEX idx_min_age ON shows (min_age);
CREATE INDEX idx_max_age ON shows (max_age);
CREATE INDEX idx_stimulation_score ON shows (stimulation_score);
</file>

<file path="package.json">
{
  "name": "sensory-friendly-shows",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^5.1.0",
    "react-icons": "^5.5.0",
    "sqlite3": "^5.1.7"
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}
</file>

<file path="server.js">
// server.js
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3001;

// --- Database Connection ---
const dbPath = path.resolve(__dirname, 'database', 'shows.db');
let db;

function connectDatabase() {
    db = new sqlite3.Database(dbPath, sqlite3.OPEN_READONLY, (err) => {
        if (err) {
            console.error("Error connecting to the database:", err.message);
            console.error("Retrying connection in 5 seconds...");
            setTimeout(connectDatabase, 5000);
        } else {
            console.log("Successfully connected to the database.");
        }
    });
    db.on('error', (err) => {
        console.error('Database error:', err.message);
    });
}
connectDatabase();

// --- Middleware ---
app.use(cors());
app.use(express.json());
app.use((req, res, next) => {
    // CORRECT PLACEMENT FOR THE LOG: Inside the function
    console.log(`>>> Server received request: ${req.method} ${req.originalUrl}`); 
  
    // Existing DB Check Logic
    if (!db || !db.open) { 
       console.error('Database not connected. Attempting to reconnect...');
        connectDatabase();
        setTimeout(() => {
            if (!db || !db.open) {
                console.error('Reconnection failed.');
                return res.status(503).json({ error: 'Database service unavailable. Please try again shortly.' });
            } else {
                console.log('Reconnection successful.');
                next();
            }
        }, 100); 
    } else {
        next(); 
    }
  });
app.use((req, res, next) => {
  if (!db || !db.open) {
     console.error('Database not connected. Attempting to reconnect...');
      connectDatabase();
      setTimeout(() => {
          if (!db || !db.open) {
              console.error('Reconnection failed.');
              return res.status(503).json({ error: 'Database service unavailable. Please try again shortly.' });
          } else {
              console.log('Reconnection successful.');
              next();
          }
      }, 100);
  } else {
      next();
  }
});


// --- Helper Function for DB Queries (returns a Promise) ---
function runQuery(sql, params = []) {
    return new Promise((resolve, reject) => {
        // Use db.all for queries that can return multiple rows
        db.all(sql, params, (err, rows) => {
            if (err) {
                 console.error("DB Query Error:", err.message, "SQL:", sql, "Params:", params);
                 reject(err);
            } else {
                 // Parse themes for each row
                 rows.forEach(row => {
                    try {
                        if (row.themes && typeof row.themes === 'string') {
                            row.themes = JSON.parse(row.themes);
                        } else if (!row.themes) {
                             row.themes = [];
                         }
                    } catch (e) {
                         console.error(`Error parsing themes in runQuery for row ID ${row.id || '(unknown)'}:`, e);
                         row.themes = [];
                     }
                 });
                resolve(rows);
            }
        });
    });
}

function getSingleRow(sql, params = []) {
     return new Promise((resolve, reject) => {
         db.get(sql, params, (err, row) => {
            if (err) {
                 console.error("DB Get Error:", err.message, "SQL:", sql, "Params:", params);
                 reject(err);
             } else {
                 // Parse themes if the row exists and has themes
                if (row) {
                    try {
                        if (row.themes && typeof row.themes === 'string') {
                            row.themes = JSON.parse(row.themes);
                        } else if (!row.themes) {
                             row.themes = [];
                         }
                    } catch (e) {
                         console.error(`Error parsing themes in getSingleRow for row ID ${row.id || '(unknown)'}:`, e);
                         row.themes = [];
                     }
                 }
                 resolve(row || null); // Resolve with row or null if not found
             }
         });
     });
 }


// --- API Routes ---

// Basic test route
app.get('/api', (req, res) => {
    res.json({ message: 'Welcome to the Sensory Friendly Shows API!' });
});

// NEW: Bundled Homepage Data Endpoint
app.get('/api/homepage-data', async (req, res) => {
    console.log("Fetching bundled homepage data...");
    const FEATURED_SHOW_TITLE = "Puffin Rock"; // Make sure this title exists
    const ROW_LIMIT = 6;

    try {
        const [
            featuredShow,
            popularShows, // Using title sort as placeholder for actual popularity
            ratedShows,
            lowStimShows,
            highInteractionShows
        ] = await Promise.all([
            // Query for Featured Show by Title
             getSingleRow(`SELECT * FROM shows WHERE LOWER(title) = LOWER(?)`, [FEATURED_SHOW_TITLE]),
            // Query for Popular Shows (Placeholder: alphabetical)
             runQuery(`SELECT id, title, stimulation_score, target_age_group, themes, image_filename FROM shows ORDER BY title ASC LIMIT ?`, [ROW_LIMIT]),
            // Query for Top-Rated Shows
             runQuery(`SELECT id, title, stimulation_score, target_age_group, themes, image_filename FROM shows ORDER BY stimulation_score DESC LIMIT ?`, [ROW_LIMIT]),
            // Query for Low Stimulation Shows
             runQuery(`SELECT id, title, stimulation_score, target_age_group, themes, image_filename FROM shows WHERE stimulation_score <= ? ORDER BY title ASC LIMIT ?`, [1, ROW_LIMIT]),
            // Query for High Interaction Shows
             runQuery(`SELECT id, title, stimulation_score, target_age_group, themes, image_filename FROM shows WHERE LOWER(interactivity_level) = LOWER(?) ORDER BY title ASC LIMIT ?`, ['High', ROW_LIMIT])
        ]);

        res.json({
            featuredShow: featuredShow || null, // Ensure it's null if not found
            popularShows: popularShows || [],
            ratedShows: ratedShows || [],
            lowStimShows: lowStimShows || [],
            highInteractionShows: highInteractionShows || []
        });

    } catch (error) {
        console.error("Error fetching homepage data:", error.message);
        res.status(500).json({ error: "Failed to fetch homepage data" });
    }
});


// Endpoint to get all unique themes (Keep this)
app.get('/api/themes', (req, res) => {
    const sql = `SELECT DISTINCT themes FROM shows`;
    db.all(sql, [], (err, rows) => {
        if (err) {
            console.error("Error fetching themes:", err.message);
            return res.status(500).json({ error: 'Failed to fetch themes' });
        }
        const allThemes = new Set();
        rows.forEach(row => {
             if (!row || !row.themes) return;
            try {
                if (typeof row.themes === 'string' && row.themes.trim().length > 0) {
                    const themesArray = JSON.parse(row.themes);
                     if (Array.isArray(themesArray)) {
                        themesArray.forEach(theme => {
                             if (typeof theme === 'string' && theme.trim()) {
                                 allThemes.add(theme.trim());
                            }
                        });
                     }
                }
            } catch (e) {
                console.error(`Error parsing themes JSON: "${row.themes}". Error: ${e.message}`);
            }
        });
        const sortedThemes = Array.from(allThemes).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }));
         res.json(sortedThemes);
    });
});

// Endpoint to get shows with filtering, sorting, and pagination (Keep this for Catalog page)
app.get('/api/shows', (req, res) => {
    // ... existing code for this route ...
     const {
        search = '', minAge, maxAge, themes, interactivity, dialogue, sceneFreq,
        stimScoreMin = 1, stimScoreMax = 5,
        sortBy = 'title', sortOrder = 'ASC', limit = 21, page = 1
    } = req.query;

    const allowedSortBy = ['title', 'stimulation_score'];
    const validSortBy = allowedSortBy.includes(sortBy) ? sortBy : 'title';
    const validSortOrder = sortOrder.toUpperCase() === 'DESC' ? 'DESC' : 'ASC';

    const pageInt = parseInt(page, 10);
    const limitInt = parseInt(limit, 10);
    const validPage = !isNaN(pageInt) && pageInt > 0 ? pageInt : 1;
    const validLimit = !isNaN(limitInt) && limitInt > 0 ? limitInt : 21;
    const offset = (validPage - 1) * validLimit;

    let baseSql = `SELECT id, title, stimulation_score, target_age_group, themes, image_filename FROM shows`; 
    let countSqlBase = `SELECT COUNT(*) as count FROM shows`;
    let whereClauses = ['1=1'];
    const params = [];

     if (search) { whereClauses.push(`LOWER(title) LIKE LOWER(?)`); params.push(`%${search}%`); }
     if (minAge !== undefined && maxAge !== undefined) {
        const userMin = parseInt(minAge, 10); const userMax = parseInt(maxAge, 10);
         if (!isNaN(userMin) && !isNaN(userMax)) { whereClauses.push(`(min_age <= ? AND max_age >= ?)`); params.push(userMax, userMin); }
         else { console.warn(`Invalid age filter values received: minAge=${minAge}, maxAge=${maxAge}`); }
    }
    const stimMin = parseInt(stimScoreMin, 10); const stimMax = parseInt(stimScoreMax, 10);
     if (!isNaN(stimMin) && !isNaN(stimMax) && stimMin >= 1 && stimMax <= 5) { whereClauses.push(`stimulation_score BETWEEN ? AND ?`); params.push(stimMin, stimMax); }
     if (themes) {
         const selectedThemes = themes.split(',').map(t => t.trim()).filter(t => t && typeof t === 'string');
         if (selectedThemes.length > 0) {
             const themeConditions = selectedThemes.map(theme => { params.push(`%"${theme}"%`); return `themes LIKE ?`; }).join(' OR ');
             whereClauses.push(`(${themeConditions})`);
         }
     }
    if (interactivity) { whereClauses.push(`interactivity_level = ?`); params.push(interactivity); }
    if (dialogue) { whereClauses.push(`dialogue_intensity = ?`); params.push(dialogue); }
    if (sceneFreq) { whereClauses.push(`scene_frequency = ?`); params.push(sceneFreq); }

    const whereSql = ` WHERE ${whereClauses.join(' AND ')}`;
    const orderBySql = ` ORDER BY ${validSortBy} ${validSortOrder}`;
    const fullSql = `${baseSql}${whereSql}${orderBySql} LIMIT ? OFFSET ?`;
    const countSql = `${countSqlBase}${whereSql}`;
    const fullParams = [...params, validLimit, offset];

    Promise.all([ runQuery(fullSql, fullParams), getSingleRow(countSql, params) ])
     .then(([shows, countRow]) => {
         const totalShows = countRow ? countRow.count : 0;
         const totalPages = Math.ceil(totalShows / validLimit);
         res.json({ shows, totalShows, currentPage: validPage, totalPages });
     }).catch(errorInfo => {
         // Error handling logic slightly improved in runQuery/getSingleRow
         res.status(500).json({ error: `Failed to fetch shows or count` });
     });
});

// Endpoint to get autocomplete suggestions (Keep this)
app.get('/api/suggestions', (req, res) => {
    // ... existing code ...
     const { term } = req.query;
    if (!term || typeof term !== 'string' || term.trim().length === 0) {
        return res.json([]);
    }
    const searchTerm = term.trim();
    const sql = `SELECT DISTINCT title FROM shows WHERE LOWER(title) LIKE LOWER(?) ORDER BY title ASC LIMIT 10`;
    const params = [`${searchTerm}%`];
    db.all(sql, params, (err, rows) => {
        if (err) {
            console.error("Error fetching suggestions:", err.message);
            return res.status(500).json({ error: 'Failed to fetch suggestions' });
        }
        const suggestions = rows.map(row => row.title);
        res.json(suggestions);
    });
});

// Endpoint to get a single show by title (Keep this)
app.get('/api/shows/title/:title', async (req, res) => {
     const title = decodeURIComponent(req.params.title); 
     if (!title) { return res.status(400).json({ error: 'No title provided.' }); }
     console.log(`Fetching show by title: "${title}"`);
     const sql = `SELECT * FROM shows WHERE LOWER(title) = LOWER(?)`;
     try {
         const row = await getSingleRow(sql, [title]);
         if (row) {
             res.json(row);
         } else {
             res.status(404).json({ error: `Show with title "${title}" not found` });
         }
     } catch (err) {
         res.status(500).json({ error: `Failed to fetch show "${title}"` });
     }
});

// Endpoint for Comparison Tool (Keep this)
app.get('/api/shows/compare', (req, res) => {
    // ... existing code ...
      const { ids } = req.query;
    if (!ids || typeof ids !== 'string') { return res.status(400).json({ error: 'No show IDs string provided for comparison.' }); }
    const idArray = ids.split(',').map(id => parseInt(id.trim(), 10)).filter(id => !isNaN(id) && id > 0).slice(0, 3);
    if (idArray.length === 0) { return res.status(400).json({ error: 'Invalid or no valid show IDs provided after parsing.' }); }
    const placeholders = idArray.map(() => '?').join(',');
    const sql = `SELECT id, title, stimulation_score, target_age_group, themes, image_filename, platform, avg_episode_length, interactivity_level, dialogue_intensity, scene_frequency, sound_effects_level, total_music_level, dialogue_intensity_num, scene_frequency_num, sound_effects_level_num, total_music_level_num FROM shows WHERE id IN (${placeholders})`;
    runQuery(sql, idArray)
        .then(rows => {
            const sortedRows = idArray.map(id => rows.find(row => row.id === id)).filter(Boolean);
            res.json(sortedRows);
        })
        .catch(err => {
             res.status(500).json({ error: 'Failed to fetch shows for comparison' });
         });
});

// Endpoint to get details for a single show by ID (Keep this)
app.get('/api/shows/:id', async (req, res) => {
    // ... existing code using getSingleRow ...
    const { id } = req.params;
    const showId = parseInt(id, 10);
    if (isNaN(showId)) { return res.status(400).json({ error: 'Invalid show ID provided.' }); }
    const sql = `SELECT * FROM shows WHERE id = ?`;
     try {
         const row = await getSingleRow(sql, [showId]);
         if (row) {
             res.json(row);
         } else {
             res.status(404).json({ error: `Show with ID ${showId} not found` });
         }
     } catch (err) {
         res.status(500).json({ error: `Failed to fetch show ${showId}` });
     }
});


// --- Catch-all & Error Handling ---
app.use('/api', (req, res, next) => {
    if (!res.headersSent) {
       res.status(404).json({ error: `API endpoint not found: ${req.method} ${req.originalUrl}` });
    }
});
app.use((err, req, res, next) => {
    console.error("Unhandled application error:", err.stack);
    if (!res.headersSent) {
        res.status(500).json({ error: 'Something went wrong on the server!' });
    }
});

// --- Server Start & Shutdown ---
const server = app.listen(port, () => {
    console.log(`Backend server listening at http://localhost:${port}`);
});
process.on('SIGINT', () => { /* ... existing shutdown code ... */ 
    console.log('SIGINT signal received: closing HTTP server');
    server.close(() => {
        console.log('HTTP server closed');
         if (db && db.open) {
            db.close((err) => {
                if (err) { console.error('Error closing database:', err.message); }
                else { console.log('Database connection closed.'); }
                process.exit(0);
            });
         } else { process.exit(0); }
    });
});
process.on('SIGTERM', () => { /* ... existing shutdown code ... */ 
    console.log('SIGTERM signal received: closing HTTP server');
    server.close(() => {
        console.log('HTTP server closed');
         if (db && db.open) {
             db.close((err) => {
                 if (err) { console.error('Error closing database:', err.message); }
                 else { console.log('Database connection closed.'); }
                process.exit(0);
            });
        } else { process.exit(0); }
    });
});
</file>

</files>
